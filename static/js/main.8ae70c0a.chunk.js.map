{"version":3,"sources":["FourierCoefficients.module.css","FourierCoefficients.js","FrequencyDomain.js","App.js","serviceWorker.js","index.js","FrequencyDomain.module.css","App.module.css"],"names":["module","exports","Dials","props","Grid","id","concat","signal","toString","signal_id","className","styles","signal_container","signal_info","Tooltip","title","IconButton","aria-label","color","Box","component","m","p","bgcolor","Button","onClick","signalID","onRemove","variant","signal_props","amplitude","toFixed","input_type","type","min","max","value","step","onChange","phase","signal_animate","align-content","onAnimate","d3","prototype","moveToFront","this","each","parentNode","appendChild","moveToBack","firstChild","insertBefore","Controls","event","i","signalList","signals","length","push","key","renderDial","dials","global_controls","onAdd","style","gridRow","name","demoSignal","onDemoSignal","FormControlLabel","label","labelPlacement","control","Switch","checked","plotViewState","onToggleView","inputProps","gridColumn","alignItems","justifyContent","plotView","React","Component","FourierCirclesMagPos","strokeWidth","divHeight","document","getElementById","getBoundingClientRect","height","divWidth","width","plotHeight","plotWidth","highlight","radius","fourierMultiples","fourierCircles","cx","cy","transform","r","fill","colour","stroke","FourierCirclesMagNeg","FourierCirclesPhasePos","FourierCirclesPhaseNeg","FourierMagPlot","FourierMagSvg","remove","xscale_freq","domain","range","yscale_freq","xAxisTicks","ticks","filter","tick","Number","isInteger","yAxisTicks","x_axis_freq","tickValues","tickFormat","y_axis_freq","append","attr","call","text","drawAxis","circleList","renderCirclePos","renderCircleNeg","FourierPhasePlot","SinePlot","svgSinePlot","xscale","yscale","x_axis","scale","y_axis","pathData","curve","lineGenerator","values","pathID","SumPlot","svgSumPlot","sumSignals","k","j","n","FourierCoefficients","state","handleMouseDown","bind","handleMouseUp","handleMouseMove","handleMouseOverFourier","handleMouseMoveFourierMag","handleMouseMoveFourierPhase","handleMouseOverSignalControls","handleDemoSignal","redrawSignal","intensity","frequency","generateSignal","draggingMag","draggingPhasePos","draggingPhaseNeg","rgb","newSignal","splice","setState","index","console","log","window","requestAnimationFrame","points","Ts","Math","PI","cos","inputType","target","getAttribute","parseFloat","isNaN","generateDC","e","preventDefault","stopPropagation","elementID","includes","parseInt","circleID","dragging","clientX","clientY","rect","left","top","circleCX","condition","signalControlID","opacity","emptyPlots","alternate","pow","current","container","timePlots","sinePlots","position","border","sumPlots","otherPlots","fourierMagPlots","onMouseDown","onMouseUp","onMouseMove","onMouseOver","fourierPhasePlots","controls","handleChange","addSignal","removeSignal","animateSignal","toggleView","signal_dials","Circles","onMouseOut","svgID","FrequencyPlot","freqSvg","renderCircle","FrequencyDomain","circles","sin","freqPlots","App","Typography","navbar","tab","to","exact","path","About","centertext","Home","ReactDOM","render","Boolean","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ae70c0a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"FourierCoefficients_home__10kQG\",\"container\":\"FourierCoefficients_container__kd25g\",\"navbar\":\"FourierCoefficients_navbar__2pTv4\",\"tab\":\"FourierCoefficients_tab__8pHCY\",\"controls\":\"FourierCoefficients_controls___EOHp\",\"dials\":\"FourierCoefficients_dials__1zijK\",\"global_controls\":\"FourierCoefficients_global_controls__1LP2r\",\"signal_container\":\"FourierCoefficients_signal_container__1Of7C\",\"signal_info\":\"FourierCoefficients_signal_info__2oYZ9\",\"signal_props\":\"FourierCoefficients_signal_props__1Kcya\",\"signal_dials\":\"FourierCoefficients_signal_dials__kLbm8\",\"signal_animate\":\"FourierCoefficients_signal_animate__2qmfm\",\"timePlots\":\"FourierCoefficients_timePlots__vs39U\",\"sinePlots\":\"FourierCoefficients_sinePlots__NqB9U\",\"otherPlots\":\"FourierCoefficients_otherPlots__AqeTC\",\"fourierMagPlots\":\"FourierCoefficients_fourierMagPlots__1Fesw\",\"fourierPhasePlots\":\"FourierCoefficients_fourierPhasePlots__3rZM3\",\"sumPlots\":\"FourierCoefficients_sumPlots__DMOR_\",\"fourierCircles\":\"FourierCoefficients_fourierCircles__2jYlh\"};","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styles from './FourierCoefficients.module.css'; \r\nimport * as d3 from \"d3\";\r\nimport { hsl, nest } from 'd3';\r\nimport { rgb } from 'd3';\r\n\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport { palette } from '@material-ui/system';\r\n\r\n\r\n// Prototype functions to move signals elements front and back when hovered\r\nd3.selection.prototype.moveToFront = function() {\r\n    return this.each(function(){\r\n      this.parentNode.appendChild(this);\r\n    });\r\n  };\r\n\r\nd3.selection.prototype.moveToBack = function() {\r\n    return this.each(function() {\r\n        let firstChild = this.parentNode.firstChild;\r\n        if (firstChild) {\r\n            this.parentNode.insertBefore(this, firstChild);\r\n        }\r\n    });\r\n};\r\n\r\nfunction Dials(props) {\r\n\r\n    const toolTipText = \"Try adjusting the Amplitude or Phase!\"\r\n\r\n    return(\r\n        <Grid\r\n        id={'signal-controls-'.concat(props.signal.id.toString())} \r\n        signal_id = {props.signal.id}\r\n        className={styles.signal_container}\r\n        >\r\n            <div className={styles.signal_info}>\r\n\r\n            <Tooltip title={toolTipText}>\r\n                <IconButton aria-label=\"Help\" color=\"secondary\">\r\n                    <HelpIcon />\r\n                </IconButton>\r\n            </Tooltip>\r\n                \r\n                <Box component=\"div\" m={0.5} p={1} bgcolor=\"info.main\">\r\n                    Fundamental Frequency Multiple: {props.signal.id}\r\n                </Box>\r\n                <Button \r\n                    id = \"remove-signal\" \r\n                    onClick={(signalID) => props.onRemove(props.signal.id)}\r\n                    variant=\"contained\"\r\n                    m={1}\r\n                    p={1} \r\n                    color=\"secondary\"\r\n                > \r\n                Remove Signal \r\n                </Button>\r\n\r\n            </div>\r\n            <Box \r\n            component=\"div\" \r\n            m={0.5} \r\n            p={1} \r\n            bgcolor=\"primary.main\" \r\n            color=\"primary.contrastText\"\r\n            className={styles.signal_props}\r\n            >\r\n                <div className={styles.signal_props}>\r\n                    <div>Amplitude: {props.signal.amplitude.toFixed(2)}</div>\r\n                </div>\r\n                <div className = {styles.signal_props}>\r\n                    <div>\r\n                        <input \r\n                        id = {\"signal\" + props.signal.id + \"_AmpDial\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"AmpDial\"}\r\n                        type =\"range\" \r\n                        min={0} \r\n                        max ={4} \r\n                        value = {props.signal.amplitude} \r\n                        step={0.1}\r\n                        onChange={props.onChange}\r\n                        /> \r\n\r\n                        <input\r\n                        id = {\"signal\" + props.signal.id + \"_AmpText\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"AmpText\"}\r\n                        type = \"number\"  \r\n                        min = {0}\r\n                        max = {4}\r\n                        onChange={props.onChange}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </Box>\r\n\r\n            <Box \r\n            component=\"div\" \r\n            m={0.5} \r\n            p={1} \r\n            bgcolor=\"primary.main\" \r\n            color=\"primary.contrastText\"\r\n            className={styles.signal_props}\r\n            >\r\n                <div className={styles.signal_props}>\r\n                    <div>Phase: {props.signal.phase}</div>\r\n                </div>\r\n                <div className={styles.signal_props}>\r\n                    <div>\r\n                        <input \r\n                            id = {\"signal\" + props.signal.id + \"_PhaseDial\" }\r\n                            signal_id = {props.signal.id}\r\n                            input_type = {\"PhaseDial\"}\r\n                            type =\"range\" \r\n                            min={-180} \r\n                            max ={180} \r\n                            value = {props.signal.phase} \r\n                            step={1}\r\n                            onChange={props.onChange}\r\n                        /> \r\n                        <input\r\n                            id = {\"signal\" + props.signal.id + \"_PhaseText\" }\r\n                            signal_id = {props.signal.id}\r\n                            input_type = {\"PhaseText\"}\r\n                            type = \"number\"  \r\n                            min = {-180}\r\n                            max = {180}\r\n                            onChange={props.onChange}\r\n                        />\r\n                    </div>        \r\n                </div>\r\n            </Box>\r\n\r\n            <div className={styles.signal_animate}>\r\n                <button id = \"animate-signal\" align-content = \"center\" onClick={(signalID) => props.onAnimate(props.signal.id)}> Animate Signal </button>\r\n            </div>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nclass Controls extends React.Component {\r\n\r\n    renderDial(signal){\r\n        return(\r\n            <Dials\r\n                signal = {signal}\r\n                onChange = {(event) => this.props.onChange(event)}\r\n                onRemove = {(i) => this.props.onRemove(i)}\r\n                onAnimate = {(i) => this.props.onAnimate(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n        const signalList = []; \r\n        for (let i=0; i < this.props.signals.length; i++){\r\n            signalList.push(\r\n                <div key={\"signal\" + this.props.signals[i].id}> \r\n                    {this.renderDial(this.props.signals[i])} \r\n                </div>\r\n            )\r\n        }\r\n        const toolTipText = \"Try adding a New Signal or Demo Signal!\"\r\n        return(\r\n            <div className = {styles.dials} >\r\n                <div className = {styles.global_controls}>\r\n\r\n                    <Tooltip title={toolTipText}>\r\n                        <IconButton aria-label=\"Help\" color=\"primary\">\r\n                            <HelpIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                    <Button \r\n                        id = \"add-signal\" \r\n                        align-content = \"center\" \r\n                        onClick={() => this.props.onAdd(0, 0)}\r\n                        variant=\"contained\" \r\n                        color=\"primary\"\r\n                    > \r\n                        Add New Signal \r\n                    </Button>\r\n                    <div style={{gridRow: \"2\"}}> Try a demo signal </div>\r\n                    <select name=\"demoSignal\" id=\"demoSignal\" \r\n                        value = {this.props.demoSignal}\r\n                        onChange = {(event) => this.props.onDemoSignal(event)}\r\n                        style={{gridRow: \"2\"}}>\r\n                        <option value =\"select\">- Select -</option>\r\n                        <option value =\"empty\">Empty</option>\r\n                        <option value=\"sine\">Sine Wave</option>\r\n                        <option value=\"even\">Even Wave</option>\r\n                        <option value=\"odd\">Odd Wave</option>\r\n                        <option value=\"triangle\">Triangle Wave</option>\r\n                        <option value=\"square\">Square Wave Approx</option>\r\n                        <option value=\"sawtooth\">Sawtooth Wave Approx</option>\r\n                    </select>\r\n\r\n                    <div id=\"toggle-view\" style = {{gridRow:\"3\"}} >\r\n                        <FormControlLabel\r\n                            label=\"Toggle View\"\r\n                            labelPlacement = \"Start\"\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.props.plotViewState}\r\n                                    onClick={(event) => this.props.onToggleView(event)}\r\n                                    name=\"toggleViewSwitch\"\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                />\r\n                            }\r\n                        />\r\n                         \r\n                    </div>\r\n                    <Box \r\n                        style = {{gridRow:\"3\", gridColumn:\"2\"}} \r\n                        bgcolor=\"primary.main\" \r\n                        color=\"white\" m={1}\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                    >\r\n                        {this.props.plotView}\r\n                    </Box>\r\n                   \r\n                </div>\r\n\r\n                {signalList} \r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction FourierCirclesMagPos(props) {\r\n    let divHeight = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    let strokeWidth\r\n    if(props.signal.highlight){\r\n        strokeWidth = \"2\" \r\n    }\r\n    else{\r\n        strokeWidth = \"1\" \r\n    }\r\n\r\n    let radius = 10;\r\n    if((plotWidth / (5 * props.fourierMultiples)) < 10){\r\n        radius = plotWidth / (5 * props.fourierMultiples)\r\n    }\r\n\r\n    return(\r\n        <circle\r\n            className ={styles.fourierCircles}\r\n            id = {\"circle_mag_\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*(plotWidth/ (props.fourierMultiples * 2))}\r\n            cy = {(props.signal.amplitude)*(plotHeight/8)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {radius}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth= {strokeWidth}\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesMagNeg(props) {\r\n    let divHeight = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    let strokeWidth\r\n    if(props.signal.highlight){\r\n        strokeWidth = \"2\" \r\n    }\r\n    else{\r\n        strokeWidth = \"1\" \r\n    }\r\n\r\n    let radius = 10;\r\n    if((plotWidth / (5 * props.fourierMultiples)) < 10){\r\n        radius = plotWidth / (5 * props.fourierMultiples)\r\n    }\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_mag_-\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*-(plotWidth/(props.fourierMultiples * 2))} // 8 is because our x-axis is divided into 8 sections \r\n            cy = {(props.signal.amplitude)*(plotHeight/8)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {radius}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth={strokeWidth}\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesPhasePos(props) {\r\n    let divHeight = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    let strokeWidth\r\n    if(props.signal.highlight){\r\n        strokeWidth = \"2\" \r\n    }\r\n    else{\r\n        strokeWidth = \"1\" \r\n    }\r\n\r\n    let radius = 10;\r\n    if((plotWidth / (5 * props.fourierMultiples)) < 10){\r\n        radius = plotWidth / (5 * props.fourierMultiples)\r\n    }\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_phase_+\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*(plotWidth/ (props.fourierMultiples * 2))} \r\n            cy = {(props.signal.phase)*(plotHeight/360)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {radius}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth={strokeWidth}\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesPhaseNeg(props) {\r\n    let divHeight = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    let strokeWidth\r\n    if(props.signal.highlight){\r\n        strokeWidth = \"2\" \r\n    }\r\n    else{\r\n        strokeWidth = \"1\" \r\n    }\r\n\r\n    let radius = 10;\r\n    if((plotWidth / (5 * props.fourierMultiples)) < 10){\r\n        radius = plotWidth / (5 * props.fourierMultiples)\r\n    }\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_phase_-\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*-(plotWidth/ (props.fourierMultiples * 2))} \r\n            cy = {-(props.signal.phase)*(plotHeight/360)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {radius}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth={strokeWidth}\r\n        />\r\n    );\r\n}\r\n\r\nclass FourierMagPlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    drawAxis(height, width, fourierMultiples){\r\n\r\n        let FourierMagSvg = d3.select(\"#svgFourierMagPlot\")\r\n\r\n        // if axis exists but we are redrawing\r\n        if(document.getElementById(\"x_axis_fourierMagPlot\") || document.getElementById(\"y_axis_fourierMagPlot\")){\r\n\r\n            // remove current axis\r\n            d3.select(\"#x_axis_fourierMagPlot\").remove();\r\n            d3.select(\"#y_axis_fourierMagPlot\").remove();\r\n        }\r\n\r\n            // Drawing new axis\r\n\r\n            // Create Axis for Frequency Plot\r\n            let xscale_freq = d3.scaleLinear()\r\n                    .domain([-fourierMultiples, fourierMultiples]) // This needs to be dynamic\r\n                    .range([ (1/10)*width, (9/10)*width ]);\r\n\r\n            let yscale_freq = d3.scaleLinear()\r\n                    .domain([4,0]) // This needs to be dynamic\r\n                    .range([ (1/10)*height, (5/10)*height ]);\r\n\r\n            // Add scales to axis\r\n            const xAxisTicks = xscale_freq.ticks()\r\n                                     .filter(tick => Number.isInteger(tick));\r\n\r\n            const yAxisTicks = yscale_freq.ticks()\r\n                                     .filter(tick => Number.isInteger(tick))                         \r\n \r\n            let x_axis_freq = d3.axisBottom(xscale_freq)\r\n             .tickValues(xAxisTicks)\r\n             .tickFormat(d3.format(\"d\"));\r\n\r\n            let y_axis_freq = d3.axisLeft(yscale_freq)\r\n             .tickValues(yAxisTicks)\r\n             .tickFormat(d3.format(\"d\"));\r\n            \r\n\r\n            FourierMagSvg.append('g')\r\n                         .attr(\"id\",\"x_axis_fourierMagPlot\")\r\n                         .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n                         .attr(\"pointer-events\", \"none\")\r\n                         .call(x_axis_freq)\r\n\r\n            FourierMagSvg.append('g')\r\n                         .attr(\"id\",\"y_axis_fourierMagPlot\")\r\n                         .attr(\"transform\",\"translate(\" + this.width/2 + \",0)\")\r\n                         .attr(\"pointer-events\", \"none\")\r\n                         .call(y_axis_freq); \r\n        \r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n\r\n        let FourierMagSvg = d3.select(\"#svgFourierMagPlot\")\r\n\r\n        FourierMagSvg.append(\"text\")\r\n                         .attr(\"text-anchor\", \"middle\")  \r\n                         .attr(\"x\",this.width/2)\r\n                         .attr(\"y\",this.height/20)\r\n                         .style(\"font-size\", \"16px\") \r\n                         .style(\"text-decoration\", \"underline\")  \r\n                         .text(\"Fourier Magnitude Plot\");\r\n\r\n        // First drawing of the axis (default view of 4 terms)\r\n        this.drawAxis(this.height, this.width, this.props.fourierMultiples);\r\n        \r\n    }\r\n\r\n    /*\r\n    componentDidUpdate(){\r\n        // Update dimensions when DOM is changed\r\n        this.height = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n    }\r\n    */\r\n\r\n    renderCirclePos(signal, fourierMultiples){\r\n        return(\r\n            <FourierCirclesMagPos\r\n                signal = {signal}\r\n                fourierMultiples = {fourierMultiples}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderCircleNeg(signal, fourierMultiples){\r\n        return(\r\n            <FourierCirclesMagNeg\r\n                signal = {signal}\r\n                fourierMultiples = {fourierMultiples}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n        const signals = this.props.signals;\r\n        const fourierMultiples = this.props.fourierMultiples;\r\n\r\n        this.drawAxis(this.height, this.width, fourierMultiples)\r\n\r\n           const circleList = [];\r\n          \r\n           for (let i=0; i < signals.length; i++){\r\n                // Render DC term\r\n                if(signals[i].id === 0){\r\n                    circleList.push(\r\n                        this.renderCirclePos(signals[i], fourierMultiples) \r\n                    )\r\n                }\r\n                // Render all other Fourier Terms\r\n                else{\r\n                    circleList.push(\r\n                        this.renderCirclePos(signals[i], fourierMultiples),\r\n                        this.renderCircleNeg(signals[i], fourierMultiples)\r\n                    )\r\n                }\r\n           }                    \r\n   \r\n           return( \r\n               <svg>\r\n                  {circleList}\r\n               </svg>\r\n           );\r\n       }\r\n}\r\n\r\nclass FourierPhasePlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    drawAxis(height, width, fourierMultiples){\r\n\r\n        let FourierMagSvg = d3.select(\"#svgFourierPhasePlot\")\r\n\r\n        // if axis exists but we are redrawing\r\n        if(document.getElementById(\"x_axis_fourierPhasePlot\") || document.getElementById(\"y_axis_fourierPhasePlot\")){\r\n\r\n            // remove current axis\r\n            d3.select(\"#x_axis_fourierPhasePlot\").remove();\r\n            d3.select(\"#y_axis_fourierPhasePlot\").remove();\r\n        }\r\n\r\n            // Drawing new axis\r\n\r\n            // Create Axis for Frequency Plot\r\n            let xscale_freq = d3.scaleLinear()\r\n                    .domain([-fourierMultiples, fourierMultiples]) // This needs to be dynamic\r\n                    .range([ (1/10)*width, (9/10)*width ]);\r\n\r\n            let yscale_freq = d3.scaleLinear()\r\n                    .domain([180,-180]) // This needs to be dynamic\r\n                    .range([ (1/10)*height, (9/10)*height ]);\r\n\r\n            // Add scales to axis\r\n            const xAxisTicks = xscale_freq.ticks()\r\n                                     .filter(tick => Number.isInteger(tick));\r\n\r\n            const yAxisTicks = yscale_freq.ticks()\r\n                                     .filter(tick => Number.isInteger(tick))                         \r\n \r\n            let x_axis_freq = d3.axisBottom(xscale_freq)\r\n             .tickValues(xAxisTicks)\r\n             .tickFormat(d3.format(\"d\"));\r\n\r\n            let y_axis_freq = d3.axisLeft(yscale_freq)\r\n             .tickValues(yAxisTicks)\r\n             .tickFormat(d3.format(\"d\"));\r\n            \r\n\r\n            FourierMagSvg.append('g')\r\n                         .attr(\"id\",\"x_axis_fourierPhasePlot\")\r\n                         .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n                         .attr(\"pointer-events\", \"none\")\r\n                         .call(x_axis_freq)\r\n\r\n            FourierMagSvg.append('g')\r\n                         .attr(\"id\",\"y_axis_fourierPhasePlot\")\r\n                         .attr(\"transform\",\"translate(\" + this.width/2 + \",0)\")\r\n                         .attr(\"pointer-events\", \"none\")\r\n                         .call(y_axis_freq); \r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        // Get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n\r\n        let FourierMagSvg = d3.select(\"#svgFourierPhasePlot\")\r\n\r\n        FourierMagSvg.append(\"text\")\r\n                         .attr(\"text-anchor\", \"middle\")  \r\n                         .attr(\"x\",this.width/2)\r\n                         .attr(\"y\",this.height/20)\r\n                         .style(\"font-size\", \"16px\") \r\n                         .style(\"text-decoration\", \"underline\")  \r\n                         .text(\"Fourier Phase Plot\");\r\n\r\n        // First drawing of the axis (default view of 4 terms)\r\n        this.drawAxis(this.height, this.width, this.props.fourierMultiples);\r\n        \r\n    }\r\n\r\n    renderCirclePos(signal, fourierMultiples){\r\n        return(\r\n            <FourierCirclesPhasePos\r\n                signal = {signal}\r\n                fourierMultiples = {fourierMultiples}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderCircleNeg(signal, fourierMultiples){\r\n        return(\r\n            <FourierCirclesPhaseNeg\r\n                signal = {signal}\r\n                fourierMultiples = {fourierMultiples}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n        const signals = this.props.signals;\r\n        const fourierMultiples = this.props.fourierMultiples;\r\n\r\n        this.drawAxis(this.height, this.width, fourierMultiples)\r\n    \r\n           const circleList = []; \r\n           \r\n           for (let i=0; i < this.props.signals.length; i++){\r\n\r\n                if(i ===0){\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i], fourierMultiples) \r\n                    )\r\n                }\r\n                else{\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i], fourierMultiples),\r\n                        this.renderCircleNeg(this.props.signals[i], fourierMultiples)\r\n                    )\r\n                }\r\n               \r\n           }\r\n   \r\n           return( \r\n               <svg>\r\n                  {circleList}\r\n               </svg>\r\n           );\r\n       }\r\n}\r\n\r\n\r\nclass SinePlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"sinePlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"sinePlotsID\").getBoundingClientRect().width;\r\n\r\n        const svgSinePlot = d3.select(\"#svgSinePlot\")\r\n\r\n         // Create scale\r\n        let xscale = d3.scaleLinear()\r\n                        .domain([0, 2]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n                        .domain([4,-4]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.height, (9/10)*this.height ]);\r\n\r\n        // Add scales to axis\r\n        let x_axis = d3.axisBottom()\r\n                        .scale(xscale);\r\n\r\n        let y_axis = d3.axisLeft()\r\n                        .scale(yscale);\r\n\r\n        svgSinePlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",this.width/2)\r\n                .attr(\"y\",this.height/20)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Cosine Plots\");\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\", \"translate(0,\" + this.height/2 + \")\")\r\n                .attr(\"pointer-events\", \"none\")\r\n                .call(x_axis);\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .attr(\"pointer-events\", \"none\")\r\n                .call(y_axis)\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n        const signals = this.props.signals;\r\n    \r\n        // \"Overlay all sine plots into one graph\" version\r\n        for(let i = 0; i < signals.length; i++){\r\n\r\n            let lineGenerator = d3.line().curve(d3.curveNatural);\r\n  \r\n            let pathData = lineGenerator(signals[i].values);\r\n    \r\n            //The svg line Path we draw\r\n    \r\n            // If exists, update\r\n            if(document.getElementById(signals[i].pathID)){\r\n\r\n                let signal = d3.select(\"#\"+signals[i].pathID);\r\n\r\n                let strokeWidth\r\n                let color\r\n                if(signals[i].highlight){\r\n                    strokeWidth = 4;\r\n                    signal.moveToFront();\r\n                    color = 'blue'\r\n                }\r\n                else{\r\n                    strokeWidth = 2;\r\n                    signal.moveToBack();\r\n                    color = signals[i].colour\r\n                }\r\n                \r\n                signal.attr(\"d\", pathData)\r\n                      .attr(\"stroke\", color)\r\n                      .attr(\"stroke-width\", strokeWidth)      \r\n              \r\n            }\r\n            \r\n            // Draws path if it doesn't exist\r\n            if(!document.getElementById(signals[i].pathID)){\r\n                \r\n                let strokeWidth\r\n                if(signals[i].highlight){\r\n                    strokeWidth = 4;\r\n                }\r\n                else{\r\n                    strokeWidth = 2;\r\n                }\r\n\r\n                d3.select(\"#svgSinePlot\").append(\"path\")\r\n                    .attr(\"id\",signals[i].pathID)\r\n                    .attr(\"d\", pathData)\r\n                    .attr(\"transform\",\"translate(\" + (1/10)*this.width + \")\")\r\n                    .attr(\"stroke\", signals[i].colour)\r\n                    .attr(\"stroke-width\", strokeWidth)\r\n                    .attr(\"fill\", \"none\")\r\n          }\r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass SumPlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n\r\n        // Create scale\r\n        let xscale = d3.scaleLinear()\r\n        .domain([0, 2]) // This needs to be dynamic\r\n        .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n        .domain([4,-4]) // This needs to be dynamic\r\n        .range([(1/10)*this.height, (9/10)*this.height ]);\r\n\r\n        // Add scales to axis\r\n        let x_axis = d3.axisBottom()\r\n        .scale(xscale);\r\n\r\n        let y_axis = d3.axisLeft()\r\n        .scale(yscale);\r\n\r\n        const svgSumPlot = d3.select(\"#svgSumPlot\")\r\n\r\n                svgSumPlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",this.width/2)\r\n                .attr(\"y\",this.height/20)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sum of Signals Plot\");\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\", \"translate(0,\" + this.height/2 + \")\")\r\n                .attr(\"pointer-events\", \"none\")\r\n                .call(x_axis);\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .attr(\"pointer-events\", \"none\")\r\n                .call(y_axis)\r\n    }\r\n\r\n    render(){\r\n\r\n        let sumSignals = []; \r\n        let plotWidth = 0.8 * this.width;\r\n        // console.log(this.height);\r\n        // console.log(this.width);\r\n\r\n        // This will break if we change plotWidth elsewhere \r\n        for(let k = 0; k < plotWidth; k++){\r\n            sumSignals.push([0,0]);\r\n        }\r\n\r\n        // Looping through all the signals\r\n        for (let i=0; i < this.props.signals.length; i++){\r\n\r\n            // Looping through the signal values\r\n            for(let j=0; j < this.props.signals[i].values.length; j++){\r\n\r\n                //sumSignals[j] = this.props.signals[i].values[j];\r\n                sumSignals[j][0] = this.props.signals[i].values[j][0];\r\n                sumSignals[j][1] += this.props.signals[i].values[j][1];\r\n            }\r\n            \r\n        }\r\n\r\n        // Should scale this to the svg dimenesions rather than hardcoding it with svgContainerHeight\r\n        for (let n =0; n < sumSignals.length; n++){\r\n            sumSignals[n][1] = sumSignals[n][1] - (this.props.signals.length-1)*(this.height/2)\r\n        }\r\n\r\n        let lineGenerator = d3.line()\r\n          .curve(d3.curveNatural);\r\n\r\n        let pathData = lineGenerator(sumSignals);\r\n\r\n        //The svg line Path we draw\r\n\r\n        // If exists, update\r\n        if(document.getElementById(\"path_Sum\")){\r\n            d3.select(\"#\".concat(\"path_Sum\")).attr(\"d\", pathData)  \r\n               \r\n        }\r\n        \r\n        // Draws path if it doesn't exist\r\n        if(!document.getElementById(\"path_Sum\")){\r\n             d3.select(\"#svgSumPlot\").append(\"path\")\r\n                .attr(\"id\",\"path_Sum\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \")\")\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class FourierCoefficients extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            signals: [\r\n                /* Example signal object \r\n                {\r\n                    id: 0,\r\n                    amplitude: 1,\r\n                    frequency: 1,\r\n                    values: this.generateSignal(1,1),\r\n                    dragging: false,    \r\n                },\r\n                */\r\n            ],\r\n            demoSignal: 'select',\r\n            plotViewState: false, // false is default view, true is full view\r\n            plotView: 'Default',\r\n            fourierMultiples: 4, // 4 is the default view, -4 to 4 multiples of fundamental frequency \r\n        };\r\n        // This binding is necessary to make `this.` work in the callback   \r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseUp = this.handleMouseUp.bind(this);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n        this.handleMouseOverFourier = this.handleMouseOverFourier.bind(this);\r\n        this.handleMouseMoveFourierMag = this.handleMouseMoveFourierMag.bind(this);\r\n        this.handleMouseMoveFourierPhase = this.handleMouseMoveFourierPhase.bind(this);\r\n        this.handleMouseOverSignalControls = this.handleMouseOverSignalControls.bind(this);\r\n        this.handleDemoSignal = this.handleDemoSignal.bind(this);\r\n        this.redrawSignal = this.redrawSignal.bind(this);\r\n    }\r\n    \r\n    addSignal(amplitude, phase){\r\n        let signals = this.state.signals;\r\n\r\n        // Colour intensity goes from least intense: rgb(192,192,192) (Silver) to most intense: rgb(0,0,0) (Black)\r\n        const intensity =  (192 - 48*amplitude);\r\n\r\n        // Loop through the current state's signals array\r\n        for(let i = 0; i < signals.length + 1; i++){\r\n\r\n            // Add new signal to end of array if we reach end of array\r\n            if(i === signals.length){\r\n                signals = signals.concat([{       // Just concatenating array of JSON\r\n                    id: signals.length,\r\n                    amplitude: amplitude,                // Should be user input\r\n                    frequency: signals.length,   // Should be user input\r\n                    phase: phase,\r\n                    values: this.generateSignal(amplitude,signals.length,phase),\r\n                    pathID: 'path_'.concat(i.toString(10)), \r\n                    draggingMag: false,    \r\n                    draggingPhasePos: false,    \r\n                    draggingPhaseNeg: false,  \r\n                    colour: rgb(intensity,intensity,intensity),\r\n                    highlight: false,\r\n                },]);\r\n                // console.log(signals)\r\n                break;\r\n            }\r\n\r\n            // If there's a missing ID, insert it to appropriate index\r\n            // e.g. id array: [0, 1, 3]. Therefore missing id 2\r\n            if(i !== signals[i].id){\r\n                let newSignal = {       \r\n                    id: i,\r\n                    amplitude: amplitude,                // Should be user input\r\n                    frequency: i,   // Should be user input\r\n                    phase: phase,\r\n                    values: this.generateSignal(amplitude,i,phase),\r\n                    pathID: 'path_'.concat(i.toString(10)), \r\n                    draggingMag: false,    \r\n                    draggingPhasePos: false,    \r\n                    draggingPhaseNeg: false,  \r\n                    colour: rgb(intensity,intensity,intensity),\r\n                    highlight: false,\r\n                }\r\n\r\n                signals.splice(i, 0, newSignal);\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Once this.setState has been called, it'll call render() to render straight away\r\n        this.setState({\r\n            signals: signals,\r\n        });        \r\n    }\r\n\r\n    removeSignal(signalID){\r\n        // Need to find signal id from the array and delete, then re-update id's\r\n        const signals = this.state.signals;\r\n\r\n        console.log(\"Hi from removeSignal\");    \r\n        console.log(signalID)\r\n        console.log(\"Before: \", signals);\r\n\r\n        let index;\r\n        for(index = 0; index < signals.length; index++){\r\n            if(signals[index].id === signalID){\r\n                break\r\n            }\r\n        }\r\n        console.log(index)\r\n        \r\n        // Find the pathID and delete from DOM\r\n        d3.select(\"#\"+signals[index].pathID).remove();\r\n        \r\n        // Find the signal in the signals array and delete\r\n        signals.splice(index,1)\r\n        \r\n        console.log(\"After:\", signals);\r\n\r\n        this.setState({\r\n            signals: signals,\r\n        });\r\n        console.log(this.state.signals);\r\n\r\n    \r\n    }\r\n    \r\n    animateSignal(signalID){\r\n\r\n        const signals = this.state.signals;\r\n        console.log(signalID)    \r\n\r\n        // finding the signal\r\n        let index;\r\n        for(index = 0; index < signals.length; index++){\r\n            if(signals[index].id === signalID){\r\n                break\r\n            }\r\n        }\r\n\r\n        window.requestAnimationFrame(this.redrawSignal.bind(this, signals, index));\r\n        \r\n    }\r\n\r\n    redrawSignal(signals, index){\r\n        /* Remove the signal image */\r\n\r\n        // Find the pathID and delete from DOM\r\n        d3.select(\"#\"+signals[index].pathID).remove();\r\n        \r\n        signals[index].phase += 1; \r\n\r\n        this.setState({\r\n            signals: signals,\r\n        });\r\n    }\r\n\r\n\r\n    generateSignal(amplitude, frequency, phase){\r\n        // Generating path data\r\n        let points = [];\r\n        // This assumes that sumPlot and sinePlots have the same dimensions, since generateSignal() is called from those plots\r\n        const divHeight = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        const plotWidth = 0.8 * document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n        // console.log(\"Plot Width\",plotWidth)\r\n        // console.log(\"Div Height\", divHeight)\r\n        let scale = -divHeight/10;\r\n        let x_offset = 0;\r\n        let y_offset = 0;\r\n\r\n        // let Fs = 80;\r\n        let Ts = Math.PI / (plotWidth/4);\r\n\r\n        /* Calculation Reference\r\n        // Assuming the plot is 800x800\r\n        // 1 period = 1 second\r\n        // 1 period = 400 pixels => Ts = 400 samples per second\r\n        // 1 Hz = 2pi radians\r\n\r\n        // Sampling frequency = samples/second\r\n        // 1 sample per 1/400 second (Ts = 1/400)\r\n        // Fs = 2pi * (1/400)\r\n        // Fs = pi / 200\r\n\r\n        // Frequency is in Hz\r\n        // This is bascially an inverse FFT \r\n        // i is basically our t (1 unit of time)\r\n        */\r\n\r\n        // For some reason, we need negative sign in front of phase to get signal direction correct?\r\n        for(let i = x_offset; i< plotWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude*Math.cos(Ts*frequency*i + (-phase * (Math.PI / 180) )) + (divHeight/2 + y_offset)];\r\n        }\r\n        // console.log(\"Plot Length\", points.length)\r\n\r\n        return points;\r\n    }\r\n\r\n    generateDC(amplitude){\r\n        let points = [];\r\n        const divHeight = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        const plotWidth = 0.8 * document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n        let scale = - divHeight/10;\r\n\r\n        let x_offset = 0;\r\n        let y_offset = 0;\r\n\r\n        for(let i = x_offset; i< plotWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude + (divHeight/2 + y_offset)];\r\n        }\r\n \r\n        return points\r\n    }\r\n\r\n    updateDials(){\r\n        const signals = this.state.signals;\r\n\r\n        for(let i = 0; i< signals.length; i++){\r\n            document.getElementById(\"signal\" + signals[i].id + \"_AmpText\").value = signals[i].amplitude;\r\n            document.getElementById(\"signal\" + signals[i].id + \"_FreqText\").value = signals[i].frequency;\r\n        }\r\n    }\r\n\r\n    handleChange(event){\r\n\r\n        console.log(event)\r\n\r\n        const signals = this.state.signals;\r\n        const inputType = event.target.getAttribute('input_type');\r\n        const signalID = event.target.getAttribute('signal_id'); // Signal ID Number\r\n        let value = parseFloat(event.target.value);   \r\n\r\n        // Text Form can currently exceed the maximum limit of 10, should limit?\r\n\r\n        if((inputType === \"AmpDial\") || (inputType === \"AmpText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                // DC Case\r\n                if(signalID === 0){\r\n                    signals[signalID].amplitude = value; \r\n                    signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n                    document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n\r\n                    const intensity =  (192 - 48*value);\r\n                    signals[signalID].colour = rgb(intensity,intensity,intensity);\r\n                }\r\n                // All Other cases\r\n                else{\r\n                    signals[signalID].amplitude = value;                 \r\n                    signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                    document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n\r\n                    const intensity =  (192 - 48*value);\r\n                    signals[signalID].colour = rgb(intensity,intensity,intensity);\r\n                }     \r\n            }\r\n        }\r\n        else if ((inputType === \"PhaseDial\") || (inputType === \"PhaseText\")){\r\n            console.log(\"HELLO\")\r\n            console.log(signals[signalID].amplitude)\r\n            console.log(signals[signalID].phase)\r\n\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                // DC Case\r\n                if(signalID === 0){\r\n                    signals[signalID].phase = value; \r\n                    signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n                    document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n                }\r\n                 // All Other cases\r\n                else{\r\n                    signals[signalID].phase = value; \r\n                    signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                    document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n                }\r\n            }\r\n        }     \r\n\r\n        this.setState({\r\n                signals: signals,   \r\n            }   \r\n        );\r\n\r\n    }\r\n    \r\n    handleMouseDown(e){\r\n        console.log(\"clicked\")\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation()\r\n\r\n        const elementID = e.target.getAttribute('id');\r\n        \r\n        // sanity check\r\n        if(elementID !== null){\r\n\r\n            const condition = elementID.includes(\"circle_\");\r\n\r\n            if(condition){\r\n\r\n                console.log('circle clicked')\r\n\r\n                const signals = this.state.signals;\r\n                const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n                const circleID = e.target.getAttribute('id'); // Circle ID \r\n                \r\n                // Finding signal array's index from signal id\r\n                let index;\r\n                for(index = 0; index < signals.length; index++){\r\n                    if(signals[index].id === signalID){\r\n                        \r\n                        break\r\n                    }\r\n                }\r\n                \r\n                if(circleID.includes(\"circle_mag\")){\r\n                    signals[index].draggingMag = true;\r\n                } \r\n                if(circleID.includes(\"circle_phase_+\")){\r\n                    signals[index].draggingPhasePos = true;\r\n                } \r\n                if(circleID.includes(\"circle_phase_-\")){\r\n                    signals[index].draggingPhaseNeg = true;\r\n                } \r\n\r\n                this.setState({\r\n                    signals: signals,   \r\n                    }\r\n                );   \r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseUp(e){\r\n        console.log(\"click released\")\r\n\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n\r\n        const signals = this.state.signals;\r\n\r\n        const elementID = e.target.getAttribute('id');\r\n\r\n        // sanity check\r\n        if(elementID !== null){\r\n\r\n            // set all signals dragging to false\r\n            for(let n = 0; n < signals.length; n++){\r\n                signals[n].draggingMag = false;\r\n                signals[n].draggingPhasePos = false;\r\n                signals[n].draggingPhaseNeg = false;\r\n            }\r\n                \r\n                this.setState({\r\n                    signals: signals,   \r\n                    }\r\n                );\r\n\r\n                console.log(\"circle click released\")\r\n            }\r\n    }\r\n\r\n    // Base Mouse move function. Used in Frequency Domain. Not currently in use in this .js file\r\n    handleMouseMove(e) {\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n        \r\n        let index;\r\n        for(index = 0; index < signals.length; index++){\r\n            if(signals[index].id === signalID){\r\n                break\r\n            }\r\n        }\r\n\r\n        //If we are dragging\r\n          if (signals[index].dragging) {\r\n              e.preventDefault();\r\n\r\n              console.log(e)\r\n              console.log(e.target)\r\n              console.log(\"clientX:\",e.clientX)\r\n              console.log(\"clientY:\",e.clientY)\r\n              // console.log(e.target.parentNode.parentNode)\r\n            let  rect = e.target.parentNode.parentNode.getBoundingClientRect();  \r\n\r\n            console.log(rect.left);\r\n            console.log(rect.top);\r\n\r\n\r\n            // Maybe should seperate coordinates and freq/amp values\r\n             signals[index].frequency = (e.clientX - rect.left - 400) / 100;\r\n             signals[index].amplitude = - (e.clientY - rect.top - 400) / 100;\r\n             signals[index].values = this.generateSignal(signals[index].amplitude, signals[index].frequency, signals[index].phase);\r\n\r\n            // We should set position limits\r\n\r\n            console.log(signals[index].frequency)\r\n            console.log(signals[index].amplitude)\r\n\r\n            console.log(this)\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n                }\r\n            );  \r\n        }\r\n    }\r\n\r\n    handleMouseMoveFourierMag(e) {\r\n\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n        \r\n        const elementID = e.target.getAttribute('id');\r\n\r\n        // sanity check\r\n        if(elementID !== null){\r\n\r\n                const signals = this.state.signals;\r\n                \r\n                // Grabbing signal id number doesn't work if event is outside of the div element \r\n                // const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n\r\n                // Find the signal that is dragging \r\n                let index;\r\n                let dragging = false;\r\n                for(let n = 0; n < signals.length; n++){\r\n                    if(signals[n].draggingMag === true){\r\n                        \r\n                        dragging = true;\r\n                        index = n;\r\n                    }\r\n                }\r\n\r\n                console.log(index);\r\n                \r\n                //If we are dragging\r\n                if (dragging) {\r\n                    // e.preventDefault();\r\n\r\n                    console.log(\"im dragging\")\r\n                    console.log(signals[index].draggingMag);\r\n                    // console.log(e.target)\r\n                    let  rect = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect();  \r\n\r\n                    let divHeight = rect.height;\r\n                    let divWidth = rect.width;\r\n                    let plotHeight = 0.8*divHeight;\r\n                    let plotWidth = 0.8*divWidth;\r\n\r\n                    // Divide by 8: max axis size (-4 to 4)\r\n                    let amplitude = - (e.clientY - rect.top - divHeight/2) / (plotHeight/8);\r\n                    if(amplitude > 4){\r\n                        amplitude = 4;\r\n                    }\r\n                    if(amplitude < 0){\r\n                        amplitude = 0;\r\n                    }\r\n\r\n                    // Maybe should seperate coordinates and freq/amp values\r\n                    signals[index].frequency = signals[index].id;\r\n                    signals[index].amplitude = amplitude;    \r\n                    signals[index].values = this.generateSignal(signals[index].amplitude, signals[index].frequency, signals[index].phase);\r\n                    \r\n                    const intensity =  (192 - 48*amplitude)\r\n                    signals[index].colour = rgb(intensity,intensity,intensity);\r\n\r\n                    // Checking if signal is the DC value\r\n                    if(index === 0){\r\n                        signals[index].values = this.generateDC(signals[index].amplitude);\r\n                    }\r\n\r\n                    this.setState({\r\n                        signals: signals,   \r\n                        }\r\n                    );  \r\n                }\r\n\r\n        }\r\n\r\n        \r\n    }\r\n    \r\n    handleMouseMoveFourierPhase(e) {\r\n\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n\r\n        const signals = this.state.signals;\r\n\r\n        const elementID = e.target.getAttribute('id');\r\n\r\n        // Sanity check\r\n        if(elementID !== null){\r\n\r\n            // Find the signal that is dragging \r\n\r\n            // Grabbing signal id number doesn't work if event is outside of the div element \r\n            // const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n\r\n            let index;\r\n            let draggingPhasePos = false;\r\n            let draggingPhaseNeg = false;\r\n            for(let n = 0; n < signals.length; n++){\r\n                if(signals[n].draggingPhasePos === true ){                        \r\n                    draggingPhasePos = true;\r\n                    index = n;\r\n                }\r\n                if(signals[n].draggingPhaseNeg === true){                      \r\n                    draggingPhaseNeg = true;\r\n                    index = n;\r\n                }\r\n            }\r\n\r\n            //If we are dragging\r\n            if(draggingPhasePos || draggingPhaseNeg){\r\n\r\n                let rect = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect();  \r\n\r\n                let divHeight = rect.height;\r\n                let divWidth = rect.width;\r\n                let plotHeight = 0.8*divHeight;\r\n                let plotWidth = 0.8*divWidth;\r\n\r\n                // Maybe should seperate coordinates and freq/amp values\r\n\r\n                let circleID;\r\n                console.log(index)\r\n                if(draggingPhasePos){\r\n                    circleID = \"circle_phase_+\".concat(index.toString(10)); \r\n                }\r\n                if(draggingPhaseNeg){\r\n                    circleID = \"circle_phase_-\".concat(index.toString(10)); \r\n                }\r\n                \r\n                console.log(circleID)\r\n                const circleCX = parseInt(document.getElementById(circleID).getAttribute(\"cx\"))\r\n                console.log(circleCX) \r\n\r\n                // Positive Circle\r\n                if(circleCX >= 0){\r\n                    let phase = parseInt( - (e.clientY - rect.top - divHeight/2) / (plotHeight/360));\r\n                    if(phase > 180){\r\n                        phase = 180;\r\n                    }\r\n                    if(phase < -180){\r\n                        phase = -180;\r\n                    }\r\n                    signals[index].phase = phase;\r\n                } \r\n\r\n                // Negative Circle\r\n                else if(circleCX < 0){\r\n                    let phase = parseInt( (e.clientY - rect.top - divHeight/2) / (plotHeight/360));\r\n                    if(phase > 180){\r\n                        phase = 180;\r\n                    }\r\n                    if(phase < -180){\r\n                        phase = -180;\r\n                    }\r\n                    signals[index].phase = phase;\r\n                } \r\n\r\n                console.log(signals[index].phase)\r\n                signals[index].frequency = signals[index].id; \r\n                signals[index].values = this.generateSignal(signals[index].amplitude, signals[index].frequency, signals[index].phase);\r\n\r\n                // Checking if signal is the DC value\r\n                if(index === 0){\r\n                    signals[index].values = this.generateDC(signals[index].amplitude);\r\n                }\r\n\r\n                this.setState({\r\n                    signals: signals,   \r\n                    }\r\n                );  \r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseOverFourier(e){\r\n        // console.log(e);\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n        \r\n        const elementID = e.target.getAttribute('id');\r\n        console.log(elementID);\r\n        \r\n        // sanity check\r\n        if(elementID !== null){\r\n\r\n            const condition = elementID.includes(\"circle_\");\r\n            const signals = this.state.signals;\r\n\r\n            // if a mouseover was over a circle \r\n            if(condition){\r\n\r\n                console.log('circle mouse over!')\r\n                \r\n                const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n                const circleID = e.target.getAttribute('id'); // Circle ID \r\n\r\n                // Finding signal array's index from signal id\r\n                let index;\r\n                for(index = 0; index < signals.length; index++){\r\n                    if(signals[index].id === signalID){\r\n                         \r\n                        break\r\n                    }\r\n                }\r\n                signals[index].highlight = true;\r\n\r\n                // Highlighting signal control panel\r\n                let signalControlID = 'signal-controls-'.concat(signalID.toString())\r\n                console.log(signalControlID)\r\n                document.getElementById(signalControlID).style.opacity = 1;\r\n            }\r\n\r\n            // if the mouseover is not over a circle\r\n            else {\r\n                // Set all highlight to false\r\n\r\n                let signalControlID\r\n                for(let n = 0; n < signals.length; n++){\r\n                    signals[n].highlight = false;\r\n\r\n                    signalControlID = 'signal-controls-'.concat(n.toString())\r\n\r\n                    // Check if signal dials exists\r\n                    if(document.getElementById(signalControlID)){\r\n                        // Un-highlighting signal control panel\r\n                        document.getElementById(signalControlID).style.opacity = 0.6;\r\n                    }\r\n                }  \r\n            }\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n            });\r\n        }\r\n    }\r\n\r\n    handleMouseOverSignalControls(e){\r\n        const elementID = e.target.getAttribute('id');\r\n        console.log(elementID);\r\n\r\n        /*\r\n        // sanity check\r\n        if(elementID !== null){\r\n\r\n            const condition = elementID.includes(\"signal-controls-\");\r\n            const signals = this.state.signals;\r\n\r\n            // if a mouseover was over a signal control panel \r\n            if(condition){\r\n\r\n                console.log('signal mouse over!')\r\n                \r\n                const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n\r\n                // Finding signal array's index from signal id\r\n                let index;\r\n                for(index = 0; index < signals.length; index++){\r\n                    if(signals[index].id === signalID){\r\n                         \r\n                        break\r\n                    }\r\n                }\r\n                signals[index].highlight = true;\r\n\r\n                let signalControlID = 'signal-controls-'.concat(signalID.toString())\r\n                console.log(signalControlID)\r\n                document.getElementById(signalControlID).style.opacity = 1;\r\n            }\r\n\r\n            // if the mouseover is not over a circle\r\n            else {\r\n                // Set all highlight to false\r\n\r\n                let signalControlID\r\n                for(let n = 0; n < signals.length; n++){\r\n                    signals[n].highlight = false;\r\n\r\n                    signalControlID = 'signal-controls-'.concat(n.toString())\r\n                    // Check if signal dials exists\r\n                    if(document.getElementById(signalControlID)){\r\n                        document.getElementById(signalControlID).style.opacity = 0.6;\r\n                    }\r\n                }  \r\n            }\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n            });\r\n        }\r\n        */\r\n    }\r\n\r\n    toggleView(e){\r\n\r\n        console.log(e)\r\n        console.log(this.state.plotViewState)\r\n        console.log(this.state.plotView)\r\n\r\n        // Toggle the state\r\n        const plotViewState = !this.state.plotViewState; // False: Default. True: Full.\r\n        console.log(plotViewState)\r\n\r\n        // Default View\r\n        if(!plotViewState){\r\n            \r\n            this.setState({\r\n                fourierMultiples: 4,\r\n                plotViewState: plotViewState,\r\n                plotView: 'Default',\r\n            });\r\n        }\r\n\r\n        // Full View\r\n        else{\r\n            \r\n\r\n            const fourierMultiples = this.state.signals.length - 1; // -1 because of DC term\r\n\r\n            // Only change to full view if there are more than 4 Fourier Terms\r\n            if(fourierMultiples > 4){\r\n                this.setState({\r\n                    fourierMultiples: fourierMultiples,\r\n                    plotViewState: plotViewState,\r\n                    plotView: 'Full',\r\n                });\r\n            }\r\n            else{\r\n                this.setState({\r\n                    fourierMultiples: 4,\r\n                    plotViewState: plotViewState,\r\n                    plotView: 'Full',\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    emptyPlots(){\r\n        let signals = this.state.signals;\r\n\r\n        for(let i = 0; i< signals.length; i++){                 \r\n\r\n            d3.select(\"#\"+signals[i].pathID).remove();\r\n        }  \r\n\r\n        return signals = [];\r\n    }\r\n\r\n    handleDemoSignal(e){\r\n\r\n        let signals = this.state.signals;\r\n        const demoSignal = e.target.value;\r\n\r\n\r\n        if(demoSignal === 'empty'){\r\n            signals = this.emptyPlots();\r\n        }\r\n\r\n        // Note: If you make multiple setState() calls, only the last call will run (the prior ones won't run)\r\n        // Hence why here, we instead of repeatedly calling addSignal(), we explicitly generate the signals array\r\n        // setState() is asynchronous and are batched for performance gains. \r\n        \r\n        if(demoSignal === 'sine'){\r\n \r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            let amplitude = 0;\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,\r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                highlight: false,\r\n            },])\r\n\r\n            // Generating other sine waves\r\n            amplitude = 1;\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,                \r\n                frequency: signals.length,   \r\n                phase: 0,\r\n                values: this.generateSignal(amplitude,signals.length,0),\r\n                pathID: 'path_1', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false, \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                highlight: false,\r\n            },])\r\n        }\r\n\r\n\r\n        if(demoSignal === 'even'){\r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            let amplitude = 0\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,    \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                highlight: false,\r\n            },])\r\n\r\n            // Generating other sine waves\r\n            for(let i = 0; i < 4; i++){\r\n                // Odd\r\n                if((i % 2) !== 0 ){\r\n                    amplitude = 1\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(amplitude,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,     \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                    },])\r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    amplitude = 0\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(amplitude,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,  \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if(demoSignal === 'odd'){\r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            let amplitude = 0\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,    \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                highlight: false,\r\n            },])\r\n\r\n            // Generating other sine waves\r\n            for(let i = 0; i < 4; i++){\r\n                // Odd\r\n                if((i % 2) !== 0 ){\r\n                    amplitude = 0\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(amplitude,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,   \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                    },])\r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    amplitude = 1\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(amplitude,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,   \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if(demoSignal === 'triangle'){\r\n            signals = this.emptyPlots();\r\n\r\n            let amplitude = 0\r\n            // Generating DC signal\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0',  \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,     \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                highlight: false,\r\n            },])\r\n\r\n            // Generating other sine waves\r\n            let alternate = true;\r\n            for(let i = 1; i < 20; i++){\r\n                // Odd\r\n                if((i % 2) !== 0 ){\r\n                    amplitude = (8/Math.pow(Math.PI,2))*(1/Math.pow(i,2));\r\n\r\n                    // Non-phase shifted harmonic\r\n                    if(alternate){\r\n                        signals = signals.concat([{       \r\n                            id: signals.length,\r\n                            amplitude: amplitude,                \r\n                            frequency: signals.length,   \r\n                            phase: 90,\r\n                            values: this.generateSignal(amplitude,signals.length,90),\r\n                            pathID: 'path_'.concat(i.toString(10)), \r\n                            draggingMag: false,    \r\n                            draggingPhasePos: false, \r\n                            draggingPhaseNeg: false,   \r\n                            colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                            highlight: false,\r\n                        },])\r\n                        alternate = !alternate; \r\n                    }\r\n                    // Phase shifted harmonic\r\n                    else if(!alternate){\r\n                        signals = signals.concat([{       \r\n                            id: signals.length,\r\n                            amplitude: amplitude,                \r\n                            frequency: signals.length,   \r\n                            phase: -90,\r\n                            values: this.generateSignal(amplitude,signals.length, -90),\r\n                            pathID: 'path_'.concat(i.toString(10)), \r\n                            draggingMag: false,    \r\n                            draggingPhasePos: false, \r\n                            draggingPhaseNeg: false,    \r\n                            colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                            highlight: false,\r\n                        },])\r\n                        alternate = !alternate; \r\n                    }    \r\n                    \r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    amplitude = 0;\r\n                    \r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: 0,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(0,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if(demoSignal === 'square'){\r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            let amplitude = 0\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,  \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                highlight: false,\r\n            },])\r\n\r\n            // Generating other sine waves\r\n\r\n            for(let i = 1; i < 25; i++){\r\n                // Odd\r\n                if((i % 2) !== 0 ){\r\n                    \r\n                    amplitude = (4/Math.PI)*(1/i);\r\n\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 90,\r\n                        values: this.generateSignal(amplitude,signals.length,90),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,     \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                    },])    \r\n\r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n\r\n                    amplitude = 0\r\n\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 90,\r\n                        values: this.generateSignal(amplitude,signals.length,90),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if(demoSignal === 'sawtooth'){\r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            let amplitude = 0\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,     \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                highlight: false,\r\n            },])\r\n\r\n            // Generating other sine waves\r\n\r\n            for(let i = 1; i < 25; i++){\r\n\r\n                amplitude = (4/Math.PI)*(1/i);\r\n\r\n                // Odd\r\n                if((i % 2) !== 0 ){    \r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: -90,\r\n                        values: this.generateSignal(amplitude,signals.length,-90),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                    },])    \r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 90,\r\n                        values: this.generateSignal(amplitude,signals.length,90),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            signals: signals,\r\n            demoSignal: demoSignal,\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n    const current = this.state.signals;\r\n    const fourierMultiples = this.state.fourierMultiples;\r\n\r\n    return (\r\n            <div className = {styles.container}>\r\n\r\n                <div className = {styles.timePlots} id = \"timePlotsID\">\r\n                    <div className = {styles.sinePlots} id =\"sinePlotsID\">\r\n                        <svg id=\"svgSinePlot\" width=\"40vw\" height=\"45vh\" \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black'\r\n                                }}> \r\n                            <SinePlot\r\n                                signals = {current}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                    <div className = {styles.sumPlots} id =\"sumPlotsID\">\r\n                        <svg id=\"svgSumPlot\" width=\"40vw\" height=\"45vh\" \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black'\r\n                                }}> \r\n                            <SumPlot\r\n                                signals = {current}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className = {styles.otherPlots}>\r\n\r\n                    <div className = {styles.fourierMagPlots} id =\"fourierMagPlotsID\">\r\n\r\n                        <svg id=\"svgFourierMagPlot\" width=\"40vw\" height=\"45vh\"  \r\n                        onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                        onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                        onMouseMove = {(event) => this.handleMouseMoveFourierMag(event)}\r\n                        onMouseOver = {(event) => this.handleMouseOverFourier(event)}\r\n\r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black',\r\n                                \r\n                                }}> \r\n                            \r\n                        \r\n                            <FourierMagPlot\r\n                                signals = {current}\r\n                                fourierMultiples = {fourierMultiples}\r\n                            />\r\n                \r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className = {styles.fourierPhasePlots} id =\"fourierPhasePlotsID\">\r\n                        <svg id=\"svgFourierPhasePlot\" width=\"40vw\" height=\"45vh\"\r\n                            onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                            onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                            onMouseMove = {(event) => this.handleMouseMoveFourierPhase(event)}  \r\n                            onMouseOver = {(event) => this.handleMouseOverFourier(event)}\r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black',\r\n                                \r\n                                }}> \r\n                        \r\n                            <FourierPhasePlot\r\n                                signals = {current}\r\n                                fourierMultiples = {fourierMultiples}\r\n                            />\r\n                        </svg>\r\n                    </div>         \r\n                    \r\n                </div>\r\n                <div className = {styles.controls} onMouseOver = {(event) => this.handleMouseOverSignalControls(event)}>\r\n        \r\n                        <Controls\r\n                            signals = {current}\r\n                            plotView = {this.state.plotView}\r\n                            demoSignal = {this.state.demoSignal}\r\n                            onChange = {(event) => this.handleChange(event)}\r\n                            onAdd = {(amplitude, phase) => this.addSignal(amplitude, phase)}\r\n                            onRemove = {(signalID) => this.removeSignal(signalID)}\r\n                            onAnimate = {(signalID) => this.animateSignal(signalID)}\r\n                            onDemoSignal = {(event) => this.handleDemoSignal(event)}\r\n                            onToggleView = {(event) => this.toggleView(event)}\r\n                        />\r\n                    \r\n                </div>\r\n            </div>\r\n      );\r\n    }\r\n  }","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styles from './FrequencyDomain.module.css';\r\nimport * as d3 from \"d3\";\r\n\r\nconst svgContainerWidth = 800;\r\nconst svgContainerHeight = 800;\r\n\r\nfunction Dials(props) {\r\n    return(\r\n        <div className={styles.signal_container}>\r\n            <div className={styles.signal_info}>\r\n                <div>ID: {props.signal.id}</div>\r\n                <button id = \"remove-signal\" onClick={(i) => props.onRemove(props.signal.id)}> Remove Signal </button>\r\n            </div>\r\n            <div className={styles.signal_props}>\r\n                <div>Amplitude: {props.signal.amplitude}</div>\r\n                <div>Frequency: {props.signal.frequency}</div>\r\n                <div>Phase: {props.signal.phase}</div>\r\n            </div>\r\n            <div className = {styles.signal_dials}>\r\n                <div>\r\n                    <input \r\n                    id = {\"signal\" + props.signal.id + \"_AmpDial\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpDial\"}\r\n                    type =\"range\" \r\n                    min={-5} \r\n                    max ={5} \r\n                    value = {props.signal.amplitude} \r\n                    step={0.1}\r\n                    onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                    id = {\"signal\" + props.signal.id + \"_AmpText\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpText\"}\r\n                    type = \"number\"  \r\n                    min = {-5}\r\n                    max = {5}\r\n                    onChange={props.onChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        id = {\"signal\" + props.signal.id + \"_FreqDial\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"FreqDial\"}\r\n                        type =\"range\" \r\n                        min={-4} \r\n                        max ={4} \r\n                        value = {props.signal.frequency} \r\n                        step={0.1}\r\n                        onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                        id = {\"signal\" + props.signal.id + \"_FreqText\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"FreqText\"}\r\n                        type = \"number\"  \r\n                        min = {-4}\r\n                        max = {4}\r\n                        onChange={props.onChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        id = {\"signal\" + props.signal.id + \"_PhaseDial\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseDial\"}\r\n                        type =\"range\" \r\n                        min={-180} \r\n                        max ={180} \r\n                        value = {props.signal.phase} \r\n                        step={1}\r\n                        onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                        id = {\"signal\" + props.signal.id + \"_PhaseText\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseText\"}\r\n                        type = \"number\"  \r\n                        min = {-180}\r\n                        max = {180}\r\n                        onChange={props.onChange}\r\n                    />\r\n                </div>        \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Controls extends React.Component {\r\n\r\n    renderDial(signal){\r\n        return(\r\n            <Dials\r\n                signal = {signal}\r\n                onChange = {(event) => this.props.onChange(event)}\r\n                onRemove = {(i) => this.props.onRemove(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n        const signalList = []; \r\n        for (let i=0; i < this.props.signals.length; i++){\r\n            signalList.push(\r\n                <div key={\"signal\" + this.props.signals[i].id}> \r\n                    {this.renderDial(this.props.signals[i])} \r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            <div className = {styles.dials} >\r\n                {signalList}\r\n                <button id = \"add-signal\" align-content = \"center\" onClick={() => this.props.onAdd()}> Add New Signal </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction Circles(props) {\r\n        return(\r\n            <circle\r\n                id = {\"circle_\"+props.signal.id}\r\n                signal_id = {props.signal.id}\r\n                cx = {(props.signal.frequency)* (800/8)}\r\n                cy = {(props.signal.amplitude)*(800/8)}\r\n                transform=\"translate(400,400) scale(1,-1)\"\r\n                r = {20}\r\n                fill = \"black\"\r\n                stroke = \"black\"\r\n                strokeWidth=\"1\"\r\n                onMouseDown={props.onMouseDown}\r\n                onMouseUp={props.onMouseUp}\r\n                onMouseOut={props.onMouseUp}\r\n                onMouseMove={props.onMouseMove}\r\n            />\r\n        );\r\n    \r\n}\r\n\r\n\r\nclass SinePlot extends React.Component {\r\n    render(){\r\n        const current = this.props.signals;\r\n    \r\n        // Appending svg\r\n        // Check if the element 'svg_id' exists. If not, create new svg, append and draw it\r\n        // Not sure if this scales well \r\n\r\n        for(let i = 0; i < current.length; i++){\r\n\r\n            let svgID  = 'svg_'\r\n            let pathID = 'path_'\r\n            svgID = svgID.concat(i.toString(10))\r\n            pathID = pathID.concat(i.toString(10))\r\n\r\n            let lineGenerator = d3.line()\r\n                                  .curve(d3.curveNatural);\r\n\r\n            let pathData = lineGenerator(current[i].values);\r\n\r\n             // Create scale\r\n            let xscale = d3.scaleLinear()\r\n                        .domain([0, 2]) // This needs to be dynamic\r\n                        .range([50, 750]);\r\n\r\n            let yscale = d3.scaleLinear()\r\n                        .domain([3.5,-3.5]) // This needs to be dynamic\r\n                        .range([50, 750]);\r\n\r\n            // Add scales to axis\r\n            let x_axis = d3.axisBottom()\r\n                .scale(xscale);\r\n\r\n            let y_axis = d3.axisLeft()\r\n                .scale(yscale);\r\n\r\n            // For now, if svgID exists, then just redraw\r\n            if(document.getElementById(svgID)){\r\n                d3.select(\"#\"+pathID).attr(\"d\", pathData)  \r\n            }\r\n            \r\n            // If svgID doesn't exist, then add it to the DOM\r\n\r\n            if(!document.getElementById(svgID)){\r\n                //The SVG Container\r\n                const svgSinePlot = d3.select(\"#sinePlotsID\").append(\"svg\")\r\n                .attr(\"id\",svgID)\r\n                .attr(\"width\", svgContainerWidth)\r\n                .attr(\"height\", svgContainerHeight)\r\n                .attr(\"transform\",\"translate(10)\")\r\n                .attr(\"style\",\"position: absolute\")\r\n                .attr(\"style\", \"border: 1px solid black\")\r\n                .attr(\"top\",\"100px\")\r\n                .attr(\"left\",\"50px\")\r\n\r\n                svgSinePlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",400)\r\n                .attr(\"y\",30)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sine Plot \" + i);\r\n\r\n                //The line SVG Path we draw\r\n                svgSinePlot.append(\"path\")\r\n                .attr(\"id\",pathID)\r\n                .attr(\"transform\",\"translate(50)\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"stroke\", \"blue\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(0,400)\")\r\n                .call(x_axis);\r\n                \r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(50,0)\")\r\n                .call(y_axis);\r\n            }          \r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport class FrequencyPlot extends React.Component {\r\n\r\n    renderCircle(signal){\r\n        return(\r\n            <Circles\r\n                signal = {signal}\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n    const signals = this.props.signals;\r\n     \r\n        let freqSvg = d3.select(\"#svgFreqPlot\")\r\n\r\n        const circleList = []; \r\n       \r\n        for (let i=0; i < this.props.signals.length; i++){\r\n            circleList.push(\r\n                    this.renderCircle(this.props.signals[i])\r\n            )\r\n        }\r\n        \r\n        // Should probably check both axis if they exist before appending\r\n        if(!document.getElementById(\"x_axis_freqPlot\")){\r\n\r\n            // Create Axis for Frequency Plot\r\n            let xscale_freq = d3.scaleLinear()\r\n                                .domain([-3.5, 3.5]) // This needs to be dynamic\r\n                                .range([50, 750]);\r\n\r\n            let yscale_freq = d3.scaleLinear()\r\n                                .domain([3.5,-3.5]) // This needs to be dynamic\r\n                                .range([50, 750]);\r\n\r\n            // Add scales to axis\r\n            let x_axis_freq = d3.axisBottom()\r\n                                .scale(xscale_freq);\r\n\r\n            let y_axis_freq = d3.axisLeft()\r\n                                .scale(yscale_freq);\r\n            \r\n            freqSvg.append(\"text\")\r\n                    .attr(\"text-anchor\", \"middle\")  \r\n                    .attr(\"x\",400)\r\n                    .attr(\"y\",30)\r\n                    .style(\"font-size\", \"16px\") \r\n                    .style(\"text-decoration\", \"underline\")  \r\n                    .text(\"Frequency Domain Plot\");\r\n                    \r\n            freqSvg.append('g')\r\n                    .attr(\"id\",\"x_axis_freqPlot\")\r\n                    .attr(\"transform\",\"translate(0,400)\")\r\n                    .call(x_axis_freq);\r\n\r\n            freqSvg.append('g')\r\n                    .attr(\"id\",\"y_axis_freqPlot\")\r\n                    .attr(\"transform\",\"translate(400,0)\")\r\n                    .call(y_axis_freq); \r\n        }\r\n\r\n        return( \r\n            <svg>\r\n               {circleList}\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n\r\nclass SumPlot extends React.Component {\r\n\r\n    render(){\r\n\r\n        let sumSignals = []; \r\n        let svgContainerHeight = 800;\r\n        let plotWidth = 700;\r\n\r\n        // This will break if we change plotWidth elsewhere \r\n        for(let k = 0; k < plotWidth; k++){\r\n            sumSignals.push([0,0]);\r\n        }\r\n\r\n        // Looping through all the signals\r\n        for (let i=0; i < this.props.signals.length; i++){\r\n\r\n            // Looping through the signal values\r\n            for(let j=0; j < this.props.signals[i].values.length; j++){\r\n\r\n                //sumSignals[j] = this.props.signals[i].values[j];\r\n                sumSignals[j][0] = this.props.signals[i].values[j][0];\r\n                sumSignals[j][1] += this.props.signals[i].values[j][1];\r\n            }\r\n            \r\n        }\r\n\r\n        // There is a way to scale this to the svg dimenesions rather than hardcoding it\r\n        for (let n =0; n < sumSignals.length; n++){\r\n            sumSignals[n][1] = sumSignals[n][1] - (this.props.signals.length-1)*(svgContainerHeight/2)\r\n        }\r\n\r\n        let lineGenerator = d3.line()\r\n          .curve(d3.curveNatural);\r\n\r\n        let pathData = lineGenerator(sumSignals);\r\n\r\n        // Create scale\r\n        let xscale = d3.scaleLinear()\r\n        .domain([0, 2]) // This needs to be dynamic\r\n        .range([50, 750]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n        .domain([3.5,-3.5]) // This needs to be dynamic\r\n        .range([50, 750]);\r\n\r\n        // Add scales to axis\r\n        let x_axis = d3.axisBottom()\r\n        .scale(xscale);\r\n\r\n        let y_axis = d3.axisLeft()\r\n        .scale(yscale);\r\n\r\n        //The line SVG Path we draw\r\n\r\n        // If exists, update\r\n        if(document.getElementById(\"path_Sum\")){\r\n            d3.select(\"#\"+\"path_Sum\").attr(\"d\", pathData)  \r\n               \r\n        }\r\n        \r\n        // Draws path if it doesn't exist\r\n        if(!document.getElementById(\"path_Sum\")){\r\n             d3.select(\"#svgSumPlot\").append(\"path\")\r\n                .attr(\"id\",\"path_Sum\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"transform\",\"translate(50)\")\r\n                .attr(\"stroke\", \"blue\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n\r\n            const svgSumPlot = d3.select(\"#svgSumPlot\")\r\n\r\n                svgSumPlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",400)\r\n                .attr(\"y\",30)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sum of Signals Plot\");\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\",\"translate(0,400)\")\r\n                .call(x_axis);\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\",\"translate(20,0)\")\r\n                .call(y_axis)\r\n                .attr(\"transform\",\"translate(50,0)\");\r\n                \r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class FrequencyDomain extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            signals: [\r\n                /* Example signal object \r\n                    {\r\n                    id: 0,\r\n                    amplitude: 1,\r\n                    frequency: 1,\r\n                    values: this.generateSignal(1,1),\r\n                    dragging: false,    \r\n                    },\r\n                */\r\n            ],\r\n            circles:[\r\n            ],\r\n        };\r\n        // This binding is necessary to make `this.` work in the callback   \r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseUp = this.handleMouseUp.bind(this);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    }\r\n    \r\n    addSignal(){\r\n        const signals = this.state.signals;\r\n\r\n        // Once this.setState has been called, it'll call render() to render straight away\r\n        this.setState({\r\n            signals: signals.concat([{  // Just concatenating array of JSON\r\n                id: signals.length,\r\n                amplitude: 0,           // Should be user input\r\n                frequency: 0,           // Should be user input\r\n                phase: 0,\r\n                values: this.generateSignal(0,0,0),\r\n                dragging: false,    \r\n            },]),\r\n        });        \r\n\r\n\r\n    }\r\n\r\n    removeSignal(i){\r\n        // Need to find signal id from the array and delete, then re-update id's\r\n        const signals = this.state.signals;\r\n\r\n\r\n        console.log(\"Hi from removeSignal\");    \r\n        console.log(i)\r\n        console.log(\"Before: \", signals);\r\n        signals.splice(i,1)\r\n        console.log(\"After:\", signals);\r\n\r\n        for(let n = 0; n< this.state.signals.length; n++){\r\n            signals[n].id = n;\r\n        }        \r\n\r\n        // Find the svgId and pathID and delete from DOM\r\n\r\n        let svgID  = 'svg_'\r\n        let pathID = 'path_'\r\n        svgID = svgID.concat(i.toString(10))\r\n        pathID = pathID.concat(i.toString(10))\r\n\r\n        d3.select(\"#\"+svgID).remove();\r\n\r\n        this.setState({\r\n            signals: signals,\r\n        });\r\n        console.log(this.state.signals);\r\n\r\n    \r\n    }\r\n\r\n    generateSignal(amplitude, frequency, phase){\r\n        // Generating path data\r\n        let points = [];\r\n        const plotHeight = 700;\r\n        const plotWidth = 700;\r\n        let scale = -100;\r\n        let x_offset = 0;\r\n        let y_offset = 50;\r\n\r\n        let Fs = 80;\r\n        let Ts = Math.PI / 200;\r\n\r\n        /* Calculation Reference\r\n        // 1 period = 1 second\r\n        // 1 period = 400 pixels => Ts = 400 samples per second\r\n        // 1 Hz = 2pi radians\r\n\r\n        // Sampling frequency = samples/second\r\n        // 1 sample per 1/400 second (Ts = 1/400)\r\n        // Fs = 2pi * (1/400)\r\n        // Fs = pi / 200\r\n\r\n        // Frequency is in Hz\r\n        // This is bascially an inverse FFT \r\n        // i is basically our t (1 unit of time)\r\n        */\r\n        for(let i = x_offset; i< plotWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude*Math.sin(Ts*frequency*i + (phase * (Math.PI / 180) )) + (plotHeight/2 + y_offset)];\r\n        }\r\n        return points;\r\n    }\r\n\r\n    updateDials(){\r\n        const signals = this.state.signals;\r\n\r\n        for(let i = 0; i< signals.length; i++){\r\n            document.getElementById(\"signal\" + signals[i].id + \"_AmpText\").value = signals[i].amplitude;\r\n            document.getElementById(\"signal\" + signals[i].id + \"_FreqText\").value = signals[i].frequency;\r\n        }\r\n    }\r\n\r\n    handleChange(event){\r\n\r\n\r\n        const signals = this.state.signals;\r\n        const inputType = event.target.getAttribute('input_type');\r\n        const signalID = event.target.getAttribute('signal_id'); // Signal ID Number\r\n        let value = parseFloat(event.target.value);   \r\n\r\n        // Text Form can currently exceed the maximum limit of 10, should limit?\r\n\r\n        if((inputType === \"AmpDial\") || (inputType === \"AmpText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                signals[signalID].amplitude = value;                 \r\n                signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n            }\r\n        }\r\n        else if ((inputType === \"FreqDial\") || (inputType === \"FreqText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                signals[signalID].frequency = value; \r\n                signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                document.getElementById(\"signal\" + signalID + \"_FreqText\").value = value;\r\n            }\r\n        } \r\n        else if ((inputType === \"PhaseDial\") || (inputType === \"PhaseText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                signals[signalID].phase = value; \r\n                signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n            }\r\n        }     \r\n\r\n        this.setState({\r\n                signals: signals,   \r\n            }   \r\n        );\r\n\r\n    }\r\n\r\n    \r\n    handleMouseDown(e){\r\n        console.log(\"clicked\")\r\n\r\n        e.preventDefault();\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n\r\n        signals[signalID].dragging = true;\r\n\r\n        this.setState({\r\n            signals: signals,   \r\n            }\r\n        );   \r\n    }\r\n\r\n    handleMouseUp(e){\r\n        console.log(\"click released\")\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n        console.log(e.type)\r\n        if(e.type == 'mouseout' && signals[signalID].dragging) {\r\n            console.log(\"mouse went out\")\r\n            return;\r\n        }\r\n\r\n        signals[signalID].dragging = false;\r\n        \r\n        this.setState({\r\n            signals: signals,   \r\n            }\r\n        );\r\n        \r\n    }\r\n\r\n    handleMouseMove(e) {\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n\r\n        //If we are dragging\r\n          if (signals[signalID].dragging) {\r\n              e.preventDefault();\r\n\r\n              console.log(e)\r\n              console.log(e.target)\r\n              console.log(\"clientX:\",e.clientX)\r\n              console.log(\"clientY:\",e.clientY)\r\n              // console.log(e.target.parentNode.parentNode)\r\n            let  rect = e.target.parentNode.parentNode.getBoundingClientRect();  \r\n\r\n            console.log(rect.left);\r\n            console.log(rect.top);\r\n\r\n\r\n            // Maybe should seperate coordinates and freq/amp values\r\n             signals[signalID].frequency = (e.clientX - rect.left - 400) / 100;\r\n             signals[signalID].amplitude = - (e.clientY - rect.top - 400) / 100;\r\n             signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n\r\n\r\n            // We should set position limits\r\n\r\n            console.log(signals[signalID].frequency)\r\n            console.log(signals[signalID].amplitude)\r\n\r\n            console.log(this)\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n                }\r\n            );  \r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n    const current = this.state.signals;\r\n\r\n    return (\r\n            <div className = {styles.container}>\r\n\r\n                <div className = {styles.sinePlots} id =\"sinePlotsID\">\r\n                    <SinePlot\r\n                        signals = {current}\r\n                    />\r\n                </div>\r\n\r\n                <div className = {styles.otherPlots}>\r\n                    <div className = {styles.freqPlots} id =\"freqPlotsID\">\r\n                        <svg id=\"svgFreqPlot\" width=\"800\" height=\"800\"  \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black',\r\n                                \r\n                                }}> \r\n                        \r\n                            <FrequencyPlot\r\n                                signals = {current}\r\n                                onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                                onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                                onMouseOut = {(event) => this.handleMouseUp(event)}\r\n                                onMouseMove = {(event) => this.handleMouseMove(event)}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className = {styles.sumPlots} id =\"sumPlotsID\">\r\n                        <svg id=\"svgSumPlot\" width=\"800\" height=\"800\" \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black'\r\n                                }}> \r\n                            <SumPlot\r\n                                signals = {current}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div className = {styles.controls}>\r\n                    \r\n                        <Controls\r\n                            signals = {current}\r\n                            onChange = {(event) => this.handleChange(event)}\r\n                            onAdd = {() => this.addSignal()}\r\n                            onRemove = {(i) => this.removeSignal(i)}\r\n                        />\r\n                    \r\n                </div>\r\n            </div>\r\n      );\r\n    }\r\n  }","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import logo from './logo.svg';\r\nimport styles from './App.module.css';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport * as d3 from \"d3\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nimport {FourierCoefficients} from './FourierCoefficients.js'\r\nimport {FrequencyDomain} from './FrequencyDomain.js'\r\n\r\n/*\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\n\r\n/* Known Bugs:\r\n- removeSignal() only works if you starting removing from the last signal\r\n- if you move/drag the mouse too fast the circle doesn't catch up\r\n- phase dial for DC signal updates amplitude when it's not meant to\r\n- negative phase circle is meant to move in opposite direction when dragged (cartersian coordinate problem)\r\n\r\n\r\n- Changing frequency does update the signal (when it's not meant to)\r\n^ But this is deliberate because we haven't updated FreqPlot functionality to fit with Fourier Plots\r\n*/\r\n\r\n\r\n\r\nfunction App() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        </header>\r\n        <Router>\r\n          <Typography className = {styles.navbar}>\r\n                      <div className = {styles.tab} id=\"home\">  \r\n                        <Link to=\"/\">Home</Link>\r\n                      </div>\r\n                      <div className = {styles.tab}> \r\n                        <Link to=\"/about\">About</Link>\r\n                      </div>\r\n                      <div className = {styles.tab}>  \r\n                        <Link to=\"/FourierCoefficients\">Fourier Coefficients</Link>\r\n                      </div>\r\n                      <div className = {styles.tab}>  \r\n                        <Link to=\"/FrequencyDomain\">Frequency Domain</Link>\r\n                      </div>\r\n          </Typography>\r\n            {/*\r\n              A <Switch> looks through all its children <Route>\r\n              elements and renders the first one whose path\r\n              matches the current URL. Use a <Switch> any time\r\n              you have multiple routes, but you want only one\r\n              of them to render at a time\r\n            */}\r\n\r\n            <Switch>\r\n              <Route exact path=\"/\">\r\n                <Home />\r\n              </Route>\r\n              <Route path=\"/about\">\r\n                <About />\r\n              </Route>\r\n              <Route path=\"/FourierCoefficients\">\r\n                <FourierCoefficients />\r\n              </Route>\r\n              <Route path=\"/FrequencyDomain\">\r\n                <FrequencyDomain />\r\n              </Route>\r\n            </Switch>\r\n  \r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function About() {\r\n    return (\r\n      <div className = {styles.centertext}>  \r\n        <div>\r\n          <h2>About the Project</h2>\r\n            <h4>\r\n              The aim of the project was to help students to have a more intuitive understanding \r\n              of the various topics in ECE2111 - Signals and Systems. The unit ECE2111, Signals and Systems, \r\n              taught by lecturer James Saunderson, involves many visual representations of the properties of \r\n              sinusoidal signals and their frequency response. \r\n            </h4>\r\n            <h4>\r\n              James had an idea of a helpful, interactive web application where students could interact \r\n              with and adjust signal properties and observe the relationships in time domain, frequency \r\n              domain etc. Hence, this final year project was proposed.\r\n            </h4>\r\n          <h2/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  class Home extends React.Component{\r\n    render() {\r\n\r\n      return(\r\n      <div>\r\n        <div className = {styles.centertext}>  \r\n          <h2>Welcome!</h2>\r\n          <h4>\r\n            This website was designed to allow students to learn more about topics in the unit ECE2111\r\n            through visualization and interaction with signal properties.\r\n            \r\n          </h4>\r\n            <h4>\r\n              Feel free to explore the topics, there's (hopefully) more to come!\r\n            </h4>\r\n          </div>\r\n      </div>\r\n      )\r\n\r\n    };\r\n  }\r\n\r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n  );\r\n\r\n  export default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"FrequencyDomain_home__30fuX\",\"container\":\"FrequencyDomain_container__DTkEc\",\"navbar\":\"FrequencyDomain_navbar__2nfHk\",\"tab\":\"FrequencyDomain_tab__2HYGI\",\"controls\":\"FrequencyDomain_controls__3_b1P\",\"dials\":\"FrequencyDomain_dials__1_C6C\",\"signal_container\":\"FrequencyDomain_signal_container__2wtJT\",\"signal_info\":\"FrequencyDomain_signal_info__2oOve\",\"signal_props\":\"FrequencyDomain_signal_props__3Psyr\",\"signal_dials\":\"FrequencyDomain_signal_dials__36fR_\",\"sinePlots\":\"FrequencyDomain_sinePlots__1Lmk_\",\"otherPlots\":\"FrequencyDomain_otherPlots__2dZs_\",\"freqPlots\":\"FrequencyDomain_freqPlots__2WRIF\",\"sumPlots\":\"FrequencyDomain_sumPlots__9CQRp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"App_home__gVUmA\",\"container\":\"App_container__2fAhY\",\"navbar\":\"App_navbar__3YSH8\",\"tab\":\"App_tab__2izV7\",\"centertext\":\"App_centertext__1tHIr\"};"],"sourceRoot":""}