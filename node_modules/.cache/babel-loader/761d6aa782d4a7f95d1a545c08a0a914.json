{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bunny\\\\Documents\\\\GitHub\\\\signals-web-app\\\\src\\\\FourierCoefficients.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport styles from './FourierCoefficients.module.css';\nimport * as d3 from \"d3\"; // Note about global css import\n// https://stackoverflow.com/questions/59418570/css-not-changing-when-using-react-router-to-route-to-another-component\n\nconst svgContainerWidth = 800;\nconst svgContainerHeight = 800;\n\nfunction Dials(props) {\n  console.log(\"Hi from Dials!\", props);\n  return React.createElement(\"div\", {\n    className: styles.signal_container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.signal_info,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"ID: \", props.signal.id), React.createElement(\"button\", {\n    id: \"remove-signal\",\n    onClick: i => props.onRemove(props.signal.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \" Remove Signal \")), React.createElement(\"div\", {\n    className: styles.signal_props,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Amplitude: \", props.signal.amplitude), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"Phase: \", props.signal.phase)), React.createElement(\"div\", {\n    className: styles.signal_dials,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: \"signal\" + props.signal.id + \"_AmpDial\",\n    signal_id: props.signal.id,\n    input_type: \"AmpDial\",\n    type: \"range\",\n    min: -5,\n    max: 5,\n    value: props.signal.amplitude,\n    step: 0.1,\n    onChange: props.onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    id: \"signal\" + props.signal.id + \"_AmpText\",\n    signal_id: props.signal.id,\n    input_type: \"AmpText\",\n    type: \"number\",\n    min: -5,\n    max: 5,\n    onChange: props.onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: \"signal\" + props.signal.id + \"_PhaseDial\",\n    signal_id: props.signal.id,\n    input_type: \"PhaseDial\",\n    type: \"range\",\n    min: -180,\n    max: 180,\n    value: props.signal.phase,\n    step: 1,\n    onChange: props.onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    id: \"signal\" + props.signal.id + \"_PhaseText\",\n    signal_id: props.signal.id,\n    input_type: \"PhaseText\",\n    type: \"number\",\n    min: -180,\n    max: 180,\n    onChange: props.onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }))));\n}\n\nclass Controls extends React.Component {\n  renderDial(signal) {\n    // console.log(\"Hi from renderDial\",this.props);\n    return React.createElement(Dials, {\n      signal: signal,\n      onChange: event => this.props.onChange(event),\n      onRemove: i => this.props.onRemove(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    const signalList = [];\n\n    for (let i = 0; i < this.props.signals.length; i++) {\n      signalList.push(React.createElement(\"div\", {\n        key: \"signal\" + this.props.signals[i].id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, this.renderDial(this.props.signals[i])));\n    } // console.log(\"Hi from Controls render\",this.props);\n    // console.log(signalList);\n\n\n    return React.createElement(\"div\", {\n      className: styles.dials,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, signalList, React.createElement(\"button\", {\n      id: \"add-signal\",\n      \"align-content\": \"center\",\n      onClick: () => this.props.onAdd(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \" Add New Signal \"));\n  }\n\n}\n\nfunction FourierCirclesMagPos(props) {\n  return React.createElement(\"circle\", {\n    id: \"circle_\" + props.signal.id,\n    signal_id: props.signal.id,\n    cx: props.signal.id * (800 / 8),\n    cy: props.signal.amplitude * (800 / 8),\n    transform: \"translate(400,400) scale(1,-1)\",\n    r: 20,\n    fill: \"black\",\n    stroke: \"black\",\n    strokeWidth: \"1\",\n    onMouseDown: props.onMouseDown,\n    onMouseUp: props.onMouseUp,\n    onMouseOut: props.onMouseUp,\n    onMouseMove: props.onMouseMove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  });\n}\n\nfunction FourierCirclesMagNeg(props) {\n  return React.createElement(\"circle\", {\n    id: \"circle_-\" + props.signal.id,\n    signal_id: props.signal.id,\n    cx: props.signal.id * -(800 / 8),\n    cy: props.signal.amplitude * (800 / 8),\n    transform: \"translate(400,400) scale(1,-1)\",\n    r: 20,\n    fill: \"black\",\n    stroke: \"black\",\n    strokeWidth: \"1\",\n    onMouseDown: props.onMouseDown,\n    onMouseUp: props.onMouseUp,\n    onMouseOut: props.onMouseUp,\n    onMouseMove: props.onMouseMove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  });\n}\n\nfunction FourierCirclesPhasePos(props) {\n  return React.createElement(\"circle\", {\n    id: \"circle_\" + props.signal.id,\n    signal_id: props.signal.id,\n    cx: props.signal.id * (800 / 8),\n    cy: props.signal.phase * (700 / 360),\n    transform: \"translate(400,400) scale(1,-1)\",\n    r: 20,\n    fill: \"black\",\n    stroke: \"black\",\n    strokeWidth: \"1\",\n    onMouseDown: props.onMouseDown,\n    onMouseUp: props.onMouseUp,\n    onMouseOut: props.onMouseUp,\n    onMouseMove: props.onMouseMove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  });\n}\n\nfunction FourierCirclesPhaseNeg(props) {\n  return React.createElement(\"circle\", {\n    id: \"circle_-\" + props.signal.id,\n    signal_id: props.signal.id,\n    cx: props.signal.id * -(800 / 8),\n    cy: props.signal.phase * -(700 / 360),\n    transform: \"translate(400,400) scale(1,-1)\",\n    r: 20,\n    fill: \"black\",\n    stroke: \"black\",\n    strokeWidth: \"1\",\n    onMouseDown: props.onMouseDown,\n    onMouseUp: props.onMouseUp,\n    onMouseOut: props.onMouseUp,\n    onMouseMove: props.onMouseMove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  });\n}\n\nclass FourierMagPlot extends React.Component {\n  renderCirclePos(signal) {\n    return React.createElement(FourierCirclesMagPos, {\n      signal: signal,\n      onMouseDown: event => this.props.onMouseDown(event),\n      onMouseUp: event => this.props.onMouseUp(event),\n      onMouseOut: event => this.props.onMouseUp(event),\n      onMouseMove: event => this.props.onMouseMove(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    });\n  }\n\n  renderCircleNeg(signal) {\n    return React.createElement(FourierCirclesMagNeg, {\n      signal: signal,\n      onMouseDown: event => this.props.onMouseDown(event),\n      onMouseUp: event => this.props.onMouseUp(event),\n      onMouseOut: event => this.props.onMouseUp(event),\n      onMouseMove: event => this.props.onMouseMove(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    const signals = this.props.signals;\n    let FourierMagSvg = d3.select(\"#svgFourierMagPlot\");\n    let radius = 10;\n    const circleList = [];\n\n    for (let i = 0; i < this.props.signals.length; i++) {\n      if (i == 0) {\n        circleList.push(this.renderCirclePos(this.props.signals[i]));\n      } else {\n        circleList.push(this.renderCirclePos(this.props.signals[i]), this.renderCircleNeg(this.props.signals[i]));\n      }\n    } // Should probably check both axis if they exist before appending\n\n\n    if (!document.getElementById(\"x_axis_fourierMagPlot\")) {\n      // Create Axis for Frequency Plot\n      let xscale_freq = d3.scaleLinear().domain([-3.5, 3.5]) // This needs to be dynamic\n      .range([50, 750]);\n      let yscale_freq = d3.scaleLinear().domain([3.5, -3.5]) // This needs to be dynamic\n      .range([50, 750]); // Add scales to axis\n\n      const xAxisTicks = xscale_freq.ticks().filter(tick => Number.isInteger(tick));\n      let x_axis_freq = d3.axisBottom(xscale_freq).tickValues(xAxisTicks).tickFormat(d3.format(\"d\"));\n      let y_axis_freq = d3.axisLeft(yscale_freq);\n      FourierMagSvg.append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"x\", 400).attr(\"y\", 30).style(\"font-size\", \"16px\").style(\"text-decoration\", \"underline\").text(\"Fourier Magnitude Plot\");\n      FourierMagSvg.append('g').attr(\"id\", \"x_axis_fourierMagPlot\").attr(\"transform\", \"translate(0,400)\").call(x_axis_freq);\n      FourierMagSvg.append('g').attr(\"id\", \"y_axis_fourierMagPlot\").attr(\"transform\", \"translate(400,0)\").call(y_axis_freq);\n    }\n\n    return React.createElement(\"svg\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, circleList);\n  }\n\n}\n\nclass FourierPhasePlot extends React.Component {\n  renderCirclePos(signal) {\n    return React.createElement(FourierCirclesPhasePos, {\n      signal: signal,\n      onMouseDown: event => this.props.onMouseDown(event),\n      onMouseUp: event => this.props.onMouseUp(event),\n      onMouseOut: event => this.props.onMouseUp(event),\n      onMouseMove: event => this.props.onMouseMove(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    });\n  }\n\n  renderCircleNeg(signal) {\n    return React.createElement(FourierCirclesPhaseNeg, {\n      signal: signal,\n      onMouseDown: event => this.props.onMouseDown(event),\n      onMouseUp: event => this.props.onMouseUp(event),\n      onMouseOut: event => this.props.onMouseUp(event),\n      onMouseMove: event => this.props.onMouseMove(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    const signals = this.props.signals;\n    let FourierPhaseSvg = d3.select(\"#svgFourierPhasePlot\");\n    let radius = 10;\n    const circleList = [];\n\n    for (let i = 0; i < this.props.signals.length; i++) {\n      if (i == 0) {\n        circleList.push(this.renderCirclePos(this.props.signals[i]));\n      } else {\n        circleList.push(this.renderCirclePos(this.props.signals[i]), this.renderCircleNeg(this.props.signals[i]));\n      }\n    } // Should probably check both axis if they exist before appending\n\n\n    if (!document.getElementById(\"x_axis_fourierPhasePlot\")) {\n      // Create Axis for Frequency Plot\n      let xscale_freq = d3.scaleLinear().domain([-3.5, 3.5]) // This needs to be dynamic\n      .range([50, 750]);\n      let yscale_freq = d3.scaleLinear().domain([180, -180]) // This needs to be dynamic\n      .range([50, 750]); // Add scales to axis\n\n      const xAxisTicks = xscale_freq.ticks().filter(tick => Number.isInteger(tick));\n      let x_axis_freq = d3.axisBottom(xscale_freq).tickValues(xAxisTicks).tickFormat(d3.format(\"d\"));\n      let y_axis_freq = d3.axisLeft(yscale_freq);\n      FourierPhaseSvg.append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"x\", 400).attr(\"y\", 30).style(\"font-size\", \"16px\").style(\"text-decoration\", \"underline\").text(\"Fourier Phase Plot\");\n      FourierPhaseSvg.append('g').attr(\"id\", \"x_axis_fourierPhasePlot\").attr(\"transform\", \"translate(0,400)\").call(x_axis_freq);\n      FourierPhaseSvg.append('g').attr(\"id\", \"y_axis_fourierPhasePlot\").attr(\"transform\", \"translate(400,0)\").call(y_axis_freq);\n    }\n\n    return React.createElement(\"svg\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, circleList);\n  }\n\n}\n\nclass SinePlot extends React.Component {\n  render() {\n    const current = this.props.signals; // Appending svg\n    // Check if the element 'svg_id' exists. If not, create new svg, append and draw it\n    // I'm not sure if this scales well lol\n\n    for (let i = 0; i < current.length; i++) {\n      let svgID = 'svg_';\n      let pathID = 'path_';\n      svgID = svgID.concat(i.toString(10));\n      pathID = pathID.concat(i.toString(10));\n      let lineGenerator = d3.line().curve(d3.curveNatural);\n      let pathData = lineGenerator(current[i].values); // d3.select('path')\n      // .attr('d', pathData);\n      // Create scale\n\n      let xscale = d3.scaleLinear().domain([0, 2]) // This needs to be dynamic\n      .range([0, 800]);\n      let yscale = d3.scaleLinear().domain([3.5, -3.5]) // This needs to be dynamic\n      .range([50, 750]); // Add scales to axis\n\n      let x_axis = d3.axisBottom().scale(xscale);\n      let y_axis = d3.axisLeft().scale(yscale); // For now, if svgID exists, then just redraw\n\n      if (document.getElementById(svgID)) {\n        // console.log(\"Hi from redraw\")\n        // console.log(pathID)\n        d3.select(\"#\" + pathID).attr(\"d\", pathData);\n      } // If svgID doesn't exist, then add it to the DOM\n\n\n      if (!document.getElementById(svgID)) {\n        //The SVG Container\n        const svgContainer = d3.select(\"#sinePlotsID\").append(\"svg\").attr(\"id\", svgID).attr(\"width\", svgContainerWidth).attr(\"height\", svgContainerHeight).attr(\"style\", \"position: absolute\", \"left: 5%\").attr(\"style\", \"border: 1px solid black\") // .attr(\"y\",i*svgContainerHeight)\n        //.attr(\"y\", 200)\n        .attr(\"top\", \"100\"); //The line SVG Path we draw\n\n        const lineGraph = svgContainer.append(\"path\").attr(\"id\", pathID) //.attr(\"datum\", current[i].values)\n        //.attr(\"d\", line.interpolate(\"basis\"))\n        .attr(\"d\", pathData).attr(\"stroke\", \"blue\").attr(\"stroke-width\", 2).attr(\"fill\", \"none\");\n        svgContainer.append('g').attr(\"transform\", \"translate(0,400)\").call(x_axis);\n        svgContainer.append('g').attr(\"transform\", \"translate(50,0)\").call(y_axis);\n      }\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    });\n  }\n\n}\n\nclass SumPlot extends React.Component {\n  render() {\n    // This is brute force?\n    let sumSignals = []; // This will break if the resolution breaks lool\n\n    for (let k = 0; k < 800; k++) {\n      sumSignals.push([0, 0]);\n    } // Looping through all the signals\n\n\n    for (let i = 0; i < this.props.signals.length; i++) {\n      // Looping through the signal values\n      for (let j = 0; j < this.props.signals[i].values.length; j++) {\n        //sumSignals[j] = this.props.signals[i].values[j];\n        sumSignals[j][0] = this.props.signals[i].values[j][0];\n        sumSignals[j][1] += this.props.signals[i].values[j][1];\n      }\n    } // There is a way to scale this to the svg dimenesions rather than hardcoding it\n\n\n    for (let n = 0; n < sumSignals.length; n++) {\n      sumSignals[n][1] = sumSignals[n][1] - (this.props.signals.length - 1) * 400;\n    } // console.log(\"sumSignals:\", sumSignals)\n\n\n    let lineGenerator = d3.line().curve(d3.curveNatural);\n    let pathData = lineGenerator(sumSignals); // We should probably also store this in the React states in the Home class \n    // Create scale\n\n    let xscale = d3.scaleLinear().domain([0, 2]) // This needs to be dynamic\n    .range([0, 800]);\n    let yscale = d3.scaleLinear().domain([3.5, -3.5]) // This needs to be dynamic\n    .range([50, 750]); // Add scales to axis\n\n    let x_axis = d3.axisBottom().scale(xscale);\n    let y_axis = d3.axisLeft().scale(yscale); //The line SVG Path we draw\n    // If exists, update\n\n    if (document.getElementById(\"path_Sum\")) {\n      d3.select(\"#\" + \"path_Sum\").attr(\"d\", pathData);\n    } // Draws path if it doesn't exist\n\n\n    if (!document.getElementById(\"path_Sum\")) {\n      d3.select(\"#svgSumPlot\").append(\"path\").attr(\"id\", \"path_Sum\").attr(\"d\", pathData).attr(\"stroke\", \"blue\").attr(\"stroke-width\", 2).attr(\"fill\", \"none\");\n      const svgSumPlot = d3.select(\"#svgSumPlot\");\n      svgSumPlot.append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"x\", 400).attr(\"y\", 30).style(\"font-size\", \"16px\").style(\"text-decoration\", \"underline\").text(\"Sum of Signals Plot\");\n      svgSumPlot.append('g').attr(\"transform\", \"translate(0,400)\").call(x_axis);\n      svgSumPlot.append('g').attr(\"transform\", \"translate(20,0)\").call(y_axis).attr(\"transform\", \"translate(50,0)\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport class FourierCoefficients extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      signals: [\n        /* Example signal object \r\n        {\r\n        id: 0,\r\n        amplitude: 1,\r\n        frequency: 1,\r\n        values: this.generateSignal(1,1),\r\n        dragging: false,    \r\n        },\r\n        */\n      ],\n      circles: []\n    }; // This binding is necessary to make `this.` work in the callback   \n\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseUp = this.handleMouseUp.bind(this);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleMouseMoveFourierMag = this.handleMouseMoveFourierMag.bind(this);\n    this.handleMouseMoveFourierPhase = this.handleMouseMoveFourierPhase.bind(this);\n  }\n\n  addSignal() {\n    const signals = this.state.signals; // Once this.setState has been called, it'll call render() to render straight away\n\n    this.setState({\n      signals: signals.concat([{\n        // Just concatenating array of JSON\n        id: signals.length,\n        amplitude: 0,\n        // Should be user input\n        frequency: signals.length,\n        // Should be user input\n        phase: 0,\n        values: this.generateSignal(0, signals.length, 0),\n        dragging: false\n      }])\n    });\n  }\n\n  removeSignal(i) {\n    // Need to find signal id from the array and delete, then re-update id's\n    const signals = this.state.signals;\n    console.log(\"Hi from removeSignal\");\n    console.log(i);\n    console.log(\"Before: \", signals);\n    signals.splice(i, 1);\n    console.log(\"After:\", signals);\n\n    for (let n = 0; n < this.state.signals.length; n++) {\n      signals[n].id = n;\n    } // Find the svgId and pathID and delete from DOM\n\n\n    let svgID = 'svg_';\n    let pathID = 'path_';\n    svgID = svgID.concat(i.toString(10));\n    pathID = pathID.concat(i.toString(10));\n    d3.select(\"#\" + svgID).remove();\n    this.setState({\n      signals: signals\n    });\n    console.log(this.state.signals);\n  } // From James:\n  // If you want to find the fourier transform of a complex signal, just change the sin and cosines into exponetial form (phasor)\n  // Then just read of the phasor's coefficient for magnitude and frequency. \n  // E.g. for X*exp(j*omega*t), X and omega is your magnitude and frequency to be plotted in the frequency domain\n  // So we don't have to compute FFT's on the fly (because then it'll be a performance vs memroy tradeoff). ^ If the above works well enough then we'll stick with it since it's much less restrictive\n\n\n  generateSignal(amplitude, frequency, phase) {\n    // Generating path data\n    // should preallocate array\n    let points = []; // decide scaling later i guess\n\n    const svgContainerHeight = 800;\n    const svgContainerWidth = 800;\n    let scale = -100; // Sampling frequency: 50Hz ?\n\n    let Fs = 80; // let Ts = 1/Fs;\n\n    let Ts = Math.PI / 200; // 1 period = 1 second\n    // 1 period = 400 pixels => Ts = 400 samples per second\n    // 1 Hz = 2pi radians\n    // Sampling frequency = samples/second\n    // 1 sample per 1/400 second (Ts = 1/400)\n    // Fs = 2pi * (1/400)\n    // Fs = pi / 200\n    // Frequency is in Hz\n    // This is bascially an inverse FFT \n    // i is basically our t (1 unit of time)\n\n    for (let i = 0; i < svgContainerWidth; i++) {\n      points[i] = [i, scale * amplitude * Math.sin(Ts * frequency * i + phase * (Math.PI / 180)) + svgContainerHeight / 2];\n    } // console.log(points)\n\n\n    return points;\n  }\n\n  generateDC(amplitude) {\n    let points = []; // decide scaling later i guess\n\n    const svgContainerHeight = 800;\n    const svgContainerWidth = 800;\n    let scale = -100;\n\n    for (let i = 0; i < svgContainerWidth; i++) {\n      points[i] = [i, scale * amplitude + svgContainerHeight / 2];\n    }\n\n    return points;\n  }\n\n  updateDials() {\n    const signals = this.state.signals;\n\n    for (let i = 0; i < signals.length; i++) {\n      document.getElementById(\"signal\" + signals[i].id + \"_AmpText\").value = signals[i].amplitude;\n      document.getElementById(\"signal\" + signals[i].id + \"_FreqText\").value = signals[i].frequency;\n    }\n  }\n\n  handleChange(event) {\n    const signals = this.state.signals;\n    const inputType = event.target.getAttribute('input_type');\n    const signalID = event.target.getAttribute('signal_id'); // Signal ID Number\n\n    let value = parseFloat(event.target.value); // Text Form can exceed the maximum limit of 10?\n\n    if (inputType === \"AmpDial\" || inputType === \"AmpText\") {\n      if (isNaN(value)) {\n        value = 0;\n      } else {\n        // DC Case\n        if (signalID == 0) {\n          signals[signalID].amplitude = value;\n          signals[signalID].values = this.generateDC(signals[signalID].amplitude);\n          document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\n        } // All Other cases\n        else {\n            signals[signalID].amplitude = value;\n            signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\n            document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\n          }\n      }\n    } else if (inputType === \"PhaseDial\" || inputType === \"PhaseText\") {\n      console.log(\"HELLO\");\n      console.log(signals[signalID].amplitude);\n      console.log(signals[signalID].phase); // The problem with the DC value is probably because we're calling generateSignal()\n      // insteaed of generateDC when the dials are changed?\n      // I guess these are all deliberate bugs (because we're porting code)\n\n      if (isNaN(value)) {\n        value = 0;\n      } else {\n        // DC Case\n        if (signalID == 0) {\n          signals[signalID].phase = value;\n          signals[signalID].values = this.generateDC(signals[signalID].amplitude);\n          document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\n        } // All Other cases\n        else {\n            signals[signalID].phase = value;\n            signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\n            document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\n          }\n      }\n    } // console.log(signals);\n\n\n    this.setState({\n      signals: signals // Rewriting the whole array of objects may be expensive but it works \n      // Could just access the key and change it's value rather than doing a whole update\n      // This is actually using a lot of memory though? F12 -> Memory tab\n\n    });\n  }\n\n  handleMouseDown(e) {\n    console.log(\"clicked\");\n    e.preventDefault();\n    const signals = this.state.signals;\n    const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\n\n    signals[signalID].dragging = true;\n    this.setState({\n      signals: signals\n    });\n  }\n\n  handleMouseUp(e) {\n    console.log(\"click released\"); // this.state.dragging = false;\n    // this.state.coords = {};\n\n    const signals = this.state.signals;\n    const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\n\n    console.log(e.type);\n\n    if (e.type == 'mouseout' && signals[signalID].dragging) {\n      console.log(\"mouse went out\");\n      return;\n    }\n\n    signals[signalID].dragging = false;\n    this.setState({\n      signals: signals\n    });\n  } // Base Mouse move function. Used in Frequency Domain. Not currently in use in this .js file\n\n\n  handleMouseMove(e) {\n    const signals = this.state.signals;\n    const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\n    //If we are dragging\n\n    if (signals[signalID].dragging) {\n      e.preventDefault();\n      console.log(e);\n      console.log(e.target);\n      console.log(\"clientX:\", e.clientX);\n      console.log(\"clientY:\", e.clientY); // console.log(e.target.parentNode.parentNode)\n\n      let rect = e.target.parentNode.parentNode.getBoundingClientRect();\n      console.log(rect.left);\n      console.log(rect.top); // Maybe should seperate coordinates and freq/amp values\n\n      signals[signalID].frequency = (e.clientX - rect.left - 400) / 100;\n      signals[signalID].amplitude = -(e.clientY - rect.top - 400) / 100;\n      signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase); // We should set position limits\n\n      console.log(signals[signalID].frequency);\n      console.log(signals[signalID].amplitude);\n      console.log(this);\n      this.setState({\n        signals: signals\n      });\n    }\n  }\n\n  handleMouseMoveFourierMag(e) {\n    const signals = this.state.signals;\n    const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\n    //If we are dragging\n\n    if (signals[signalID].dragging) {\n      e.preventDefault();\n      console.log(e.target);\n      let rect = e.target.parentNode.parentNode.getBoundingClientRect(); // Maybe should seperate coordinates and freq/amp values\n\n      signals[signalID].frequency = signals[signalID].id;\n      signals[signalID].amplitude = -(e.clientY - rect.top - 400) / (800 / 8); // 800: svg height, 8: max axis size (-4 to 4)\n\n      signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase); // We should set position limits\n      // Checking if signal is the DC value\n\n      if (signalID == 0) {\n        signals[signalID].values = this.generateDC(signals[signalID].amplitude);\n      }\n\n      this.setState({\n        signals: signals\n      });\n    }\n  }\n\n  handleMouseMoveFourierPhase(e) {\n    const signals = this.state.signals;\n    const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\n\n    console.log(\"signalID: \", signalID); //If we are dragging\n\n    if (signals[signalID].dragging) {\n      e.preventDefault();\n      console.log(e.target);\n      let rect = e.target.parentNode.parentNode.getBoundingClientRect(); // Maybe should seperate coordinates and freq/amp values\n\n      signals[signalID].frequency = signals[signalID].id;\n      signals[signalID].phase = parseInt(-(e.clientY - rect.top - 400) / (700 / 360));\n      signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase); // We should set position limits\n      // Checking if signal is the DC value\n\n      if (signalID == 0) {\n        signals[signalID].values = this.generateDC(signals[signalID].amplitude);\n      }\n\n      this.setState({\n        signals: signals\n      });\n    }\n  }\n  /*\r\n      drawSignals(){\r\n          const current = this.state.signals;\r\n      \r\n          // Appending svg\r\n          // Check if the element 'svg_id' exists. If not, create new svg, append and draw it\r\n          // I'm not sure if this scales well lol\r\n  \r\n          for(let i = 0; i < current.length; i++){\r\n  \r\n              let svgID  = 'svg_'\r\n              let pathID = 'path_'\r\n              svgID = svgID.concat(i.toString(10))\r\n              pathID = pathID.concat(i.toString(10))\r\n  \r\n              let lineGenerator = d3.line()\r\n                                    .curve(d3.curveNatural);\r\n  \r\n              let pathData = lineGenerator(current[i].values);\r\n  \r\n              // d3.select('path')\r\n              // .attr('d', pathData);\r\n  \r\n               // Create scale\r\n              let xscale = d3.scaleLinear()\r\n                          .domain([0, 2]) // This needs to be dynamic\r\n                          .range([0, 800]);\r\n  \r\n              let yscale = d3.scaleLinear()\r\n                          .domain([3.5,-3.5]) // This needs to be dynamic\r\n                          .range([50, 750]);\r\n  \r\n              // Add scales to axis\r\n              let x_axis = d3.axisBottom()\r\n                  .scale(xscale);\r\n  \r\n              let y_axis = d3.axisLeft()\r\n                  .scale(yscale);\r\n  \r\n              // For now, if svgID exists, then just redraw\r\n              if(document.getElementById(svgID)){\r\n                  // console.log(\"Hi from redraw\")\r\n                  // console.log(pathID)\r\n                  d3.select(\"#\"+pathID).attr(\"d\", pathData)  \r\n                    \r\n              }\r\n              \r\n              // If svgID doesn't exist, then add it to the DOM\r\n  \r\n              if(!document.getElementById(svgID)){\r\n                  //The SVG Container\r\n                  const svgContainer = d3.select(\"#sinePlotsID\").append(\"svg\")\r\n                  .attr(\"id\",svgID)\r\n                  .attr(\"width\", svgContainerWidth)\r\n                  .attr(\"height\", svgContainerHeight)\r\n                  .attr(\"style\",\"position: absolute\", \"left: 5%\")\r\n                  .attr(\"style\", \"border: 1px solid black\")\r\n                  // .attr(\"y\",i*svgContainerHeight)\r\n                  //.attr(\"y\", 200)\r\n                  .attr(\"top\",\"100\")\r\n  \r\n                  //The line SVG Path we draw\r\n                  const lineGraph = svgContainer.append(\"path\")\r\n                  .attr(\"id\",pathID)\r\n                  //.attr(\"datum\", current[i].values)\r\n                  //.attr(\"d\", line.interpolate(\"basis\"))\r\n                  .attr(\"d\", pathData)\r\n                  .attr(\"stroke\", \"blue\")\r\n                  .attr(\"stroke-width\", 2)\r\n                  .attr(\"fill\", \"none\")\r\n  \r\n                  svgContainer.append('g')\r\n                      .attr(\"transform\",\"translate(0,400)\")\r\n                      .call(x_axis);\r\n                  \r\n                  svgContainer.append('g')\r\n                  .attr(\"transform\",\"translate(50,0)\")\r\n                      .call(y_axis);\r\n              }          \r\n          }\r\n      }\r\n  */\n\n\n  render() {\n    const current = this.state.signals; // this.drawSignals();\n    // transform = {{translate:\"(50%,50%)\"}}>\n\n    return React.createElement(\"div\", {\n      className: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1016\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.sinePlots,\n      id: \"sinePlotsID\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1018\n      },\n      __self: this\n    }, React.createElement(SinePlot, {\n      signals: current,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1019\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: styles.fourierPhasePlots,\n      id: \"fourierPhasePlotsID\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1024\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      id: \"svgFourierPhasePlot\",\n      width: \"800\",\n      height: \"800\",\n      style: {\n        position: \"relative\",\n        top: \"0%\",\n        left: \"0%\",\n        transform: \"translate(0%, 0%)\",\n        border: '1px solid black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1025\n      },\n      __self: this\n    }, React.createElement(FourierPhasePlot, {\n      signals: current,\n      onMouseDown: event => this.handleMouseDown(event),\n      onMouseUp: event => this.handleMouseUp(event),\n      onMouseOut: event => this.handleMouseUp(event),\n      onMouseMove: event => this.handleMouseMoveFourierPhase(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1035\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: styles.fourierMagPlots,\n      id: \"fourierMagPlotsID\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1045\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      id: \"svgFourierMagPlot\",\n      width: \"800\",\n      height: \"800\",\n      style: {\n        position: \"relative\",\n        top: \"0%\",\n        left: \"0%\",\n        transform: \"translate(0%, 0%)\",\n        border: '1px solid black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1046\n      },\n      __self: this\n    }, React.createElement(FourierMagPlot, {\n      signals: current,\n      onMouseDown: event => this.handleMouseDown(event),\n      onMouseUp: event => this.handleMouseUp(event),\n      onMouseOut: event => this.handleMouseUp(event),\n      onMouseMove: event => this.handleMouseMoveFourierMag(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1056\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: styles.sumPlots,\n      id: \"sumPlotsID\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1066\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      id: \"svgSumPlot\",\n      width: \"800\",\n      height: \"800\",\n      style: {\n        position: \"relative\",\n        top: \"0%\",\n        left: \"0%\",\n        transform: \"translate(0%, 0%)\",\n        border: '1px solid black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1067\n      },\n      __self: this\n    }, React.createElement(SumPlot, {\n      signals: current,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1075\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: styles.controls,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1081\n      },\n      __self: this\n    }, React.createElement(Controls, {\n      signals: current,\n      onChange: event => this.handleChange(event),\n      onAdd: () => this.addSignal(),\n      onRemove: i => this.removeSignal(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1083\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/bunny/Documents/GitHub/signals-web-app/src/FourierCoefficients.js"],"names":["React","Component","ReactDOM","styles","d3","svgContainerWidth","svgContainerHeight","Dials","props","console","log","signal_container","signal_info","signal","id","i","onRemove","signal_props","amplitude","phase","signal_dials","onChange","Controls","renderDial","event","render","signalList","signals","length","push","dials","onAdd","FourierCirclesMagPos","onMouseDown","onMouseUp","onMouseMove","FourierCirclesMagNeg","FourierCirclesPhasePos","FourierCirclesPhaseNeg","FourierMagPlot","renderCirclePos","renderCircleNeg","FourierMagSvg","select","radius","circleList","document","getElementById","xscale_freq","scaleLinear","domain","range","yscale_freq","xAxisTicks","ticks","filter","tick","Number","isInteger","x_axis_freq","axisBottom","tickValues","tickFormat","format","y_axis_freq","axisLeft","append","attr","style","text","call","FourierPhasePlot","FourierPhaseSvg","SinePlot","current","svgID","pathID","concat","toString","lineGenerator","line","curve","curveNatural","pathData","values","xscale","yscale","x_axis","scale","y_axis","svgContainer","lineGraph","SumPlot","sumSignals","k","j","n","svgSumPlot","FourierCoefficients","constructor","state","circles","handleMouseDown","bind","handleMouseUp","handleMouseMove","handleMouseMoveFourierMag","handleMouseMoveFourierPhase","addSignal","setState","frequency","generateSignal","dragging","removeSignal","splice","remove","points","Fs","Ts","Math","PI","sin","generateDC","updateDials","value","handleChange","inputType","target","getAttribute","signalID","parseFloat","isNaN","e","preventDefault","type","clientX","clientY","rect","parentNode","getBoundingClientRect","left","top","parseInt","container","sinePlots","fourierPhasePlots","position","transform","border","fourierMagPlots","sumPlots","controls"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styles from './FourierCoefficients.module.css'; \r\nimport * as d3 from \"d3\";\r\n\r\n// Note about global css import\r\n// https://stackoverflow.com/questions/59418570/css-not-changing-when-using-react-router-to-route-to-another-component\r\n\r\nconst svgContainerWidth = 800;\r\nconst svgContainerHeight = 800;\r\n\r\nfunction Dials(props) {\r\n    console.log(\"Hi from Dials!\",props);\r\n    return(\r\n        <div className={styles.signal_container}>\r\n            <div className={styles.signal_info}>\r\n                <div>ID: {props.signal.id}</div>\r\n                <button id = \"remove-signal\" onClick={(i) => props.onRemove(props.signal.id)}> Remove Signal </button>\r\n            </div>\r\n            <div className={styles.signal_props}>\r\n                <div>Amplitude: {props.signal.amplitude}</div>\r\n                <div>Phase: {props.signal.phase}</div>\r\n            </div>\r\n            <div className = {styles.signal_dials}>\r\n                <div>\r\n                    <input \r\n                    id = {\"signal\" + props.signal.id + \"_AmpDial\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpDial\"}\r\n                    type =\"range\" \r\n                    min={-5} \r\n                    max ={5} \r\n                    value = {props.signal.amplitude} \r\n                    step={0.1}\r\n                    onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                    id = {\"signal\" + props.signal.id + \"_AmpText\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpText\"}\r\n                    type = \"number\"  \r\n                    min = {-5}\r\n                    max = {5}\r\n                    onChange={props.onChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        id = {\"signal\" + props.signal.id + \"_PhaseDial\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseDial\"}\r\n                        type =\"range\" \r\n                        min={-180} \r\n                        max ={180} \r\n                        value = {props.signal.phase} \r\n                        step={1}\r\n                        onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                        id = {\"signal\" + props.signal.id + \"_PhaseText\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseText\"}\r\n                        type = \"number\"  \r\n                        min = {-180}\r\n                        max = {180}\r\n                        onChange={props.onChange}\r\n                    />\r\n                </div>        \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Controls extends React.Component {\r\n\r\n    renderDial(signal){\r\n        // console.log(\"Hi from renderDial\",this.props);\r\n        return(\r\n            <Dials\r\n                signal = {signal}\r\n                onChange = {(event) => this.props.onChange(event)}\r\n                onRemove = {(i) => this.props.onRemove(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n        const signalList = []; \r\n        for (let i=0; i < this.props.signals.length; i++){\r\n            signalList.push(\r\n                <div key={\"signal\" + this.props.signals[i].id}> \r\n                    {this.renderDial(this.props.signals[i])} \r\n                </div>\r\n            )\r\n        }\r\n        // console.log(\"Hi from Controls render\",this.props);\r\n        // console.log(signalList);\r\n        return(\r\n            <div className = {styles.dials} >\r\n                {signalList}\r\n                <button id = \"add-signal\" align-content = \"center\" onClick={() => this.props.onAdd()}> Add New Signal </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction FourierCirclesMagPos(props) {\r\n    return(\r\n        <circle\r\n            id = {\"circle_\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*(800/8)}\r\n            cy = {(props.signal.amplitude)*(800/8)}\r\n            transform=\"translate(400,400) scale(1,-1)\"\r\n            r = {20}\r\n            fill = \"black\"\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n            onMouseDown={props.onMouseDown}\r\n            onMouseUp={props.onMouseUp}\r\n            onMouseOut={props.onMouseUp}\r\n            onMouseMove={props.onMouseMove}\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesMagNeg(props) {\r\n    return(\r\n        <circle\r\n            id = {\"circle_-\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*-(800/8)}\r\n            cy = {(props.signal.amplitude)*(800/8)}\r\n            transform=\"translate(400,400) scale(1,-1)\"\r\n            r = {20}\r\n            fill = \"black\"\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n            onMouseDown={props.onMouseDown}\r\n            onMouseUp={props.onMouseUp}\r\n            onMouseOut={props.onMouseUp}\r\n            onMouseMove={props.onMouseMove}\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesPhasePos(props) {\r\n    return(\r\n        <circle\r\n            id = {\"circle_\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*(800/8)}\r\n            cy = {(props.signal.phase)*(700/360)}\r\n            transform=\"translate(400,400) scale(1,-1)\"\r\n            r = {20}\r\n            fill = \"black\"\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n            onMouseDown={props.onMouseDown}\r\n            onMouseUp={props.onMouseUp}\r\n            onMouseOut={props.onMouseUp}\r\n            onMouseMove={props.onMouseMove}\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesPhaseNeg(props) {\r\n    return(\r\n        <circle\r\n            id = {\"circle_-\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*-(800/8)}\r\n            cy = {(props.signal.phase)*-(700/360)}\r\n            transform=\"translate(400,400) scale(1,-1)\"\r\n            r = {20}\r\n            fill = \"black\"\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n            onMouseDown={props.onMouseDown}\r\n            onMouseUp={props.onMouseUp}\r\n            onMouseOut={props.onMouseUp}\r\n            onMouseMove={props.onMouseMove}\r\n        />\r\n    );\r\n}\r\n\r\nclass FourierMagPlot extends React.Component {\r\n\r\n    renderCirclePos(signal){\r\n        return(\r\n            <FourierCirclesMagPos\r\n                signal = {signal}\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderCircleNeg(signal){\r\n        return(\r\n            <FourierCirclesMagNeg\r\n                signal = {signal}\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n        const signals = this.props.signals;\r\n        \r\n           let FourierMagSvg = d3.select(\"#svgFourierMagPlot\")\r\n           let radius = 10;  \r\n   \r\n           const circleList = []; \r\n   \r\n          \r\n           for (let i=0; i < this.props.signals.length; i++){\r\n                if(i ==0){\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i]) \r\n                    )\r\n                }\r\n                else{\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i]),\r\n                        this.renderCircleNeg(this.props.signals[i])\r\n                    )\r\n                }\r\n           }\r\n           \r\n           // Should probably check both axis if they exist before appending\r\n           if(!document.getElementById(\"x_axis_fourierMagPlot\")){\r\n   \r\n               // Create Axis for Frequency Plot\r\n               let xscale_freq = d3.scaleLinear()\r\n                       .domain([-3.5, 3.5]) // This needs to be dynamic\r\n                       .range([50, 750])\r\n   \r\n               let yscale_freq = d3.scaleLinear()\r\n                       .domain([3.5,-3.5]) // This needs to be dynamic\r\n                       .range([50, 750]);\r\n   \r\n               // Add scales to axis\r\n               const xAxisTicks = xscale_freq.ticks()\r\n                                        .filter(tick => Number.isInteger(tick));\r\n    \r\n               let x_axis_freq = d3.axisBottom(xscale_freq)\r\n                .tickValues(xAxisTicks)\r\n                .tickFormat(d3.format(\"d\"));\r\n   \r\n               let y_axis_freq = d3.axisLeft(yscale_freq);\r\n\r\n               FourierMagSvg.append(\"text\")\r\n                            .attr(\"text-anchor\", \"middle\")  \r\n                            .attr(\"x\",400)\r\n                            .attr(\"y\",30)\r\n                            .style(\"font-size\", \"16px\") \r\n                            .style(\"text-decoration\", \"underline\")  \r\n                            .text(\"Fourier Magnitude Plot\");\r\n\r\n               FourierMagSvg.append('g')\r\n                            .attr(\"id\",\"x_axis_fourierMagPlot\")\r\n                            .attr(\"transform\",\"translate(0,400)\")\r\n                            .call(x_axis_freq)\r\n   \r\n               FourierMagSvg.append('g')\r\n                            .attr(\"id\",\"y_axis_fourierMagPlot\")\r\n                            .attr(\"transform\",\"translate(400,0)\")\r\n                            .call(y_axis_freq); \r\n           }\r\n   \r\n           return( \r\n               <svg>\r\n                  {circleList}\r\n               </svg>\r\n           );\r\n       }\r\n}\r\n\r\nclass FourierPhasePlot extends React.Component {\r\n\r\n    renderCirclePos(signal){\r\n        return(\r\n            <FourierCirclesPhasePos\r\n                signal = {signal}\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderCircleNeg(signal){\r\n        return(\r\n            <FourierCirclesPhaseNeg\r\n                signal = {signal}\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n        const signals = this.props.signals;\r\n        \r\n           let FourierPhaseSvg = d3.select(\"#svgFourierPhasePlot\")\r\n           let radius = 10;  \r\n   \r\n           const circleList = []; \r\n   \r\n          \r\n           \r\n           for (let i=0; i < this.props.signals.length; i++){\r\n\r\n                if(i ==0){\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i]) \r\n                    )\r\n                }\r\n                else{\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i]),\r\n                        this.renderCircleNeg(this.props.signals[i])\r\n                    )\r\n                }\r\n               \r\n           }\r\n           \r\n           // Should probably check both axis if they exist before appending\r\n           if(!document.getElementById(\"x_axis_fourierPhasePlot\")){\r\n   \r\n               // Create Axis for Frequency Plot\r\n               let xscale_freq = d3.scaleLinear()\r\n                       .domain([-3.5, 3.5]) // This needs to be dynamic\r\n                       .range([50, 750])\r\n   \r\n               let yscale_freq = d3.scaleLinear()\r\n                       .domain([180,-180]) // This needs to be dynamic\r\n                       .range([50, 750]);\r\n   \r\n               // Add scales to axis\r\n               const xAxisTicks = xscale_freq.ticks()\r\n                                        .filter(tick => Number.isInteger(tick));\r\n    \r\n               let x_axis_freq = d3.axisBottom(xscale_freq)\r\n                .tickValues(xAxisTicks)\r\n                .tickFormat(d3.format(\"d\"));\r\n   \r\n               let y_axis_freq = d3.axisLeft(yscale_freq);\r\n               \r\n               FourierPhaseSvg.append(\"text\")\r\n                            .attr(\"text-anchor\", \"middle\")  \r\n                            .attr(\"x\",400)\r\n                            .attr(\"y\",30)\r\n                            .style(\"font-size\", \"16px\") \r\n                            .style(\"text-decoration\", \"underline\")  \r\n                            .text(\"Fourier Phase Plot\"); \r\n\r\n               FourierPhaseSvg.append('g')\r\n                            .attr(\"id\",\"x_axis_fourierPhasePlot\")\r\n                            .attr(\"transform\",\"translate(0,400)\")\r\n                            .call(x_axis_freq)\r\n   \r\n               FourierPhaseSvg.append('g')\r\n                            .attr(\"id\",\"y_axis_fourierPhasePlot\")\r\n                            .attr(\"transform\",\"translate(400,0)\")\r\n                            .call(y_axis_freq); \r\n           }\r\n   \r\n           return( \r\n               <svg>\r\n                  {circleList}\r\n               </svg>\r\n           );\r\n       }\r\n}\r\n\r\n\r\nclass SinePlot extends React.Component {\r\n    render(){\r\n        const current = this.props.signals;\r\n    \r\n        // Appending svg\r\n        // Check if the element 'svg_id' exists. If not, create new svg, append and draw it\r\n        // I'm not sure if this scales well lol\r\n\r\n        for(let i = 0; i < current.length; i++){\r\n\r\n            let svgID  = 'svg_'\r\n            let pathID = 'path_'\r\n            svgID = svgID.concat(i.toString(10))\r\n            pathID = pathID.concat(i.toString(10))\r\n\r\n            let lineGenerator = d3.line()\r\n                                  .curve(d3.curveNatural);\r\n\r\n            let pathData = lineGenerator(current[i].values);\r\n\r\n            // d3.select('path')\r\n            // .attr('d', pathData);\r\n\r\n             // Create scale\r\n            let xscale = d3.scaleLinear()\r\n                        .domain([0, 2]) // This needs to be dynamic\r\n                        .range([0, 800]);\r\n\r\n            let yscale = d3.scaleLinear()\r\n                        .domain([3.5,-3.5]) // This needs to be dynamic\r\n                        .range([50, 750]);\r\n\r\n            // Add scales to axis\r\n            let x_axis = d3.axisBottom()\r\n                .scale(xscale);\r\n\r\n            let y_axis = d3.axisLeft()\r\n                .scale(yscale);\r\n\r\n            // For now, if svgID exists, then just redraw\r\n            if(document.getElementById(svgID)){\r\n                // console.log(\"Hi from redraw\")\r\n                // console.log(pathID)\r\n                d3.select(\"#\"+pathID).attr(\"d\", pathData)  \r\n                  \r\n            }\r\n            \r\n            // If svgID doesn't exist, then add it to the DOM\r\n\r\n            if(!document.getElementById(svgID)){\r\n                //The SVG Container\r\n                const svgContainer = d3.select(\"#sinePlotsID\").append(\"svg\")\r\n                .attr(\"id\",svgID)\r\n                .attr(\"width\", svgContainerWidth)\r\n                .attr(\"height\", svgContainerHeight)\r\n                .attr(\"style\",\"position: absolute\", \"left: 5%\")\r\n                .attr(\"style\", \"border: 1px solid black\")\r\n                // .attr(\"y\",i*svgContainerHeight)\r\n                //.attr(\"y\", 200)\r\n                .attr(\"top\",\"100\")\r\n\r\n                //The line SVG Path we draw\r\n                const lineGraph = svgContainer.append(\"path\")\r\n                .attr(\"id\",pathID)\r\n                //.attr(\"datum\", current[i].values)\r\n                //.attr(\"d\", line.interpolate(\"basis\"))\r\n                .attr(\"d\", pathData)\r\n                .attr(\"stroke\", \"blue\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n\r\n                svgContainer.append('g')\r\n                    .attr(\"transform\",\"translate(0,400)\")\r\n                    .call(x_axis);\r\n                \r\n                svgContainer.append('g')\r\n                .attr(\"transform\",\"translate(50,0)\")\r\n                    .call(y_axis);\r\n            }          \r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass SumPlot extends React.Component {\r\n\r\n    render(){\r\n\r\n        // This is brute force?\r\n        let sumSignals = []; \r\n\r\n        // This will break if the resolution breaks lool\r\n        for(let k = 0; k < 800; k++){\r\n            sumSignals.push([0,0]);\r\n        }\r\n\r\n        // Looping through all the signals\r\n        for (let i=0; i < this.props.signals.length; i++){\r\n\r\n\r\n            // Looping through the signal values\r\n            for(let j=0; j < this.props.signals[i].values.length; j++){\r\n\r\n                //sumSignals[j] = this.props.signals[i].values[j];\r\n                sumSignals[j][0] = this.props.signals[i].values[j][0];\r\n                sumSignals[j][1] += this.props.signals[i].values[j][1];\r\n            }\r\n            \r\n        }\r\n\r\n        // There is a way to scale this to the svg dimenesions rather than hardcoding it\r\n        for (let n =0; n < sumSignals.length; n++){\r\n            sumSignals[n][1] = sumSignals[n][1] - (this.props.signals.length-1)*(400)\r\n        }\r\n        \r\n        // console.log(\"sumSignals:\", sumSignals)\r\n\r\n        let lineGenerator = d3.line()\r\n          .curve(d3.curveNatural);\r\n\r\n        let pathData = lineGenerator(sumSignals);\r\n        // We should probably also store this in the React states in the Home class \r\n\r\n        // Create scale\r\n        let xscale = d3.scaleLinear()\r\n        .domain([0, 2]) // This needs to be dynamic\r\n        .range([0, 800]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n        .domain([3.5,-3.5]) // This needs to be dynamic\r\n        .range([50, 750]);\r\n\r\n        // Add scales to axis\r\n        let x_axis = d3.axisBottom()\r\n        .scale(xscale);\r\n\r\n        let y_axis = d3.axisLeft()\r\n        .scale(yscale);\r\n\r\n        //The line SVG Path we draw\r\n\r\n        // If exists, update\r\n        if(document.getElementById(\"path_Sum\")){\r\n            d3.select(\"#\"+\"path_Sum\").attr(\"d\", pathData)  \r\n               \r\n        }\r\n        \r\n        // Draws path if it doesn't exist\r\n        if(!document.getElementById(\"path_Sum\")){\r\n             d3.select(\"#svgSumPlot\").append(\"path\")\r\n                .attr(\"id\",\"path_Sum\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"stroke\", \"blue\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n\r\n            const svgSumPlot = d3.select(\"#svgSumPlot\")\r\n\r\n                svgSumPlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",400)\r\n                .attr(\"y\",30)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sum of Signals Plot\");\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\",\"translate(0,400)\")\r\n                .call(x_axis);\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\",\"translate(20,0)\")\r\n                .call(y_axis)\r\n                .attr(\"transform\",\"translate(50,0)\");\r\n                \r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class FourierCoefficients extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            signals: [\r\n                /* Example signal object \r\n                {\r\n                id: 0,\r\n                amplitude: 1,\r\n                frequency: 1,\r\n                values: this.generateSignal(1,1),\r\n                dragging: false,    \r\n                },\r\n                */\r\n            ],\r\n            circles:[\r\n            ],\r\n        };\r\n        // This binding is necessary to make `this.` work in the callback   \r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseUp = this.handleMouseUp.bind(this);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n        this.handleMouseMoveFourierMag = this.handleMouseMoveFourierMag.bind(this);\r\n        this.handleMouseMoveFourierPhase = this.handleMouseMoveFourierPhase.bind(this);\r\n    }\r\n    \r\n    addSignal(){\r\n        const signals = this.state.signals;\r\n\r\n        // Once this.setState has been called, it'll call render() to render straight away\r\n        this.setState({\r\n            signals: signals.concat([{  // Just concatenating array of JSON\r\n                id: signals.length,\r\n                amplitude: 0,   // Should be user input\r\n                frequency: signals.length,   // Should be user input\r\n                phase: 0,\r\n                values: this.generateSignal(0,signals.length,0),\r\n                dragging: false,    \r\n            },]),\r\n        });        \r\n\r\n\r\n    }\r\n\r\n    removeSignal(i){\r\n        // Need to find signal id from the array and delete, then re-update id's\r\n        const signals = this.state.signals;\r\n\r\n\r\n        console.log(\"Hi from removeSignal\");    \r\n        console.log(i)\r\n        console.log(\"Before: \", signals);\r\n        signals.splice(i,1)\r\n        console.log(\"After:\", signals);\r\n\r\n        for(let n = 0; n< this.state.signals.length; n++){\r\n            signals[n].id = n;\r\n        }        \r\n\r\n        // Find the svgId and pathID and delete from DOM\r\n\r\n        let svgID  = 'svg_'\r\n        let pathID = 'path_'\r\n        svgID = svgID.concat(i.toString(10))\r\n        pathID = pathID.concat(i.toString(10))\r\n\r\n        d3.select(\"#\"+svgID).remove();\r\n\r\n        this.setState({\r\n            signals: signals,\r\n        });\r\n        console.log(this.state.signals);\r\n\r\n    \r\n    }\r\n\r\n// From James:\r\n// If you want to find the fourier transform of a complex signal, just change the sin and cosines into exponetial form (phasor)\r\n// Then just read of the phasor's coefficient for magnitude and frequency. \r\n// E.g. for X*exp(j*omega*t), X and omega is your magnitude and frequency to be plotted in the frequency domain\r\n// So we don't have to compute FFT's on the fly (because then it'll be a performance vs memroy tradeoff). ^ If the above works well enough then we'll stick with it since it's much less restrictive\r\n\r\n    generateSignal(amplitude, frequency, phase){\r\n        // Generating path data\r\n        // should preallocate array\r\n        let points = [];\r\n        // decide scaling later i guess\r\n        const svgContainerHeight = 800;\r\n        const svgContainerWidth = 800;\r\n        let scale = -100;\r\n\r\n        // Sampling frequency: 50Hz ?\r\n        let Fs = 80;\r\n        // let Ts = 1/Fs;\r\n\r\n        let Ts = Math.PI / 200;\r\n\r\n        // 1 period = 1 second\r\n        // 1 period = 400 pixels => Ts = 400 samples per second\r\n        // 1 Hz = 2pi radians\r\n\r\n        // Sampling frequency = samples/second\r\n        // 1 sample per 1/400 second (Ts = 1/400)\r\n        // Fs = 2pi * (1/400)\r\n        // Fs = pi / 200\r\n\r\n        // Frequency is in Hz\r\n        // This is bascially an inverse FFT \r\n        // i is basically our t (1 unit of time)\r\n        for(let i = 0; i< svgContainerWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude*Math.sin(Ts*frequency*i + (phase * (Math.PI / 180) )) + svgContainerHeight/2];\r\n        }\r\n        // console.log(points)\r\n        return points;\r\n    }\r\n\r\n    generateDC(amplitude){\r\n        let points = [];\r\n        // decide scaling later i guess\r\n        const svgContainerHeight = 800;\r\n        const svgContainerWidth = 800;\r\n        let scale = -100;\r\n\r\n        for(let i = 0; i< svgContainerWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude + svgContainerHeight/2 ];\r\n        }\r\n\r\n        return points\r\n    }\r\n\r\n    updateDials(){\r\n        const signals = this.state.signals;\r\n\r\n        for(let i = 0; i< signals.length; i++){\r\n            document.getElementById(\"signal\" + signals[i].id + \"_AmpText\").value = signals[i].amplitude;\r\n            document.getElementById(\"signal\" + signals[i].id + \"_FreqText\").value = signals[i].frequency;\r\n        }\r\n    }\r\n\r\n    handleChange(event){\r\n\r\n\r\n        const signals = this.state.signals;\r\n        const inputType = event.target.getAttribute('input_type');\r\n        const signalID = event.target.getAttribute('signal_id'); // Signal ID Number\r\n        let value = parseFloat(event.target.value);   \r\n\r\n        // Text Form can exceed the maximum limit of 10?\r\n\r\n        if((inputType === \"AmpDial\") || (inputType === \"AmpText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                // DC Case\r\n                if(signalID == 0){\r\n                    signals[signalID].amplitude = value; \r\n                    signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n                    document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n                }\r\n                // All Other cases\r\n                else{\r\n                    signals[signalID].amplitude = value;                 \r\n                    signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                    document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n                }     \r\n            }\r\n        }\r\n        else if ((inputType === \"PhaseDial\") || (inputType === \"PhaseText\")){\r\n            console.log(\"HELLO\")\r\n            console.log(signals[signalID].amplitude)\r\n            console.log(signals[signalID].phase)\r\n            // The problem with the DC value is probably because we're calling generateSignal()\r\n            // insteaed of generateDC when the dials are changed?\r\n            // I guess these are all deliberate bugs (because we're porting code)\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                // DC Case\r\n                if(signalID == 0){\r\n                    signals[signalID].phase = value; \r\n                    signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n                    document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n                }\r\n                 // All Other cases\r\n                else{\r\n                    signals[signalID].phase = value; \r\n                    signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                    document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n                }\r\n            }\r\n        }     \r\n\r\n        // console.log(signals);\r\n        this.setState({\r\n                signals: signals,   \r\n                // Rewriting the whole array of objects may be expensive but it works \r\n                // Could just access the key and change it's value rather than doing a whole update\r\n                // This is actually using a lot of memory though? F12 -> Memory tab\r\n            }   \r\n        );\r\n\r\n    }\r\n\r\n    \r\n    handleMouseDown(e){\r\n        console.log(\"clicked\")\r\n\r\n        e.preventDefault();\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n\r\n        signals[signalID].dragging = true;\r\n\r\n        this.setState({\r\n            signals: signals,   \r\n            }\r\n        );   \r\n    }\r\n\r\n    handleMouseUp(e){\r\n        console.log(\"click released\")\r\n        // this.state.dragging = false;\r\n        // this.state.coords = {};\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n        console.log(e.type)\r\n        if(e.type == 'mouseout' && signals[signalID].dragging) {\r\n            console.log(\"mouse went out\")\r\n            return;\r\n        }\r\n\r\n        signals[signalID].dragging = false;\r\n        \r\n        this.setState({\r\n            signals: signals,   \r\n            }\r\n        );\r\n        \r\n    }\r\n\r\n    // Base Mouse move function. Used in Frequency Domain. Not currently in use in this .js file\r\n    handleMouseMove(e) {\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n\r\n        //If we are dragging\r\n          if (signals[signalID].dragging) {\r\n              e.preventDefault();\r\n\r\n              console.log(e)\r\n              console.log(e.target)\r\n              console.log(\"clientX:\",e.clientX)\r\n              console.log(\"clientY:\",e.clientY)\r\n              // console.log(e.target.parentNode.parentNode)\r\n            let  rect = e.target.parentNode.parentNode.getBoundingClientRect();  \r\n\r\n            console.log(rect.left);\r\n            console.log(rect.top);\r\n\r\n\r\n            // Maybe should seperate coordinates and freq/amp values\r\n             signals[signalID].frequency = (e.clientX - rect.left - 400) / 100;\r\n             signals[signalID].amplitude = - (e.clientY - rect.top - 400) / 100;\r\n             signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n\r\n\r\n            // We should set position limits\r\n\r\n            console.log(signals[signalID].frequency)\r\n            console.log(signals[signalID].amplitude)\r\n\r\n            console.log(this)\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n                }\r\n            );  \r\n        }\r\n    }\r\n\r\n    handleMouseMoveFourierMag(e) {\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n\r\n        //If we are dragging\r\n          if (signals[signalID].dragging) {\r\n              e.preventDefault();\r\n\r\n\r\n            console.log(e.target)\r\n            let  rect = e.target.parentNode.parentNode.getBoundingClientRect();  \r\n\r\n            // Maybe should seperate coordinates and freq/amp values\r\n             signals[signalID].frequency = signals[signalID].id;\r\n             signals[signalID].amplitude = - (e.clientY - rect.top - 400) / (800/8);    // 800: svg height, 8: max axis size (-4 to 4)\r\n             signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n\r\n            // We should set position limits\r\n\r\n            // Checking if signal is the DC value\r\n            if(signalID == 0){\r\n                signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n            }\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n                }\r\n            );  \r\n        }\r\n    }\r\n    \r\n    handleMouseMoveFourierPhase(e) {\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n        console.log(\"signalID: \",signalID)\r\n\r\n        //If we are dragging\r\n          if (signals[signalID].dragging) {\r\n              e.preventDefault();\r\n\r\n\r\n            console.log(e.target)\r\n            let  rect = e.target.parentNode.parentNode.getBoundingClientRect();  \r\n\r\n            // Maybe should seperate coordinates and freq/amp values\r\n             signals[signalID].frequency = signals[signalID].id;\r\n             signals[signalID].phase = parseInt( - (e.clientY - rect.top - 400) / (700/360) );\r\n             signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n\r\n            // We should set position limits\r\n\r\n            // Checking if signal is the DC value\r\n            if(signalID == 0){\r\n                signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n            }\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n                }\r\n            );  \r\n        }\r\n    }\r\n/*\r\n    drawSignals(){\r\n        const current = this.state.signals;\r\n    \r\n        // Appending svg\r\n        // Check if the element 'svg_id' exists. If not, create new svg, append and draw it\r\n        // I'm not sure if this scales well lol\r\n\r\n        for(let i = 0; i < current.length; i++){\r\n\r\n            let svgID  = 'svg_'\r\n            let pathID = 'path_'\r\n            svgID = svgID.concat(i.toString(10))\r\n            pathID = pathID.concat(i.toString(10))\r\n\r\n            let lineGenerator = d3.line()\r\n                                  .curve(d3.curveNatural);\r\n\r\n            let pathData = lineGenerator(current[i].values);\r\n\r\n            // d3.select('path')\r\n            // .attr('d', pathData);\r\n\r\n             // Create scale\r\n            let xscale = d3.scaleLinear()\r\n                        .domain([0, 2]) // This needs to be dynamic\r\n                        .range([0, 800]);\r\n\r\n            let yscale = d3.scaleLinear()\r\n                        .domain([3.5,-3.5]) // This needs to be dynamic\r\n                        .range([50, 750]);\r\n\r\n            // Add scales to axis\r\n            let x_axis = d3.axisBottom()\r\n                .scale(xscale);\r\n\r\n            let y_axis = d3.axisLeft()\r\n                .scale(yscale);\r\n\r\n            // For now, if svgID exists, then just redraw\r\n            if(document.getElementById(svgID)){\r\n                // console.log(\"Hi from redraw\")\r\n                // console.log(pathID)\r\n                d3.select(\"#\"+pathID).attr(\"d\", pathData)  \r\n                  \r\n            }\r\n            \r\n            // If svgID doesn't exist, then add it to the DOM\r\n\r\n            if(!document.getElementById(svgID)){\r\n                //The SVG Container\r\n                const svgContainer = d3.select(\"#sinePlotsID\").append(\"svg\")\r\n                .attr(\"id\",svgID)\r\n                .attr(\"width\", svgContainerWidth)\r\n                .attr(\"height\", svgContainerHeight)\r\n                .attr(\"style\",\"position: absolute\", \"left: 5%\")\r\n                .attr(\"style\", \"border: 1px solid black\")\r\n                // .attr(\"y\",i*svgContainerHeight)\r\n                //.attr(\"y\", 200)\r\n                .attr(\"top\",\"100\")\r\n\r\n                //The line SVG Path we draw\r\n                const lineGraph = svgContainer.append(\"path\")\r\n                .attr(\"id\",pathID)\r\n                //.attr(\"datum\", current[i].values)\r\n                //.attr(\"d\", line.interpolate(\"basis\"))\r\n                .attr(\"d\", pathData)\r\n                .attr(\"stroke\", \"blue\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n\r\n                svgContainer.append('g')\r\n                    .attr(\"transform\",\"translate(0,400)\")\r\n                    .call(x_axis);\r\n                \r\n                svgContainer.append('g')\r\n                .attr(\"transform\",\"translate(50,0)\")\r\n                    .call(y_axis);\r\n            }          \r\n        }\r\n    }\r\n*/\r\n    render() {\r\n\r\n    const current = this.state.signals;\r\n\r\n    // this.drawSignals();\r\n\r\n// transform = {{translate:\"(50%,50%)\"}}>\r\n    return (\r\n            <div className = {styles.container}>\r\n\r\n                <div className = {styles.sinePlots} id =\"sinePlotsID\">\r\n                    <SinePlot\r\n                        signals = {current}\r\n                    />\r\n                </div>\r\n\r\n                <div className = {styles.fourierPhasePlots} id =\"fourierPhasePlotsID\">\r\n                    <svg id=\"svgFourierPhasePlot\" width=\"800\" height=\"800\"  \r\n                        style = {{\r\n                            position: \"relative\", \r\n                            top: \"0%\",\r\n                            left: \"0%\",\r\n                            transform: \"translate(0%, 0%)\",\r\n                            border: '1px solid black',\r\n                            \r\n                            }}> \r\n                    \r\n                        <FourierPhasePlot\r\n                            signals = {current}\r\n                            onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                            onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                            onMouseOut = {(event) => this.handleMouseUp(event)}\r\n                            onMouseMove = {(event) => this.handleMouseMoveFourierPhase(event)}\r\n                        />\r\n                    </svg>\r\n                </div>\r\n\r\n                <div className = {styles.fourierMagPlots} id =\"fourierMagPlotsID\">\r\n                    <svg id=\"svgFourierMagPlot\" width=\"800\" height=\"800\"  \r\n                        style = {{\r\n                            position: \"relative\", \r\n                            top: \"0%\",\r\n                            left: \"0%\",\r\n                            transform: \"translate(0%, 0%)\",\r\n                            border: '1px solid black',\r\n                            \r\n                            }}> \r\n                    \r\n                        <FourierMagPlot\r\n                            signals = {current}\r\n                            onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                            onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                            onMouseOut = {(event) => this.handleMouseUp(event)}\r\n                            onMouseMove = {(event) => this.handleMouseMoveFourierMag(event)}\r\n                        />\r\n                    </svg>\r\n                </div>\r\n\r\n                <div className = {styles.sumPlots} id =\"sumPlotsID\">\r\n                    <svg id=\"svgSumPlot\" width=\"800\" height=\"800\" \r\n                        style = {{\r\n                            position: \"relative\", \r\n                            top: \"0%\",\r\n                            left: \"0%\",\r\n                            transform: \"translate(0%, 0%)\",\r\n                            border: '1px solid black'\r\n                            }}> \r\n                        <SumPlot\r\n                            signals = {current}\r\n                        />\r\n                    </svg>\r\n                </div>\r\n\r\n                <div className = {styles.controls}>\r\n                    \r\n                        <Controls\r\n                            signals = {current}\r\n                            onChange = {(event) => this.handleChange(event)}\r\n                            onAdd = {() => this.addSignal()}\r\n                            onRemove = {(i) => this.removeSignal(i)}\r\n                        />\r\n                    \r\n                </div>\r\n            </div>\r\n      );\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}