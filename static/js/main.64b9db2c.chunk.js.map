{"version":3,"sources":["FrequencyDomain.module.css","App.module.css","FourierCoefficients.module.css","FourierCoefficients.js","FrequencyDomain.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dials","props","className","styles","signal_container","signal_info","signal","id","onClick","i","onRemove","signal_props","amplitude","signal_id","input_type","type","min","max","value","step","onChange","phase","Controls","event","signalList","this","signals","length","push","key","renderDial","dials","align-content","onAdd","React","Component","FourierCirclesMagPos","divHeight","document","getElementById","getBoundingClientRect","height","divWidth","width","plotWidth","cx","cy","transform","r","fill","stroke","strokeWidth","onMouseDown","onMouseUp","onMouseOut","onMouseMove","FourierCirclesMagNeg","FourierCirclesPhasePos","plotHeight","FourierCirclesPhaseNeg","FourierMagPlot","FourierMagSvg","d3","circleList","renderCirclePos","renderCircleNeg","xscale_freq","domain","range","yscale_freq","xAxisTicks","ticks","filter","tick","Number","isInteger","x_axis_freq","tickValues","tickFormat","y_axis_freq","append","attr","style","text","call","FourierPhasePlot","FourierPhaseSvg","SinePlot","current","svgID","pathID","concat","toString","pathData","curve","lineGenerator","values","xscale","yscale","x_axis","scale","y_axis","svgSinePlot","SumPlot","sumSignals","console","log","k","j","n","svgSumPlot","FourierCoefficients","state","circles","handleMouseDown","bind","handleMouseUp","handleMouseMove","handleMouseMoveFourierMag","handleMouseMoveFourierPhase","setState","frequency","generateSignal","dragging","splice","remove","points","Ts","Math","PI","sin","inputType","target","getAttribute","signalID","parseFloat","isNaN","generateDC","e","preventDefault","clientX","clientY","rect","parentNode","left","top","parseInt","container","timePlots","sinePlots","sumPlots","position","border","otherPlots","fourierPhasePlots","fourierMagPlots","controls","handleChange","addSignal","removeSignal","signal_dials","Circles","FrequencyPlot","freqSvg","renderCircle","FrequencyDomain","freqPlots","App","navbar","tab","to","exact","path","About","Home","ReactDOM","render","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64b9db2c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"FrequencyDomain_home__30fuX\",\"container\":\"FrequencyDomain_container__DTkEc\",\"navbar\":\"FrequencyDomain_navbar__2nfHk\",\"tab\":\"FrequencyDomain_tab__2HYGI\",\"controls\":\"FrequencyDomain_controls__3_b1P\",\"dials\":\"FrequencyDomain_dials__1_C6C\",\"signal_container\":\"FrequencyDomain_signal_container__2wtJT\",\"signal_info\":\"FrequencyDomain_signal_info__2oOve\",\"signal_props\":\"FrequencyDomain_signal_props__3Psyr\",\"signal_dials\":\"FrequencyDomain_signal_dials__36fR_\",\"sinePlots\":\"FrequencyDomain_sinePlots__1Lmk_\",\"otherPlots\":\"FrequencyDomain_otherPlots__2dZs_\",\"freqPlots\":\"FrequencyDomain_freqPlots__2WRIF\",\"sumPlots\":\"FrequencyDomain_sumPlots__9CQRp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"App_home__gVUmA\",\"container\":\"App_container__2fAhY\",\"navbar\":\"App_navbar__3YSH8\",\"tab\":\"App_tab__2izV7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"FourierCoefficients_home__10kQG\",\"container\":\"FourierCoefficients_container__kd25g\",\"navbar\":\"FourierCoefficients_navbar__2pTv4\",\"tab\":\"FourierCoefficients_tab__8pHCY\",\"controls\":\"FourierCoefficients_controls___EOHp\",\"dials\":\"FourierCoefficients_dials__1zijK\",\"signal_container\":\"FourierCoefficients_signal_container__1Of7C\",\"signal_info\":\"FourierCoefficients_signal_info__2oYZ9\",\"signal_props\":\"FourierCoefficients_signal_props__1Kcya\",\"signal_dials\":\"FourierCoefficients_signal_dials__kLbm8\",\"timePlots\":\"FourierCoefficients_timePlots__vs39U\",\"sinePlots\":\"FourierCoefficients_sinePlots__NqB9U\",\"otherPlots\":\"FourierCoefficients_otherPlots__AqeTC\",\"fourierMagPlots\":\"FourierCoefficients_fourierMagPlots__1Fesw\",\"fourierPhasePlots\":\"FourierCoefficients_fourierPhasePlots__3rZM3\",\"sumPlots\":\"FourierCoefficients_sumPlots__DMOR_\"};","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styles from './FourierCoefficients.module.css'; \r\nimport * as d3 from \"d3\";\r\n\r\nfunction Dials(props) {\r\n    return(\r\n        <div className={styles.signal_container}>\r\n            <div className={styles.signal_info}>\r\n                <div>ID: {props.signal.id}</div>\r\n                <button id = \"remove-signal\" onClick={(i) => props.onRemove(props.signal.id)}> Remove Signal </button>\r\n            </div>\r\n            <div className={styles.signal_props}>\r\n                <div>Amplitude: {props.signal.amplitude}</div>\r\n            </div>\r\n            <div className = {styles.signal_props}>\r\n                <div>\r\n                    <input \r\n                    id = {\"signal\" + props.signal.id + \"_AmpDial\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpDial\"}\r\n                    type =\"range\" \r\n                    min={-5} \r\n                    max ={5} \r\n                    value = {props.signal.amplitude} \r\n                    step={0.1}\r\n                    onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                    id = {\"signal\" + props.signal.id + \"_AmpText\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpText\"}\r\n                    type = \"number\"  \r\n                    min = {-5}\r\n                    max = {5}\r\n                    onChange={props.onChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div className={styles.signal_props}>\r\n                <div>Phase: {props.signal.phase}</div>\r\n            </div>\r\n            <div className={styles.signal_props}>\r\n                <div>\r\n                    <input \r\n                        id = {\"signal\" + props.signal.id + \"_PhaseDial\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseDial\"}\r\n                        type =\"range\" \r\n                        min={-180} \r\n                        max ={180} \r\n                        value = {props.signal.phase} \r\n                        step={1}\r\n                        onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                        id = {\"signal\" + props.signal.id + \"_PhaseText\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseText\"}\r\n                        type = \"number\"  \r\n                        min = {-180}\r\n                        max = {180}\r\n                        onChange={props.onChange}\r\n                    />\r\n                </div>        \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Controls extends React.Component {\r\n\r\n    renderDial(signal){\r\n        return(\r\n            <Dials\r\n                signal = {signal}\r\n                onChange = {(event) => this.props.onChange(event)}\r\n                onRemove = {(i) => this.props.onRemove(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n        const signalList = []; \r\n        for (let i=0; i < this.props.signals.length; i++){\r\n            signalList.push(\r\n                <div key={\"signal\" + this.props.signals[i].id}> \r\n                    {this.renderDial(this.props.signals[i])} \r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            <div className = {styles.dials} >\r\n                <button id = \"add-signal\" align-content = \"center\" onClick={() => this.props.onAdd()}> Add New Signal </button>\r\n                {signalList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction FourierCirclesMagPos(props) {\r\n    let divHeight = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*(plotWidth/8)}\r\n            cy = {(props.signal.amplitude)*(divHeight/8)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = \"black\"\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n            onMouseDown={props.onMouseDown}\r\n            onMouseUp={props.onMouseUp}\r\n            onMouseOut={props.onMouseUp}\r\n            onMouseMove={props.onMouseMove}\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesMagNeg(props) {\r\n    let divHeight = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_-\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*-(plotWidth/8)} // 8 is because our x-axis is divided into 8 sections \r\n            cy = {(props.signal.amplitude)*(divHeight/8)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = \"black\"\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n            onMouseDown={props.onMouseDown}\r\n            onMouseUp={props.onMouseUp}\r\n            onMouseOut={props.onMouseUp}\r\n            onMouseMove={props.onMouseMove}\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesPhasePos(props) {\r\n    let divHeight = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*(plotWidth/8)} // 8 is because our x-axis is divided into 8 sections \r\n            cy = {(props.signal.phase)*(plotHeight/360)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = \"black\"\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n            onMouseDown={props.onMouseDown}\r\n            onMouseUp={props.onMouseUp}\r\n            onMouseOut={props.onMouseUp}\r\n            onMouseMove={props.onMouseMove}\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesPhaseNeg(props) {\r\n    let divHeight = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_-\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*-(plotWidth/8)} // 8 is because our x-axis is divided into 8 sections \r\n            cy = {(props.signal.phase)*(plotHeight/360)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = \"black\"\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n            onMouseDown={props.onMouseDown}\r\n            onMouseUp={props.onMouseUp}\r\n            onMouseOut={props.onMouseUp}\r\n            onMouseMove={props.onMouseMove}\r\n        />\r\n    );\r\n}\r\n\r\nclass FourierMagPlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n    }\r\n\r\n    renderCirclePos(signal){\r\n        return(\r\n            <FourierCirclesMagPos\r\n                signal = {signal}\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderCircleNeg(signal){\r\n        return(\r\n            <FourierCirclesMagNeg\r\n                signal = {signal}\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n        const signals = this.props.signals;\r\n        \r\n           let FourierMagSvg = d3.select(\"#svgFourierMagPlot\")\r\n           let radius = 10;  \r\n   \r\n           const circleList = []; \r\n   \r\n          \r\n           for (let i=0; i < this.props.signals.length; i++){\r\n                if(i ==0){\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i]) \r\n                    )\r\n                }\r\n                else{\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i]),\r\n                        this.renderCircleNeg(this.props.signals[i])\r\n                    )\r\n                }\r\n           }\r\n           \r\n           // Should probably check both axis if they exist before appending\r\n           if(!document.getElementById(\"x_axis_fourierMagPlot\")){\r\n   \r\n               // Create Axis for Frequency Plot\r\n               let xscale_freq = d3.scaleLinear()\r\n                       .domain([-4, 4]) // This needs to be dynamic\r\n                       .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n   \r\n               let yscale_freq = d3.scaleLinear()\r\n                       .domain([4,-4]) // This needs to be dynamic\r\n                       .range([ (1/10)*this.height, (9/10)*this.height ]);\r\n   \r\n               // Add scales to axis\r\n               const xAxisTicks = xscale_freq.ticks()\r\n                                        .filter(tick => Number.isInteger(tick));\r\n    \r\n               let x_axis_freq = d3.axisBottom(xscale_freq)\r\n                .tickValues(xAxisTicks)\r\n                .tickFormat(d3.format(\"d\"));\r\n   \r\n               let y_axis_freq = d3.axisLeft(yscale_freq);\r\n\r\n               FourierMagSvg.append(\"text\")\r\n                            .attr(\"text-anchor\", \"middle\")  \r\n                            .attr(\"x\",this.width/2)\r\n                            .attr(\"y\",this.height/20)\r\n                            .style(\"font-size\", \"16px\") \r\n                            .style(\"text-decoration\", \"underline\")  \r\n                            .text(\"Fourier Magnitude Plot\");\r\n\r\n               FourierMagSvg.append('g')\r\n                            .attr(\"id\",\"x_axis_fourierMagPlot\")\r\n                            .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n                            .call(x_axis_freq)\r\n   \r\n               FourierMagSvg.append('g')\r\n                            .attr(\"id\",\"y_axis_fourierMagPlot\")\r\n                            .attr(\"transform\",\"translate(\" + this.width/2 + \",0)\")\r\n                            .call(y_axis_freq); \r\n           }\r\n   \r\n           return( \r\n               <svg>\r\n                  {circleList}\r\n               </svg>\r\n           );\r\n       }\r\n}\r\n\r\nclass FourierPhasePlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n    }\r\n\r\n    renderCirclePos(signal){\r\n        return(\r\n            <FourierCirclesPhasePos\r\n                signal = {signal}\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderCircleNeg(signal){\r\n        return(\r\n            <FourierCirclesPhaseNeg\r\n                signal = {signal}\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n        const signals = this.props.signals;\r\n        \r\n           let FourierPhaseSvg = d3.select(\"#svgFourierPhasePlot\")\r\n           let radius = 10;  \r\n   \r\n           const circleList = []; \r\n   \r\n          \r\n           \r\n           for (let i=0; i < this.props.signals.length; i++){\r\n\r\n                if(i ==0){\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i]) \r\n                    )\r\n                }\r\n                else{\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i]),\r\n                        this.renderCircleNeg(this.props.signals[i])\r\n                    )\r\n                }\r\n               \r\n           }\r\n           \r\n           // Should probably check both axis if they exist before appending\r\n           if(!document.getElementById(\"x_axis_fourierPhasePlot\")){\r\n   \r\n               // Create Axis for Frequency Plot\r\n               let xscale_freq = d3.scaleLinear()\r\n                       .domain([-4, 4]) // This needs to be dynamic\r\n                       .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n   \r\n               let yscale_freq = d3.scaleLinear()\r\n                       .domain([180,-180]) // This needs to be dynamic\r\n                       .range([ (1/10)*this.height, (9/10)*this.height ]);\r\n   \r\n               // Add scales to axis\r\n               const xAxisTicks = xscale_freq.ticks()\r\n                                        .filter(tick => Number.isInteger(tick));\r\n    \r\n               let x_axis_freq = d3.axisBottom(xscale_freq)\r\n                .tickValues(xAxisTicks)\r\n                .tickFormat(d3.format(\"d\"));\r\n   \r\n               let y_axis_freq = d3.axisLeft(yscale_freq);\r\n               \r\n               FourierPhaseSvg.append(\"text\")\r\n                            .attr(\"text-anchor\", \"middle\")  \r\n                            .attr(\"x\",this.width/2)\r\n                            .attr(\"y\",this.height/20)\r\n                            .style(\"font-size\", \"16px\") \r\n                            .style(\"text-decoration\", \"underline\")  \r\n                            .text(\"Fourier Phase Plot\"); \r\n\r\n               FourierPhaseSvg.append('g')\r\n                            .attr(\"id\",\"x_axis_fourierPhasePlot\")\r\n                            .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n                            .call(x_axis_freq)\r\n   \r\n               FourierPhaseSvg.append('g')\r\n                            .attr(\"id\",\"y_axis_fourierPhasePlot\")\r\n                            .attr(\"transform\",\"translate(\" + this.width/2 + \",0)\")\r\n                            .call(y_axis_freq); \r\n           }\r\n   \r\n           return( \r\n               <svg>\r\n                  {circleList}\r\n               </svg>\r\n           );\r\n       }\r\n}\r\n\r\n\r\nclass SinePlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"sinePlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"sinePlotsID\").getBoundingClientRect().width;\r\n    }\r\n\r\n    render(){\r\n        const current = this.props.signals;\r\n    \r\n        // Appending svg\r\n        // Check if the element 'svg_id' exists. If not, create new svg, append and draw it\r\n        // Not sure if this scales well\r\n        for(let i = 0; i < current.length; i++){\r\n\r\n            let svgID  = 'svg_'\r\n            let pathID = 'path_'\r\n            svgID = svgID.concat(i.toString(10))\r\n            pathID = pathID.concat(i.toString(10))\r\n\r\n            let lineGenerator = d3.line()\r\n                                  .curve(d3.curveNatural);\r\n\r\n            let pathData = lineGenerator(current[i].values);\r\n\r\n             // Create scale\r\n            let xscale = d3.scaleLinear()\r\n                        .domain([0, 2]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n            let yscale = d3.scaleLinear()\r\n                        .domain([4,-4]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.height, (9/10)*this.height ]);\r\n\r\n            // Add scales to axis\r\n            let x_axis = d3.axisBottom()\r\n                .scale(xscale);\r\n\r\n            let y_axis = d3.axisLeft()\r\n                .scale(yscale);\r\n\r\n            // For now, if svgID exists, then just redraw\r\n            if(document.getElementById(svgID)){\r\n                d3.select(\"#\"+pathID).attr(\"d\", pathData)  \r\n            }\r\n            \r\n            // If svgID doesn't exist, then add it to the DOM\r\n\r\n            if(!document.getElementById(svgID)){\r\n                //The SVG Container\r\n                const svgSinePlot = d3.select(\"#sinePlotsID\").append(\"svg\")\r\n                .attr(\"id\",svgID)\r\n                .attr(\"width\", \"40vw\")\r\n                .attr(\"height\", \"45vh\")\r\n                .attr(\"transform\",\"translate(10)\")\r\n                .attr(\"style\",\"position: absolute\")\r\n                .attr(\"style\", \"border: 1px solid black\")\r\n                .attr(\"top\",\"100px\")\r\n                .attr(\"left\",\"50px\")\r\n\r\n                svgSinePlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",this.width/2)\r\n                .attr(\"y\",this.height/20)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sine Plot \" + i);\r\n\r\n                //The line SVG Path we draw\r\n                svgSinePlot.append(\"path\")\r\n                .attr(\"id\",pathID)\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"stroke\", \"blue\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n                .call(x_axis);\r\n                \r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .call(y_axis);\r\n            }          \r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass SumPlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n    }\r\n\r\n    render(){\r\n\r\n        let sumSignals = []; \r\n        let plotWidth = 0.8 * this.width;\r\n        console.log(this.height);\r\n        console.log(this.width);\r\n\r\n        // This will break if we change plotWidth elsewhere \r\n        for(let k = 0; k < plotWidth; k++){\r\n            sumSignals.push([0,0]);\r\n        }\r\n\r\n        // Looping through all the signals\r\n        for (let i=0; i < this.props.signals.length; i++){\r\n\r\n            // Looping through the signal values\r\n            for(let j=0; j < this.props.signals[i].values.length; j++){\r\n\r\n                //sumSignals[j] = this.props.signals[i].values[j];\r\n                sumSignals[j][0] = this.props.signals[i].values[j][0];\r\n                sumSignals[j][1] += this.props.signals[i].values[j][1];\r\n            }\r\n            \r\n        }\r\n\r\n        // Should scale this to the svg dimenesions rather than hardcoding it with svgContainerHeight\r\n        for (let n =0; n < sumSignals.length; n++){\r\n            sumSignals[n][1] = sumSignals[n][1] - (this.props.signals.length-1)*(this.height/2)\r\n        }\r\n\r\n        let lineGenerator = d3.line()\r\n          .curve(d3.curveNatural);\r\n\r\n        let pathData = lineGenerator(sumSignals);\r\n\r\n\r\n        // Create scale\r\n        let xscale = d3.scaleLinear()\r\n        .domain([0, 2]) // This needs to be dynamic\r\n        .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n        .domain([4,-4]) // This needs to be dynamic\r\n        .range([(1/10)*this.height, (9/10)*this.height ]);\r\n\r\n        // Add scales to axis\r\n        let x_axis = d3.axisBottom()\r\n        .scale(xscale);\r\n\r\n        let y_axis = d3.axisLeft()\r\n        .scale(yscale);\r\n\r\n        //The svg line Path we draw\r\n\r\n        // If exists, update\r\n        if(document.getElementById(\"path_Sum\")){\r\n            d3.select(\"#\"+\"path_Sum\").attr(\"d\", pathData)  \r\n               \r\n        }\r\n        \r\n        // Draws path if it doesn't exist\r\n        if(!document.getElementById(\"path_Sum\")){\r\n             d3.select(\"#svgSumPlot\").append(\"path\")\r\n                .attr(\"id\",\"path_Sum\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \")\")\r\n                .attr(\"stroke\", \"blue\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n\r\n            const svgSumPlot = d3.select(\"#svgSumPlot\")\r\n\r\n                svgSumPlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",this.width/2)\r\n                .attr(\"y\",this.height/20)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sum of Signals Plot\");\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\", \"translate(0,\" + this.height/2 + \")\")\r\n                .call(x_axis);\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .call(y_axis)\r\n                \r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class FourierCoefficients extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            signals: [\r\n                /* Example signal object \r\n                {\r\n                    id: 0,\r\n                    amplitude: 1,\r\n                    frequency: 1,\r\n                    values: this.generateSignal(1,1),\r\n                    dragging: false,    \r\n                },\r\n                */\r\n            ],\r\n            circles:[\r\n            ],\r\n        };\r\n        // This binding is necessary to make `this.` work in the callback   \r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseUp = this.handleMouseUp.bind(this);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n        this.handleMouseMoveFourierMag = this.handleMouseMoveFourierMag.bind(this);\r\n        this.handleMouseMoveFourierPhase = this.handleMouseMoveFourierPhase.bind(this);\r\n    }\r\n    \r\n    addSignal(){\r\n        const signals = this.state.signals;\r\n\r\n        // Once this.setState has been called, it'll call render() to render straight away\r\n        this.setState({\r\n            signals: signals.concat([{       // Just concatenating array of JSON\r\n                id: signals.length,\r\n                amplitude: 0,                // Should be user input\r\n                frequency: signals.length,   // Should be user input\r\n                phase: 0,\r\n                values: this.generateSignal(0,signals.length,0),\r\n                dragging: false,    \r\n            },]),\r\n        });        \r\n\r\n\r\n    }\r\n\r\n    removeSignal(i){\r\n        // Need to find signal id from the array and delete, then re-update id's\r\n        const signals = this.state.signals;\r\n\r\n\r\n        console.log(\"Hi from removeSignal\");    \r\n        console.log(i)\r\n        console.log(\"Before: \", signals);\r\n        signals.splice(i,1)\r\n        console.log(\"After:\", signals);\r\n\r\n        for(let n = 0; n< this.state.signals.length; n++){\r\n            signals[n].id = n;\r\n        }        \r\n\r\n        // Find the svgId and pathID and delete from DOM\r\n\r\n        let svgID  = 'svg_'\r\n        let pathID = 'path_'\r\n        svgID = svgID.concat(i.toString(10))\r\n        pathID = pathID.concat(i.toString(10))\r\n\r\n        d3.select(\"#\"+svgID).remove();\r\n\r\n        this.setState({\r\n            signals: signals,\r\n        });\r\n        console.log(this.state.signals);\r\n\r\n    \r\n    }\r\n\r\n    generateSignal(amplitude, frequency, phase){\r\n        // Generating path data\r\n        let points = [];\r\n        // This assumes that sumPlot and sinePlots have the same dimensions\r\n        const divHeight = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        const plotWidth = 0.8 * document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n        console.log(\"Plot Width\",plotWidth)\r\n        let scale = -100;\r\n        let x_offset = 0;\r\n        let y_offset = 0;\r\n\r\n        // let Fs = 80;\r\n        let Ts = Math.PI / (plotWidth/4);\r\n\r\n        /* Calculation Reference\r\n        // Assuming the plot is 800x800\r\n        // 1 period = 1 second\r\n        // 1 period = 400 pixels => Ts = 400 samples per second\r\n        // 1 Hz = 2pi radians\r\n\r\n        // Sampling frequency = samples/second\r\n        // 1 sample per 1/400 second (Ts = 1/400)\r\n        // Fs = 2pi * (1/400)\r\n        // Fs = pi / 200\r\n\r\n        // Frequency is in Hz\r\n        // This is bascially an inverse FFT \r\n        // i is basically our t (1 unit of time)\r\n        */\r\n        for(let i = x_offset; i< plotWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude*Math.sin(Ts*frequency*i + (phase * (Math.PI / 180) )) + (divHeight/2 + y_offset)];\r\n        }\r\n        console.log(\"Plot Length\", points.length)\r\n        return points;\r\n    }\r\n\r\n    generateDC(amplitude){\r\n        let points = [];\r\n        const divHeight = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        const plotWidth = 0.8 * document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n        let scale = -100;\r\n        let x_offset = 0;\r\n        let y_offset = 0;\r\n\r\n        for(let i = x_offset; i< plotWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude + (divHeight/2 + y_offset)];\r\n        }\r\n\r\n        return points\r\n    }\r\n\r\n    updateDials(){\r\n        const signals = this.state.signals;\r\n\r\n        for(let i = 0; i< signals.length; i++){\r\n            document.getElementById(\"signal\" + signals[i].id + \"_AmpText\").value = signals[i].amplitude;\r\n            document.getElementById(\"signal\" + signals[i].id + \"_FreqText\").value = signals[i].frequency;\r\n        }\r\n    }\r\n\r\n    handleChange(event){\r\n\r\n\r\n        const signals = this.state.signals;\r\n        const inputType = event.target.getAttribute('input_type');\r\n        const signalID = event.target.getAttribute('signal_id'); // Signal ID Number\r\n        let value = parseFloat(event.target.value);   \r\n\r\n        // Text Form can currently exceed the maximum limit of 10, should limit?\r\n\r\n        if((inputType === \"AmpDial\") || (inputType === \"AmpText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                // DC Case\r\n                if(signalID == 0){\r\n                    signals[signalID].amplitude = value; \r\n                    signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n                    document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n                }\r\n                // All Other cases\r\n                else{\r\n                    signals[signalID].amplitude = value;                 \r\n                    signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                    document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n                }     \r\n            }\r\n        }\r\n        else if ((inputType === \"PhaseDial\") || (inputType === \"PhaseText\")){\r\n            console.log(\"HELLO\")\r\n            console.log(signals[signalID].amplitude)\r\n            console.log(signals[signalID].phase)\r\n\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                // DC Case\r\n                if(signalID == 0){\r\n                    signals[signalID].phase = value; \r\n                    signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n                    document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n                }\r\n                 // All Other cases\r\n                else{\r\n                    signals[signalID].phase = value; \r\n                    signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                    document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n                }\r\n            }\r\n        }     \r\n\r\n        this.setState({\r\n                signals: signals,   \r\n            }   \r\n        );\r\n\r\n    }\r\n\r\n    \r\n    handleMouseDown(e){\r\n        console.log(\"clicked\")\r\n\r\n        e.preventDefault();\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n\r\n        signals[signalID].dragging = true;\r\n\r\n        this.setState({\r\n            signals: signals,   \r\n            }\r\n        );   \r\n    }\r\n\r\n    handleMouseUp(e){\r\n        console.log(\"click released\")\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n        console.log(e.type)\r\n        if(e.type == 'mouseout' && signals[signalID].dragging) {\r\n            console.log(\"mouse went out\")\r\n            return;\r\n        }\r\n\r\n        signals[signalID].dragging = false;\r\n        \r\n        this.setState({\r\n            signals: signals,   \r\n            }\r\n        );\r\n        \r\n    }\r\n\r\n    // Base Mouse move function. Used in Frequency Domain. Not currently in use in this .js file\r\n    handleMouseMove(e) {\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n\r\n        //If we are dragging\r\n          if (signals[signalID].dragging) {\r\n              e.preventDefault();\r\n\r\n              console.log(e)\r\n              console.log(e.target)\r\n              console.log(\"clientX:\",e.clientX)\r\n              console.log(\"clientY:\",e.clientY)\r\n              // console.log(e.target.parentNode.parentNode)\r\n            let  rect = e.target.parentNode.parentNode.getBoundingClientRect();  \r\n\r\n            console.log(rect.left);\r\n            console.log(rect.top);\r\n\r\n\r\n            // Maybe should seperate coordinates and freq/amp values\r\n             signals[signalID].frequency = (e.clientX - rect.left - 400) / 100;\r\n             signals[signalID].amplitude = - (e.clientY - rect.top - 400) / 100;\r\n             signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n\r\n\r\n            // We should set position limits\r\n\r\n            console.log(signals[signalID].frequency)\r\n            console.log(signals[signalID].amplitude)\r\n\r\n            console.log(this)\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n                }\r\n            );  \r\n        }\r\n    }\r\n\r\n    handleMouseMoveFourierMag(e) {\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n\r\n        //If we are dragging\r\n          if (signals[signalID].dragging) {\r\n              e.preventDefault();\r\n\r\n\r\n            console.log(e.target)\r\n            let  rect = e.target.parentNode.parentNode.getBoundingClientRect();  \r\n\r\n            let divHeight = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n            let divWidth = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n            let plotHeight = 0.8*divHeight;\r\n            let plotWidth = 0.8*divWidth;\r\n\r\n            // Maybe should seperate coordinates and freq/amp values\r\n             signals[signalID].frequency = signals[signalID].id;\r\n             signals[signalID].amplitude = - (e.clientY - rect.top - divHeight/2) / (divHeight/8);    // 800: svg height, 8: max axis size (-4 to 4)\r\n             signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n\r\n            // We should set position limits\r\n\r\n            // Checking if signal is the DC value\r\n            if(signalID == 0){\r\n                signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n            }\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n                }\r\n            );  \r\n        }\r\n    }\r\n    \r\n    handleMouseMoveFourierPhase(e) {\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n        console.log(\"signalID: \",signalID)\r\n\r\n        //If we are dragging\r\n          if (signals[signalID].dragging) {\r\n              e.preventDefault();\r\n\r\n\r\n            console.log(e.target)\r\n            let  rect = e.target.parentNode.parentNode.getBoundingClientRect();  \r\n\r\n            let divHeight = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n            let divWidth = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n            let plotHeight = 0.8*divHeight;\r\n            let plotWidth = 0.8*divWidth;\r\n\r\n            // Maybe should seperate coordinates and freq/amp values\r\n             signals[signalID].frequency = signals[signalID].id;\r\n             signals[signalID].phase = parseInt( - (e.clientY - rect.top - divHeight/2) / (plotHeight/360));\r\n             signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n\r\n            // We should set position limits\r\n\r\n            // Checking if signal is the DC value\r\n            if(signalID == 0){\r\n                signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n            }\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n                }\r\n            );  \r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n    const current = this.state.signals;\r\n\r\n    return (\r\n            <div className = {styles.container}>\r\n\r\n                <div className = {styles.timePlots} id = \"timePlotsID\">\r\n                    <div className = {styles.sinePlots} id =\"sinePlotsID\">\r\n                        <SinePlot\r\n                            signals = {current}\r\n                        />\r\n                    </div>\r\n                    <div className = {styles.sumPlots} id =\"sumPlotsID\">\r\n                        <svg id=\"svgSumPlot\" width=\"40vw\" height=\"45vh\" \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black'\r\n                                }}> \r\n                            <SumPlot\r\n                                signals = {current}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className = {styles.otherPlots}>\r\n                    <div className = {styles.fourierPhasePlots} id =\"fourierPhasePlotsID\">\r\n                        <svg id=\"svgFourierPhasePlot\" width=\"40vw\" height=\"45vh\"  \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black',\r\n                                \r\n                                }}> \r\n                        \r\n                            <FourierPhasePlot\r\n                                signals = {current}\r\n                                onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                                onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                                onMouseOut = {(event) => this.handleMouseUp(event)}\r\n                                onMouseMove = {(event) => this.handleMouseMoveFourierPhase(event)}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className = {styles.fourierMagPlots} id =\"fourierMagPlotsID\">\r\n                        <svg id=\"svgFourierMagPlot\" width=\"40vw\" height=\"45vh\"  \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black',\r\n                                \r\n                                }}> \r\n                        \r\n                            <FourierMagPlot\r\n                                signals = {current}\r\n                                onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                                onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                                onMouseOut = {(event) => this.handleMouseUp(event)}\r\n                                onMouseMove = {(event) => this.handleMouseMoveFourierMag(event)}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className = {styles.controls}>\r\n                    \r\n                        <Controls\r\n                            signals = {current}\r\n                            onChange = {(event) => this.handleChange(event)}\r\n                            onAdd = {() => this.addSignal()}\r\n                            onRemove = {(i) => this.removeSignal(i)}\r\n                        />\r\n                    \r\n                </div>\r\n            </div>\r\n      );\r\n    }\r\n  }","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styles from './FrequencyDomain.module.css';\r\nimport * as d3 from \"d3\";\r\n\r\nconst svgContainerWidth = 800;\r\nconst svgContainerHeight = 800;\r\n\r\nfunction Dials(props) {\r\n    return(\r\n        <div className={styles.signal_container}>\r\n            <div className={styles.signal_info}>\r\n                <div>ID: {props.signal.id}</div>\r\n                <button id = \"remove-signal\" onClick={(i) => props.onRemove(props.signal.id)}> Remove Signal </button>\r\n            </div>\r\n            <div className={styles.signal_props}>\r\n                <div>Amplitude: {props.signal.amplitude}</div>\r\n                <div>Frequency: {props.signal.frequency}</div>\r\n                <div>Phase: {props.signal.phase}</div>\r\n            </div>\r\n            <div className = {styles.signal_dials}>\r\n                <div>\r\n                    <input \r\n                    id = {\"signal\" + props.signal.id + \"_AmpDial\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpDial\"}\r\n                    type =\"range\" \r\n                    min={-5} \r\n                    max ={5} \r\n                    value = {props.signal.amplitude} \r\n                    step={0.1}\r\n                    onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                    id = {\"signal\" + props.signal.id + \"_AmpText\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpText\"}\r\n                    type = \"number\"  \r\n                    min = {-5}\r\n                    max = {5}\r\n                    onChange={props.onChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        id = {\"signal\" + props.signal.id + \"_FreqDial\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"FreqDial\"}\r\n                        type =\"range\" \r\n                        min={-4} \r\n                        max ={4} \r\n                        value = {props.signal.frequency} \r\n                        step={0.1}\r\n                        onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                        id = {\"signal\" + props.signal.id + \"_FreqText\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"FreqText\"}\r\n                        type = \"number\"  \r\n                        min = {-4}\r\n                        max = {4}\r\n                        onChange={props.onChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        id = {\"signal\" + props.signal.id + \"_PhaseDial\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseDial\"}\r\n                        type =\"range\" \r\n                        min={-180} \r\n                        max ={180} \r\n                        value = {props.signal.phase} \r\n                        step={1}\r\n                        onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                        id = {\"signal\" + props.signal.id + \"_PhaseText\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseText\"}\r\n                        type = \"number\"  \r\n                        min = {-180}\r\n                        max = {180}\r\n                        onChange={props.onChange}\r\n                    />\r\n                </div>        \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Controls extends React.Component {\r\n\r\n    renderDial(signal){\r\n        return(\r\n            <Dials\r\n                signal = {signal}\r\n                onChange = {(event) => this.props.onChange(event)}\r\n                onRemove = {(i) => this.props.onRemove(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n        const signalList = []; \r\n        for (let i=0; i < this.props.signals.length; i++){\r\n            signalList.push(\r\n                <div key={\"signal\" + this.props.signals[i].id}> \r\n                    {this.renderDial(this.props.signals[i])} \r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            <div className = {styles.dials} >\r\n                {signalList}\r\n                <button id = \"add-signal\" align-content = \"center\" onClick={() => this.props.onAdd()}> Add New Signal </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction Circles(props) {\r\n        return(\r\n            <circle\r\n                id = {\"circle_\"+props.signal.id}\r\n                signal_id = {props.signal.id}\r\n                cx = {(props.signal.frequency)* (800/8)}\r\n                cy = {(props.signal.amplitude)*(800/8)}\r\n                transform=\"translate(400,400) scale(1,-1)\"\r\n                r = {20}\r\n                fill = \"black\"\r\n                stroke = \"black\"\r\n                strokeWidth=\"1\"\r\n                onMouseDown={props.onMouseDown}\r\n                onMouseUp={props.onMouseUp}\r\n                onMouseOut={props.onMouseUp}\r\n                onMouseMove={props.onMouseMove}\r\n            />\r\n        );\r\n    \r\n}\r\n\r\n\r\nclass SinePlot extends React.Component {\r\n    render(){\r\n        const current = this.props.signals;\r\n    \r\n        // Appending svg\r\n        // Check if the element 'svg_id' exists. If not, create new svg, append and draw it\r\n        // Not sure if this scales well \r\n\r\n        for(let i = 0; i < current.length; i++){\r\n\r\n            let svgID  = 'svg_'\r\n            let pathID = 'path_'\r\n            svgID = svgID.concat(i.toString(10))\r\n            pathID = pathID.concat(i.toString(10))\r\n\r\n            let lineGenerator = d3.line()\r\n                                  .curve(d3.curveNatural);\r\n\r\n            let pathData = lineGenerator(current[i].values);\r\n\r\n             // Create scale\r\n            let xscale = d3.scaleLinear()\r\n                        .domain([0, 2]) // This needs to be dynamic\r\n                        .range([50, 750]);\r\n\r\n            let yscale = d3.scaleLinear()\r\n                        .domain([3.5,-3.5]) // This needs to be dynamic\r\n                        .range([50, 750]);\r\n\r\n            // Add scales to axis\r\n            let x_axis = d3.axisBottom()\r\n                .scale(xscale);\r\n\r\n            let y_axis = d3.axisLeft()\r\n                .scale(yscale);\r\n\r\n            // For now, if svgID exists, then just redraw\r\n            if(document.getElementById(svgID)){\r\n                d3.select(\"#\"+pathID).attr(\"d\", pathData)  \r\n            }\r\n            \r\n            // If svgID doesn't exist, then add it to the DOM\r\n\r\n            if(!document.getElementById(svgID)){\r\n                //The SVG Container\r\n                const svgSinePlot = d3.select(\"#sinePlotsID\").append(\"svg\")\r\n                .attr(\"id\",svgID)\r\n                .attr(\"width\", svgContainerWidth)\r\n                .attr(\"height\", svgContainerHeight)\r\n                .attr(\"transform\",\"translate(10)\")\r\n                .attr(\"style\",\"position: absolute\")\r\n                .attr(\"style\", \"border: 1px solid black\")\r\n                .attr(\"top\",\"100px\")\r\n                .attr(\"left\",\"50px\")\r\n\r\n                svgSinePlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",400)\r\n                .attr(\"y\",30)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sine Plot \" + i);\r\n\r\n                //The line SVG Path we draw\r\n                svgSinePlot.append(\"path\")\r\n                .attr(\"id\",pathID)\r\n                .attr(\"transform\",\"translate(50)\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"stroke\", \"blue\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(0,400)\")\r\n                .call(x_axis);\r\n                \r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(50,0)\")\r\n                .call(y_axis);\r\n            }          \r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport class FrequencyPlot extends React.Component {\r\n\r\n    renderCircle(signal){\r\n        return(\r\n            <Circles\r\n                signal = {signal}\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n    const signals = this.props.signals;\r\n     \r\n        let freqSvg = d3.select(\"#svgFreqPlot\")\r\n\r\n        const circleList = []; \r\n       \r\n        for (let i=0; i < this.props.signals.length; i++){\r\n            circleList.push(\r\n                    this.renderCircle(this.props.signals[i])\r\n            )\r\n        }\r\n        \r\n        // Should probably check both axis if they exist before appending\r\n        if(!document.getElementById(\"x_axis_freqPlot\")){\r\n\r\n            // Create Axis for Frequency Plot\r\n            let xscale_freq = d3.scaleLinear()\r\n                                .domain([-3.5, 3.5]) // This needs to be dynamic\r\n                                .range([50, 750]);\r\n\r\n            let yscale_freq = d3.scaleLinear()\r\n                                .domain([3.5,-3.5]) // This needs to be dynamic\r\n                                .range([50, 750]);\r\n\r\n            // Add scales to axis\r\n            let x_axis_freq = d3.axisBottom()\r\n                                .scale(xscale_freq);\r\n\r\n            let y_axis_freq = d3.axisLeft()\r\n                                .scale(yscale_freq);\r\n            \r\n            freqSvg.append(\"text\")\r\n                    .attr(\"text-anchor\", \"middle\")  \r\n                    .attr(\"x\",400)\r\n                    .attr(\"y\",30)\r\n                    .style(\"font-size\", \"16px\") \r\n                    .style(\"text-decoration\", \"underline\")  \r\n                    .text(\"Frequency Domain Plot\");\r\n                    \r\n            freqSvg.append('g')\r\n                    .attr(\"id\",\"x_axis_freqPlot\")\r\n                    .attr(\"transform\",\"translate(0,400)\")\r\n                    .call(x_axis_freq);\r\n\r\n            freqSvg.append('g')\r\n                    .attr(\"id\",\"y_axis_freqPlot\")\r\n                    .attr(\"transform\",\"translate(400,0)\")\r\n                    .call(y_axis_freq); \r\n        }\r\n\r\n        return( \r\n            <svg>\r\n               {circleList}\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n\r\nclass SumPlot extends React.Component {\r\n\r\n    render(){\r\n\r\n        let sumSignals = []; \r\n        let svgContainerHeight = 800;\r\n        let plotWidth = 700;\r\n\r\n        // This will break if we change plotWidth elsewhere \r\n        for(let k = 0; k < plotWidth; k++){\r\n            sumSignals.push([0,0]);\r\n        }\r\n\r\n        // Looping through all the signals\r\n        for (let i=0; i < this.props.signals.length; i++){\r\n\r\n            // Looping through the signal values\r\n            for(let j=0; j < this.props.signals[i].values.length; j++){\r\n\r\n                //sumSignals[j] = this.props.signals[i].values[j];\r\n                sumSignals[j][0] = this.props.signals[i].values[j][0];\r\n                sumSignals[j][1] += this.props.signals[i].values[j][1];\r\n            }\r\n            \r\n        }\r\n\r\n        // There is a way to scale this to the svg dimenesions rather than hardcoding it\r\n        for (let n =0; n < sumSignals.length; n++){\r\n            sumSignals[n][1] = sumSignals[n][1] - (this.props.signals.length-1)*(svgContainerHeight/2)\r\n        }\r\n\r\n        let lineGenerator = d3.line()\r\n          .curve(d3.curveNatural);\r\n\r\n        let pathData = lineGenerator(sumSignals);\r\n\r\n        // Create scale\r\n        let xscale = d3.scaleLinear()\r\n        .domain([0, 2]) // This needs to be dynamic\r\n        .range([50, 750]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n        .domain([3.5,-3.5]) // This needs to be dynamic\r\n        .range([50, 750]);\r\n\r\n        // Add scales to axis\r\n        let x_axis = d3.axisBottom()\r\n        .scale(xscale);\r\n\r\n        let y_axis = d3.axisLeft()\r\n        .scale(yscale);\r\n\r\n        //The line SVG Path we draw\r\n\r\n        // If exists, update\r\n        if(document.getElementById(\"path_Sum\")){\r\n            d3.select(\"#\"+\"path_Sum\").attr(\"d\", pathData)  \r\n               \r\n        }\r\n        \r\n        // Draws path if it doesn't exist\r\n        if(!document.getElementById(\"path_Sum\")){\r\n             d3.select(\"#svgSumPlot\").append(\"path\")\r\n                .attr(\"id\",\"path_Sum\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"transform\",\"translate(50)\")\r\n                .attr(\"stroke\", \"blue\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n\r\n            const svgSumPlot = d3.select(\"#svgSumPlot\")\r\n\r\n                svgSumPlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",400)\r\n                .attr(\"y\",30)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sum of Signals Plot\");\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\",\"translate(0,400)\")\r\n                .call(x_axis);\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\",\"translate(20,0)\")\r\n                .call(y_axis)\r\n                .attr(\"transform\",\"translate(50,0)\");\r\n                \r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class FrequencyDomain extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            signals: [\r\n                /* Example signal object \r\n                    {\r\n                    id: 0,\r\n                    amplitude: 1,\r\n                    frequency: 1,\r\n                    values: this.generateSignal(1,1),\r\n                    dragging: false,    \r\n                    },\r\n                */\r\n            ],\r\n            circles:[\r\n            ],\r\n        };\r\n        // This binding is necessary to make `this.` work in the callback   \r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseUp = this.handleMouseUp.bind(this);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    }\r\n    \r\n    addSignal(){\r\n        const signals = this.state.signals;\r\n\r\n        // Once this.setState has been called, it'll call render() to render straight away\r\n        this.setState({\r\n            signals: signals.concat([{  // Just concatenating array of JSON\r\n                id: signals.length,\r\n                amplitude: 0,           // Should be user input\r\n                frequency: 0,           // Should be user input\r\n                phase: 0,\r\n                values: this.generateSignal(0,0,0),\r\n                dragging: false,    \r\n            },]),\r\n        });        \r\n\r\n\r\n    }\r\n\r\n    removeSignal(i){\r\n        // Need to find signal id from the array and delete, then re-update id's\r\n        const signals = this.state.signals;\r\n\r\n\r\n        console.log(\"Hi from removeSignal\");    \r\n        console.log(i)\r\n        console.log(\"Before: \", signals);\r\n        signals.splice(i,1)\r\n        console.log(\"After:\", signals);\r\n\r\n        for(let n = 0; n< this.state.signals.length; n++){\r\n            signals[n].id = n;\r\n        }        \r\n\r\n        // Find the svgId and pathID and delete from DOM\r\n\r\n        let svgID  = 'svg_'\r\n        let pathID = 'path_'\r\n        svgID = svgID.concat(i.toString(10))\r\n        pathID = pathID.concat(i.toString(10))\r\n\r\n        d3.select(\"#\"+svgID).remove();\r\n\r\n        this.setState({\r\n            signals: signals,\r\n        });\r\n        console.log(this.state.signals);\r\n\r\n    \r\n    }\r\n\r\n    generateSignal(amplitude, frequency, phase){\r\n        // Generating path data\r\n        let points = [];\r\n        const plotHeight = 700;\r\n        const plotWidth = 700;\r\n        let scale = -100;\r\n        let x_offset = 0;\r\n        let y_offset = 50;\r\n\r\n        let Fs = 80;\r\n        let Ts = Math.PI / 200;\r\n\r\n        /* Calculation Reference\r\n        // 1 period = 1 second\r\n        // 1 period = 400 pixels => Ts = 400 samples per second\r\n        // 1 Hz = 2pi radians\r\n\r\n        // Sampling frequency = samples/second\r\n        // 1 sample per 1/400 second (Ts = 1/400)\r\n        // Fs = 2pi * (1/400)\r\n        // Fs = pi / 200\r\n\r\n        // Frequency is in Hz\r\n        // This is bascially an inverse FFT \r\n        // i is basically our t (1 unit of time)\r\n        */\r\n        for(let i = x_offset; i< plotWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude*Math.sin(Ts*frequency*i + (phase * (Math.PI / 180) )) + (plotHeight/2 + y_offset)];\r\n        }\r\n        return points;\r\n    }\r\n\r\n    updateDials(){\r\n        const signals = this.state.signals;\r\n\r\n        for(let i = 0; i< signals.length; i++){\r\n            document.getElementById(\"signal\" + signals[i].id + \"_AmpText\").value = signals[i].amplitude;\r\n            document.getElementById(\"signal\" + signals[i].id + \"_FreqText\").value = signals[i].frequency;\r\n        }\r\n    }\r\n\r\n    handleChange(event){\r\n\r\n\r\n        const signals = this.state.signals;\r\n        const inputType = event.target.getAttribute('input_type');\r\n        const signalID = event.target.getAttribute('signal_id'); // Signal ID Number\r\n        let value = parseFloat(event.target.value);   \r\n\r\n        // Text Form can currently exceed the maximum limit of 10, should limit?\r\n\r\n        if((inputType === \"AmpDial\") || (inputType === \"AmpText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                signals[signalID].amplitude = value;                 \r\n                signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n            }\r\n        }\r\n        else if ((inputType === \"FreqDial\") || (inputType === \"FreqText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                signals[signalID].frequency = value; \r\n                signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                document.getElementById(\"signal\" + signalID + \"_FreqText\").value = value;\r\n            }\r\n        } \r\n        else if ((inputType === \"PhaseDial\") || (inputType === \"PhaseText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                signals[signalID].phase = value; \r\n                signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n            }\r\n        }     \r\n\r\n        this.setState({\r\n                signals: signals,   \r\n            }   \r\n        );\r\n\r\n    }\r\n\r\n    \r\n    handleMouseDown(e){\r\n        console.log(\"clicked\")\r\n\r\n        e.preventDefault();\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n\r\n        signals[signalID].dragging = true;\r\n\r\n        this.setState({\r\n            signals: signals,   \r\n            }\r\n        );   \r\n    }\r\n\r\n    handleMouseUp(e){\r\n        console.log(\"click released\")\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n        console.log(e.type)\r\n        if(e.type == 'mouseout' && signals[signalID].dragging) {\r\n            console.log(\"mouse went out\")\r\n            return;\r\n        }\r\n\r\n        signals[signalID].dragging = false;\r\n        \r\n        this.setState({\r\n            signals: signals,   \r\n            }\r\n        );\r\n        \r\n    }\r\n\r\n    handleMouseMove(e) {\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n\r\n        //If we are dragging\r\n          if (signals[signalID].dragging) {\r\n              e.preventDefault();\r\n\r\n              console.log(e)\r\n              console.log(e.target)\r\n              console.log(\"clientX:\",e.clientX)\r\n              console.log(\"clientY:\",e.clientY)\r\n              // console.log(e.target.parentNode.parentNode)\r\n            let  rect = e.target.parentNode.parentNode.getBoundingClientRect();  \r\n\r\n            console.log(rect.left);\r\n            console.log(rect.top);\r\n\r\n\r\n            // Maybe should seperate coordinates and freq/amp values\r\n             signals[signalID].frequency = (e.clientX - rect.left - 400) / 100;\r\n             signals[signalID].amplitude = - (e.clientY - rect.top - 400) / 100;\r\n             signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n\r\n\r\n            // We should set position limits\r\n\r\n            console.log(signals[signalID].frequency)\r\n            console.log(signals[signalID].amplitude)\r\n\r\n            console.log(this)\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n                }\r\n            );  \r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n    const current = this.state.signals;\r\n\r\n    return (\r\n            <div className = {styles.container}>\r\n\r\n                <div className = {styles.sinePlots} id =\"sinePlotsID\">\r\n                    <SinePlot\r\n                        signals = {current}\r\n                    />\r\n                </div>\r\n\r\n                <div className = {styles.otherPlots}>\r\n                    <div className = {styles.freqPlots} id =\"freqPlotsID\">\r\n                        <svg id=\"svgFreqPlot\" width=\"800\" height=\"800\"  \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black',\r\n                                \r\n                                }}> \r\n                        \r\n                            <FrequencyPlot\r\n                                signals = {current}\r\n                                onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                                onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                                onMouseOut = {(event) => this.handleMouseUp(event)}\r\n                                onMouseMove = {(event) => this.handleMouseMove(event)}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className = {styles.sumPlots} id =\"sumPlotsID\">\r\n                        <svg id=\"svgSumPlot\" width=\"800\" height=\"800\" \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black'\r\n                                }}> \r\n                            <SumPlot\r\n                                signals = {current}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div className = {styles.controls}>\r\n                    \r\n                        <Controls\r\n                            signals = {current}\r\n                            onChange = {(event) => this.handleChange(event)}\r\n                            onAdd = {() => this.addSignal()}\r\n                            onRemove = {(i) => this.removeSignal(i)}\r\n                        />\r\n                    \r\n                </div>\r\n            </div>\r\n      );\r\n    }\r\n  }","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n// import logo from './logo.svg';\nimport styles from './App.module.css';\nimport * as d3 from \"d3\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport {FourierCoefficients} from './FourierCoefficients.js'\nimport {FrequencyDomain} from './FrequencyDomain.js'\n\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n*/\n\n\n/* Known Bugs:\n- removeSignal() only works if you starting removing from the last signal\n- if you move/drag the mouse too fast the circle doesn't catch up\n- phase dial for DC signal updates amplitude when it's not meant to\n- negative phase circle is meant to move in opposite direction when dragged (cartersian coordinate problem)\n\n\n- Changing frequency does update the signal (when it's not meant to)\n^ But this is deliberate because we haven't updated FreqPlot functionality to fit with Fourier Plots\n*/\n\n\n\nfunction App() {\n    return (\n      <Router>\n        <div className = {styles.navbar}>\n                    <div className = {styles.tab} id=\"home\">  \n                      <Link to=\"/signals-web-app\">Home</Link>\n                    </div>\n                    <div className = {styles.tab}> \n                      <Link to=\"/about\">About</Link>\n                    </div>\n                    <div className = {styles.tab}>  \n                      <Link to=\"/FourierCoefficients\">Fourier Coefficients</Link>\n                    </div>\n                    <div className = {styles.tab}>  \n                      <Link to=\"/FrequencyDomain\">Frequency Domain</Link>\n                    </div>\n        </div>\n            <hr/>\n          {/*\n            A <Switch> looks through all its children <Route>\n            elements and renders the first one whose path\n            matches the current URL. Use a <Switch> any time\n            you have multiple routes, but you want only one\n            of them to render at a time\n          */}\n\n          <Switch>\n            <Route exact path=\"/signals-web-app\">\n              <Home />\n            </Route>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/FourierCoefficients\">\n              <FourierCoefficients />\n            </Route>\n            <Route path=\"/FrequencyDomain\">\n              <FrequencyDomain />\n            </Route>\n          </Switch>\n \n      </Router>\n    );\n  }\n\n  function About() {\n    return (\n      <div>\n        <h2>About</h2>\n      </div>\n    );\n  }\n  \n  class Home extends React.Component{\n    render() {\n\n      return(\n      <div>\n        <h2>Home</h2>\n      </div>\n      )\n\n    };\n  }\n\n  // ========================================\n  \n  ReactDOM.render(\n    <App />,\n    document.getElementById('root')\n  );\n\n  export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}