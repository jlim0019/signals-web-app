{"version":3,"sources":["FrequencyDomain.module.css","App.module.css","FourierCoefficients.module.css","FourierCoefficients.js","FrequencyDomain.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dials","props","className","styles","signal_container","signal_info","tooltip","tooltiptext","signal","id","onClick","i","onRemove","height","width","r","cx","cy","fill","colour","stroke","strokeWidth","signal_props","amplitude","toFixed","signal_id","input_type","type","min","max","value","step","onChange","phase","Controls","event","signalList","this","signals","length","push","key","renderDial","dials","global_controls","align-content","onAdd","React","Component","FourierCirclesMagPos","divHeight","document","getElementById","getBoundingClientRect","divWidth","plotHeight","plotWidth","transform","onMouseDown","onMouseUp","onMouseOut","onMouseMove","FourierCirclesMagNeg","FourierCirclesPhasePos","FourierCirclesPhaseNeg","FourierMagPlot","FourierMagSvg","d3","xscale_freq","domain","range","yscale_freq","xAxisTicks","ticks","filter","tick","Number","isInteger","x_axis_freq","tickValues","tickFormat","y_axis_freq","append","attr","style","text","call","circleList","renderCirclePos","renderCircleNeg","FourierPhasePlot","FourierPhaseSvg","SinePlot","svgSinePlot","xscale","yscale","x_axis","scale","y_axis","current","svgID","pathID","concat","toString","pathData","curve","lineGenerator","values","SumPlot","svgSumPlot","sumSignals","k","j","n","FourierCoefficients","state","circles","handleMouseDown","bind","handleMouseUp","handleMouseMove","handleMouseMoveFourierMag","handleMouseMoveFourierPhase","setState","frequency","generateSignal","dragging","hsl","console","log","splice","remove","points","Ts","Math","PI","sin","inputType","target","getAttribute","signalID","parseFloat","isNaN","generateDC","e","preventDefault","clientX","clientY","rect","parentNode","left","top","circleCX","parseInt","container","timePlots","sinePlots","position","border","sumPlots","otherPlots","fourierPhasePlots","fourierMagPlots","controls","handleChange","addSignal","removeSignal","signal_dials","Circles","FrequencyPlot","freqSvg","renderCircle","FrequencyDomain","freqPlots","App","navbar","tab","to","exact","path","About","centertext","Home","ReactDOM","render","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5331a315.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"FrequencyDomain_home__30fuX\",\"container\":\"FrequencyDomain_container__DTkEc\",\"navbar\":\"FrequencyDomain_navbar__2nfHk\",\"tab\":\"FrequencyDomain_tab__2HYGI\",\"controls\":\"FrequencyDomain_controls__3_b1P\",\"dials\":\"FrequencyDomain_dials__1_C6C\",\"signal_container\":\"FrequencyDomain_signal_container__2wtJT\",\"signal_info\":\"FrequencyDomain_signal_info__2oOve\",\"signal_props\":\"FrequencyDomain_signal_props__3Psyr\",\"signal_dials\":\"FrequencyDomain_signal_dials__36fR_\",\"sinePlots\":\"FrequencyDomain_sinePlots__1Lmk_\",\"otherPlots\":\"FrequencyDomain_otherPlots__2dZs_\",\"freqPlots\":\"FrequencyDomain_freqPlots__2WRIF\",\"sumPlots\":\"FrequencyDomain_sumPlots__9CQRp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"App_home__gVUmA\",\"container\":\"App_container__2fAhY\",\"navbar\":\"App_navbar__3YSH8\",\"tab\":\"App_tab__2izV7\",\"centertext\":\"App_centertext__1tHIr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"FourierCoefficients_home__10kQG\",\"container\":\"FourierCoefficients_container__kd25g\",\"navbar\":\"FourierCoefficients_navbar__2pTv4\",\"tab\":\"FourierCoefficients_tab__8pHCY\",\"tooltip\":\"FourierCoefficients_tooltip__1v6vc\",\"tooltiptext\":\"FourierCoefficients_tooltiptext__P9iLV\",\"controls\":\"FourierCoefficients_controls___EOHp\",\"dials\":\"FourierCoefficients_dials__1zijK\",\"global_controls\":\"FourierCoefficients_global_controls__1LP2r\",\"signal_container\":\"FourierCoefficients_signal_container__1Of7C\",\"signal_info\":\"FourierCoefficients_signal_info__2oYZ9\",\"signal_props\":\"FourierCoefficients_signal_props__1Kcya\",\"signal_dials\":\"FourierCoefficients_signal_dials__kLbm8\",\"timePlots\":\"FourierCoefficients_timePlots__vs39U\",\"sinePlots\":\"FourierCoefficients_sinePlots__NqB9U\",\"otherPlots\":\"FourierCoefficients_otherPlots__AqeTC\",\"fourierMagPlots\":\"FourierCoefficients_fourierMagPlots__1Fesw\",\"fourierPhasePlots\":\"FourierCoefficients_fourierPhasePlots__3rZM3\",\"sumPlots\":\"FourierCoefficients_sumPlots__DMOR_\"};","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styles from './FourierCoefficients.module.css'; \r\nimport * as d3 from \"d3\";\r\nimport { hsl } from 'd3';\r\n\r\nfunction Dials(props) {\r\n    return(\r\n        <div className={styles.signal_container}>\r\n            <div className={styles.signal_info}>\r\n\r\n                <div className={styles.tooltip}>\r\n                    | Help |\r\n                        <span className={styles.tooltiptext}>\r\n                            <p>This is the control panel to adjust signal properties.</p>\r\n                            <p>Try adjusting the Amplitude and Phase!</p>\r\n                        </span>\r\n                    \r\n                </div>\r\n                \r\n                <div>ID: {props.signal.id}</div>\r\n                <button id = \"remove-signal\" onClick={(i) => props.onRemove(props.signal.id)}> Remove Signal </button>\r\n                <div> Colour </div>\r\n                <svg height = \"40\" width = \"20\">\r\n                    <circle\r\n                        r = {10}\r\n                        cx = {10}\r\n                        cy = {20}\r\n                        fill = {props.signal.colour}\r\n                        stroke = \"black\"\r\n                        strokeWidth=\"1\"\r\n                    />\r\n                </svg>\r\n            </div>\r\n            <div className={styles.signal_props}>\r\n                <div>Amplitude: {props.signal.amplitude.toFixed(2)}</div>\r\n            </div>\r\n            <div className = {styles.signal_props}>\r\n                <div>\r\n                    <input \r\n                    id = {\"signal\" + props.signal.id + \"_AmpDial\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpDial\"}\r\n                    type =\"range\" \r\n                    min={-5} \r\n                    max ={5} \r\n                    value = {props.signal.amplitude} \r\n                    step={0.1}\r\n                    onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                    id = {\"signal\" + props.signal.id + \"_AmpText\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpText\"}\r\n                    type = \"number\"  \r\n                    min = {-5}\r\n                    max = {5}\r\n                    onChange={props.onChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div className={styles.signal_props}>\r\n                <div>Phase: {props.signal.phase}</div>\r\n            </div>\r\n            <div className={styles.signal_props}>\r\n                <div>\r\n                    <input \r\n                        id = {\"signal\" + props.signal.id + \"_PhaseDial\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseDial\"}\r\n                        type =\"range\" \r\n                        min={-180} \r\n                        max ={180} \r\n                        value = {props.signal.phase} \r\n                        step={1}\r\n                        onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                        id = {\"signal\" + props.signal.id + \"_PhaseText\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseText\"}\r\n                        type = \"number\"  \r\n                        min = {-180}\r\n                        max = {180}\r\n                        onChange={props.onChange}\r\n                    />\r\n                </div>        \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Controls extends React.Component {\r\n\r\n    renderDial(signal){\r\n        return(\r\n            <Dials\r\n                signal = {signal}\r\n                onChange = {(event) => this.props.onChange(event)}\r\n                onRemove = {(i) => this.props.onRemove(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n        const signalList = []; \r\n        for (let i=0; i < this.props.signals.length; i++){\r\n            signalList.push(\r\n                <div key={\"signal\" + this.props.signals[i].id}> \r\n                    {this.renderDial(this.props.signals[i])} \r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            <div className = {styles.dials} >\r\n                <div className = {styles.global_controls}>\r\n\r\n                    <div className={styles.tooltip}>\r\n                        | Help |\r\n                            <span className={styles.tooltiptext}>\r\n                                <p>Try adding a signal!</p>\r\n                            </span>\r\n                    </div>\r\n                    <button id = \"add-signal\" align-content = \"center\" onClick={() => this.props.onAdd()}> Add New Signal </button>\r\n                </div>\r\n                {signalList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction FourierCirclesMagPos(props) {\r\n    let divHeight = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*(plotWidth/8)}\r\n            cy = {(props.signal.amplitude)*(plotHeight/8)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n            onMouseDown={props.onMouseDown}\r\n            onMouseUp={props.onMouseUp}\r\n            onMouseOut={props.onMouseUp}\r\n            onMouseMove={props.onMouseMove}\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesMagNeg(props) {\r\n    let divHeight = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_-\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*-(plotWidth/8)} // 8 is because our x-axis is divided into 8 sections \r\n            cy = {(props.signal.amplitude)*(plotHeight/8)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n            onMouseDown={props.onMouseDown}\r\n            onMouseUp={props.onMouseUp}\r\n            onMouseOut={props.onMouseUp}\r\n            onMouseMove={props.onMouseMove}\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesPhasePos(props) {\r\n    let divHeight = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*(plotWidth/8)} // 8 is because our x-axis is divided into 8 sections \r\n            cy = {(props.signal.phase)*(plotHeight/360)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n            onMouseDown={props.onMouseDown}\r\n            onMouseUp={props.onMouseUp}\r\n            onMouseOut={props.onMouseUp}\r\n            onMouseMove={props.onMouseMove}\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesPhaseNeg(props) {\r\n    let divHeight = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_-\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*-(plotWidth/8)} // 8 is because our x-axis is divided into 8 sections \r\n            cy = {-(props.signal.phase)*(plotHeight/360)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n            onMouseDown={props.onMouseDown}\r\n            onMouseUp={props.onMouseUp}\r\n            onMouseOut={props.onMouseUp}\r\n            onMouseMove={props.onMouseMove}\r\n        />\r\n    );\r\n}\r\n\r\nclass FourierMagPlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n\r\n        let FourierMagSvg = d3.select(\"#svgFourierMagPlot\")\r\n\r\n        // Should probably check both axis if they exist before appending\r\n        if(!document.getElementById(\"x_axis_fourierMagPlot\")){\r\n   \r\n            // Create Axis for Frequency Plot\r\n            let xscale_freq = d3.scaleLinear()\r\n                    .domain([-4, 4]) // This needs to be dynamic\r\n                    .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n            let yscale_freq = d3.scaleLinear()\r\n                    .domain([4,-4]) // This needs to be dynamic\r\n                    .range([ (1/10)*this.height, (9/10)*this.height ]);\r\n\r\n            // Add scales to axis\r\n            const xAxisTicks = xscale_freq.ticks()\r\n                                     .filter(tick => Number.isInteger(tick));\r\n \r\n            let x_axis_freq = d3.axisBottom(xscale_freq)\r\n             .tickValues(xAxisTicks)\r\n             .tickFormat(d3.format(\"d\"));\r\n\r\n            let y_axis_freq = d3.axisLeft(yscale_freq);\r\n\r\n            FourierMagSvg.append(\"text\")\r\n                         .attr(\"text-anchor\", \"middle\")  \r\n                         .attr(\"x\",this.width/2)\r\n                         .attr(\"y\",this.height/20)\r\n                         .style(\"font-size\", \"16px\") \r\n                         .style(\"text-decoration\", \"underline\")  \r\n                         .text(\"Fourier Magnitude Plot\");\r\n\r\n            FourierMagSvg.append('g')\r\n                         .attr(\"id\",\"x_axis_fourierMagPlot\")\r\n                         .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n                         .call(x_axis_freq)\r\n\r\n            FourierMagSvg.append('g')\r\n                         .attr(\"id\",\"y_axis_fourierMagPlot\")\r\n                         .attr(\"transform\",\"translate(\" + this.width/2 + \",0)\")\r\n                         .call(y_axis_freq); \r\n        }\r\n    }\r\n\r\n    renderCirclePos(signal){\r\n        return(\r\n            <FourierCirclesMagPos\r\n                signal = {signal}\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderCircleNeg(signal){\r\n        return(\r\n            <FourierCirclesMagNeg\r\n                signal = {signal}\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n        const signals = this.props.signals;\r\n   \r\n           const circleList = [];\r\n          \r\n           for (let i=0; i < this.props.signals.length; i++){\r\n                if(i ==0){\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i]) \r\n                    )\r\n                }\r\n                else{\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i]),\r\n                        this.renderCircleNeg(this.props.signals[i])\r\n                    )\r\n                }\r\n           }                    \r\n   \r\n           return( \r\n               <svg>\r\n                  {circleList}\r\n               </svg>\r\n           );\r\n       }\r\n}\r\n\r\nclass FourierPhasePlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n\r\n        let FourierPhaseSvg = d3.select(\"#svgFourierPhasePlot\")\r\n\r\n        // Should probably check both axis if they exist before appending\r\n        if(!document.getElementById(\"x_axis_fourierPhasePlot\")){\r\n   \r\n            // Create Axis for Frequency Plot\r\n            let xscale_freq = d3.scaleLinear()\r\n                    .domain([-4, 4]) // This needs to be dynamic\r\n                    .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n            let yscale_freq = d3.scaleLinear()\r\n                    .domain([180,-180]) // This needs to be dynamic\r\n                    .range([ (1/10)*this.height, (9/10)*this.height ]);\r\n\r\n            // Add scales to axis\r\n            const xAxisTicks = xscale_freq.ticks()\r\n                                     .filter(tick => Number.isInteger(tick));\r\n \r\n            let x_axis_freq = d3.axisBottom(xscale_freq)\r\n             .tickValues(xAxisTicks)\r\n             .tickFormat(d3.format(\"d\"));\r\n\r\n            let y_axis_freq = d3.axisLeft(yscale_freq);\r\n            \r\n            FourierPhaseSvg.append(\"text\")\r\n                         .attr(\"text-anchor\", \"middle\")  \r\n                         .attr(\"x\",this.width/2)\r\n                         .attr(\"y\",this.height/20)\r\n                         .style(\"font-size\", \"16px\") \r\n                         .style(\"text-decoration\", \"underline\")  \r\n                         .text(\"Fourier Phase Plot\"); \r\n\r\n            FourierPhaseSvg.append('g')\r\n                         .attr(\"id\",\"x_axis_fourierPhasePlot\")\r\n                         .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n                         .call(x_axis_freq)\r\n\r\n            FourierPhaseSvg.append('g')\r\n                         .attr(\"id\",\"y_axis_fourierPhasePlot\")\r\n                         .attr(\"transform\",\"translate(\" + this.width/2 + \",0)\")\r\n                         .call(y_axis_freq); \r\n        }\r\n    }\r\n\r\n    renderCirclePos(signal){\r\n        return(\r\n            <FourierCirclesPhasePos\r\n                signal = {signal}\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderCircleNeg(signal){\r\n        return(\r\n            <FourierCirclesPhaseNeg\r\n                signal = {signal}\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n        const signals = this.props.signals;\r\n    \r\n           const circleList = []; \r\n           \r\n           for (let i=0; i < this.props.signals.length; i++){\r\n\r\n                if(i ==0){\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i]) \r\n                    )\r\n                }\r\n                else{\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i]),\r\n                        this.renderCircleNeg(this.props.signals[i])\r\n                    )\r\n                }\r\n               \r\n           }\r\n   \r\n           return( \r\n               <svg>\r\n                  {circleList}\r\n               </svg>\r\n           );\r\n       }\r\n}\r\n\r\n\r\nclass SinePlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"sinePlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"sinePlotsID\").getBoundingClientRect().width;\r\n\r\n        const svgSinePlot = d3.select(\"#svgSinePlot\")\r\n\r\n         // Create scale\r\n        let xscale = d3.scaleLinear()\r\n                        .domain([0, 2]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n                        .domain([4,-4]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.height, (9/10)*this.height ]);\r\n\r\n        // Add scales to axis\r\n        let x_axis = d3.axisBottom()\r\n                        .scale(xscale);\r\n\r\n        let y_axis = d3.axisLeft()\r\n                        .scale(yscale);\r\n\r\n        svgSinePlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",this.width/2)\r\n                .attr(\"y\",this.height/20)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sine Plots\");\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\", \"translate(0,\" + this.height/2 + \")\")\r\n                .call(x_axis);\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .call(y_axis)\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n        const current = this.props.signals;\r\n    \r\n        // \"Overlay all sine plots into one graph\" version\r\n        for(let i = 0; i < current.length; i++){\r\n\r\n            let svgID  = 'svg_'\r\n            let pathID = 'path_'\r\n            svgID = svgID.concat(i.toString(10))\r\n            pathID = pathID.concat(i.toString(10))\r\n\r\n            let lineGenerator = d3.line().curve(d3.curveNatural);\r\n  \r\n            let pathData = lineGenerator(current[i].values);\r\n    \r\n            //The svg line Path we draw\r\n    \r\n            // If exists, update\r\n            if(document.getElementById(pathID)){\r\n                d3.select(\"#\"+pathID).attr(\"d\", pathData)                      \r\n            }\r\n            \r\n            // Draws path if it doesn't exist\r\n            if(!document.getElementById(pathID)){\r\n                d3.select(\"#svgSinePlot\").append(\"path\")\r\n                    .attr(\"id\",pathID)\r\n                    .attr(\"d\", pathData)\r\n                    .attr(\"transform\",\"translate(\" + (1/10)*this.width + \")\")\r\n                    .attr(\"stroke\", current[i].colour)\r\n                    .attr(\"stroke-width\", 2)\r\n                    .attr(\"fill\", \"none\")\r\n          }\r\n        }\r\n\r\n\r\n        // Appending svg\r\n        // Check if the element 'svg_id' exists. If not, create new svg, append and draw it\r\n        // Not sure if this scales well\r\n\r\n        /* Code for seperate Plots\r\n        for(let i = 0; i < current.length; i++){\r\n\r\n            let svgID  = 'svg_'\r\n            let pathID = 'path_'\r\n            svgID = svgID.concat(i.toString(10))\r\n            pathID = pathID.concat(i.toString(10))\r\n\r\n            let lineGenerator = d3.line()\r\n                                  .curve(d3.curveNatural);\r\n\r\n            let pathData = lineGenerator(current[i].values);\r\n\r\n             // Create scale\r\n            let xscale = d3.scaleLinear()\r\n                        .domain([0, 2]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n            let yscale = d3.scaleLinear()\r\n                        .domain([4,-4]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.height, (9/10)*this.height ]);\r\n\r\n            // Add scales to axis\r\n            let x_axis = d3.axisBottom()\r\n                .scale(xscale);\r\n\r\n            let y_axis = d3.axisLeft()\r\n                .scale(yscale);\r\n\r\n            // For now, if svgID exists, then just redraw\r\n            if(document.getElementById(svgID)){\r\n                d3.select(\"#\"+pathID).attr(\"d\", pathData)  \r\n            }\r\n            \r\n            // If svgID doesn't exist, then add it to the DOM\r\n\r\n            if(!document.getElementById(svgID)){\r\n                //The SVG Container\r\n                const svgSinePlot = d3.select(\"#sinePlotsID\").append(\"svg\")\r\n                .attr(\"id\",svgID)\r\n                .attr(\"width\", \"40vw\")\r\n                .attr(\"height\", \"45vh\")\r\n                .attr(\"style\",\"position: absolute\")\r\n                .attr(\"style\", \"border: 1px solid black\")\r\n\r\n                svgSinePlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",this.width/2)\r\n                .attr(\"y\",this.height/20)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sine Plot \" + i);\r\n\r\n                //The line SVG Path we draw\r\n                svgSinePlot.append(\"path\")\r\n                .attr(\"id\",pathID)\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"stroke\", current[i].colour)\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n                .call(x_axis);\r\n                \r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .call(y_axis);\r\n            }          \r\n        }\r\n        */\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass SumPlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n\r\n        // Create scale\r\n        let xscale = d3.scaleLinear()\r\n        .domain([0, 2]) // This needs to be dynamic\r\n        .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n        .domain([4,-4]) // This needs to be dynamic\r\n        .range([(1/10)*this.height, (9/10)*this.height ]);\r\n\r\n        // Add scales to axis\r\n        let x_axis = d3.axisBottom()\r\n        .scale(xscale);\r\n\r\n        let y_axis = d3.axisLeft()\r\n        .scale(yscale);\r\n\r\n        const svgSumPlot = d3.select(\"#svgSumPlot\")\r\n\r\n                svgSumPlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",this.width/2)\r\n                .attr(\"y\",this.height/20)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sum of Signals Plot\");\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\", \"translate(0,\" + this.height/2 + \")\")\r\n                .call(x_axis);\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .call(y_axis)\r\n    }\r\n\r\n    render(){\r\n\r\n        let sumSignals = []; \r\n        let plotWidth = 0.8 * this.width;\r\n        // console.log(this.height);\r\n        // console.log(this.width);\r\n\r\n        // This will break if we change plotWidth elsewhere \r\n        for(let k = 0; k < plotWidth; k++){\r\n            sumSignals.push([0,0]);\r\n        }\r\n\r\n        // Looping through all the signals\r\n        for (let i=0; i < this.props.signals.length; i++){\r\n\r\n            // Looping through the signal values\r\n            for(let j=0; j < this.props.signals[i].values.length; j++){\r\n\r\n                //sumSignals[j] = this.props.signals[i].values[j];\r\n                sumSignals[j][0] = this.props.signals[i].values[j][0];\r\n                sumSignals[j][1] += this.props.signals[i].values[j][1];\r\n            }\r\n            \r\n        }\r\n\r\n        // Should scale this to the svg dimenesions rather than hardcoding it with svgContainerHeight\r\n        for (let n =0; n < sumSignals.length; n++){\r\n            sumSignals[n][1] = sumSignals[n][1] - (this.props.signals.length-1)*(this.height/2)\r\n        }\r\n\r\n        let lineGenerator = d3.line()\r\n          .curve(d3.curveNatural);\r\n\r\n        let pathData = lineGenerator(sumSignals);\r\n\r\n        //The svg line Path we draw\r\n\r\n        // If exists, update\r\n        if(document.getElementById(\"path_Sum\")){\r\n            d3.select(\"#\"+\"path_Sum\").attr(\"d\", pathData)  \r\n               \r\n        }\r\n        \r\n        // Draws path if it doesn't exist\r\n        if(!document.getElementById(\"path_Sum\")){\r\n             d3.select(\"#svgSumPlot\").append(\"path\")\r\n                .attr(\"id\",\"path_Sum\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \")\")\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class FourierCoefficients extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            signals: [\r\n                /* Example signal object \r\n                {\r\n                    id: 0,\r\n                    amplitude: 1,\r\n                    frequency: 1,\r\n                    values: this.generateSignal(1,1),\r\n                    dragging: false,    \r\n                },\r\n                */\r\n            ],\r\n            circles:[\r\n            ],\r\n        };\r\n        // This binding is necessary to make `this.` work in the callback   \r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseUp = this.handleMouseUp.bind(this);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n        this.handleMouseMoveFourierMag = this.handleMouseMoveFourierMag.bind(this);\r\n        this.handleMouseMoveFourierPhase = this.handleMouseMoveFourierPhase.bind(this);\r\n    }\r\n    \r\n    addSignal(){\r\n        const signals = this.state.signals;\r\n\r\n        // Once this.setState has been called, it'll call render() to render straight away\r\n        this.setState({\r\n            signals: signals.concat([{       // Just concatenating array of JSON\r\n                id: signals.length,\r\n                amplitude: 0,                // Should be user input\r\n                frequency: signals.length,   // Should be user input\r\n                phase: 0,\r\n                values: this.generateSignal(0,signals.length,0),\r\n                dragging: false,    \r\n                colour: hsl(signals.length*60, 100, 50)\r\n            },]),\r\n        });        \r\n\r\n\r\n    }\r\n\r\n    removeSignal(i){\r\n        // Need to find signal id from the array and delete, then re-update id's\r\n        const signals = this.state.signals;\r\n\r\n\r\n        console.log(\"Hi from removeSignal\");    \r\n        console.log(i)\r\n        console.log(\"Before: \", signals);\r\n        signals.splice(i,1)\r\n        console.log(\"After:\", signals);\r\n\r\n        for(let n = 0; n< this.state.signals.length; n++){\r\n            signals[n].id = n;\r\n        }        \r\n\r\n        // Find the svgId and pathID and delete from DOM\r\n\r\n        let svgID  = 'svg_'\r\n        let pathID = 'path_'\r\n        svgID = svgID.concat(i.toString(10))\r\n        pathID = pathID.concat(i.toString(10))\r\n\r\n        d3.select(\"#\"+svgID).remove();\r\n\r\n        this.setState({\r\n            signals: signals,\r\n        });\r\n        console.log(this.state.signals);\r\n\r\n    \r\n    }\r\n\r\n    generateSignal(amplitude, frequency, phase){\r\n        // Generating path data\r\n        let points = [];\r\n        // This assumes that sumPlot and sinePlots have the same dimensions, since generateSignal() is called from those plots\r\n        const divHeight = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        const plotWidth = 0.8 * document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n        // console.log(\"Plot Width\",plotWidth)\r\n        // console.log(\"Div Height\", divHeight)\r\n        let scale = -divHeight/10;\r\n        let x_offset = 0;\r\n        let y_offset = 0;\r\n\r\n        // let Fs = 80;\r\n        let Ts = Math.PI / (plotWidth/4);\r\n\r\n        /* Calculation Reference\r\n        // Assuming the plot is 800x800\r\n        // 1 period = 1 second\r\n        // 1 period = 400 pixels => Ts = 400 samples per second\r\n        // 1 Hz = 2pi radians\r\n\r\n        // Sampling frequency = samples/second\r\n        // 1 sample per 1/400 second (Ts = 1/400)\r\n        // Fs = 2pi * (1/400)\r\n        // Fs = pi / 200\r\n\r\n        // Frequency is in Hz\r\n        // This is bascially an inverse FFT \r\n        // i is basically our t (1 unit of time)\r\n        */\r\n        for(let i = x_offset; i< plotWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude*Math.sin(Ts*frequency*i + (phase * (Math.PI / 180) )) + (divHeight/2 + y_offset)];\r\n        }\r\n        // console.log(\"Plot Length\", points.length)\r\n\r\n        return points;\r\n    }\r\n\r\n    generateDC(amplitude){\r\n        let points = [];\r\n        const divHeight = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        const plotWidth = 0.8 * document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n        let scale = - divHeight/10;\r\n\r\n        let x_offset = 0;\r\n        let y_offset = 0;\r\n\r\n        for(let i = x_offset; i< plotWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude + (divHeight/2 + y_offset)];\r\n        }\r\n \r\n        return points\r\n    }\r\n\r\n    updateDials(){\r\n        const signals = this.state.signals;\r\n\r\n        for(let i = 0; i< signals.length; i++){\r\n            document.getElementById(\"signal\" + signals[i].id + \"_AmpText\").value = signals[i].amplitude;\r\n            document.getElementById(\"signal\" + signals[i].id + \"_FreqText\").value = signals[i].frequency;\r\n        }\r\n    }\r\n\r\n    handleChange(event){\r\n\r\n\r\n        const signals = this.state.signals;\r\n        const inputType = event.target.getAttribute('input_type');\r\n        const signalID = event.target.getAttribute('signal_id'); // Signal ID Number\r\n        let value = parseFloat(event.target.value);   \r\n\r\n        // Text Form can currently exceed the maximum limit of 10, should limit?\r\n\r\n        if((inputType === \"AmpDial\") || (inputType === \"AmpText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                // DC Case\r\n                if(signalID == 0){\r\n                    signals[signalID].amplitude = value; \r\n                    signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n                    document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n                }\r\n                // All Other cases\r\n                else{\r\n                    signals[signalID].amplitude = value;                 \r\n                    signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                    document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n                }     \r\n            }\r\n        }\r\n        else if ((inputType === \"PhaseDial\") || (inputType === \"PhaseText\")){\r\n            console.log(\"HELLO\")\r\n            console.log(signals[signalID].amplitude)\r\n            console.log(signals[signalID].phase)\r\n\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                // DC Case\r\n                if(signalID == 0){\r\n                    signals[signalID].phase = value; \r\n                    signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n                    document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n                }\r\n                 // All Other cases\r\n                else{\r\n                    signals[signalID].phase = value; \r\n                    signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                    document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n                }\r\n            }\r\n        }     \r\n\r\n        this.setState({\r\n                signals: signals,   \r\n            }   \r\n        );\r\n\r\n    }\r\n\r\n    \r\n    handleMouseDown(e){\r\n        console.log(\"clicked\")\r\n\r\n        e.preventDefault();\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n\r\n        signals[signalID].dragging = true;\r\n\r\n        this.setState({\r\n            signals: signals,   \r\n            }\r\n        );   \r\n    }\r\n\r\n    handleMouseUp(e){\r\n        console.log(\"click released\")\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n        console.log(e.type)\r\n        if(e.type == 'mouseout' && signals[signalID].dragging) {\r\n            console.log(\"mouse went out\")\r\n            return;\r\n        }\r\n\r\n        signals[signalID].dragging = false;\r\n        \r\n        this.setState({\r\n            signals: signals,   \r\n            }\r\n        );\r\n        \r\n    }\r\n\r\n    // Base Mouse move function. Used in Frequency Domain. Not currently in use in this .js file\r\n    handleMouseMove(e) {\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n\r\n        //If we are dragging\r\n          if (signals[signalID].dragging) {\r\n              e.preventDefault();\r\n\r\n              console.log(e)\r\n              console.log(e.target)\r\n              console.log(\"clientX:\",e.clientX)\r\n              console.log(\"clientY:\",e.clientY)\r\n              // console.log(e.target.parentNode.parentNode)\r\n            let  rect = e.target.parentNode.parentNode.getBoundingClientRect();  \r\n\r\n            console.log(rect.left);\r\n            console.log(rect.top);\r\n\r\n\r\n            // Maybe should seperate coordinates and freq/amp values\r\n             signals[signalID].frequency = (e.clientX - rect.left - 400) / 100;\r\n             signals[signalID].amplitude = - (e.clientY - rect.top - 400) / 100;\r\n             signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n\r\n\r\n            // We should set position limits\r\n\r\n            console.log(signals[signalID].frequency)\r\n            console.log(signals[signalID].amplitude)\r\n\r\n            console.log(this)\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n                }\r\n            );  \r\n        }\r\n    }\r\n\r\n    handleMouseMoveFourierMag(e) {\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n\r\n        //If we are dragging\r\n          if (signals[signalID].dragging) {\r\n              e.preventDefault();\r\n\r\n\r\n            console.log(e.target)\r\n            let  rect = e.target.parentNode.parentNode.getBoundingClientRect();  \r\n\r\n            let divHeight = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n            let divWidth = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n            let plotHeight = 0.8*divHeight;\r\n            let plotWidth = 0.8*divWidth;\r\n\r\n            // Maybe should seperate coordinates and freq/amp values\r\n             signals[signalID].frequency = signals[signalID].id;\r\n             signals[signalID].amplitude = - (e.clientY - rect.top - divHeight/2) / (plotHeight/8);    // 800: svg height, 8: max axis size (-4 to 4)\r\n             signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n\r\n            // We should set position limits\r\n\r\n            // Checking if signal is the DC value\r\n            if(signalID == 0){\r\n                signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n            }\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n                }\r\n            );  \r\n        }\r\n    }\r\n    \r\n    handleMouseMoveFourierPhase(e) {\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n        const circleCX = e.target.getAttribute('cx'); // Circle x position\r\n        console.log(\"signalID: \",signalID)\r\n        console.log(circleCX)\r\n\r\n        //If we are dragging\r\n          if (signals[signalID].dragging) {\r\n              e.preventDefault();\r\n\r\n\r\n            console.log(e.target)\r\n            let  rect = e.target.parentNode.parentNode.getBoundingClientRect();  \r\n\r\n            let divHeight = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n            let divWidth = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n            let plotHeight = 0.8*divHeight;\r\n            let plotWidth = 0.8*divWidth;\r\n\r\n            // Maybe should seperate coordinates and freq/amp values\r\n\r\n            if(circleCX >= 0){\r\n                signals[signalID].phase = parseInt( - (e.clientY - rect.top - divHeight/2) / (plotHeight/360));\r\n            } \r\n            else if(circleCX < 0){\r\n                signals[signalID].phase = parseInt( (e.clientY - rect.top - divHeight/2) / (plotHeight/360));\r\n            } \r\n\r\n            signals[signalID].frequency = signals[signalID].id; \r\n            signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n\r\n            // We should set position limits\r\n\r\n            // Checking if signal is the DC value\r\n            if(signalID == 0){\r\n                signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n            }\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n                }\r\n            );  \r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n    const current = this.state.signals;\r\n\r\n    return (\r\n            <div className = {styles.container}>\r\n\r\n                <div className = {styles.timePlots} id = \"timePlotsID\">\r\n                    <div className = {styles.sinePlots} id =\"sinePlotsID\">\r\n                        <svg id=\"svgSinePlot\" width=\"40vw\" height=\"45vh\" \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black'\r\n                                }}> \r\n                            <SinePlot\r\n                                signals = {current}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                    <div className = {styles.sumPlots} id =\"sumPlotsID\">\r\n                        <svg id=\"svgSumPlot\" width=\"40vw\" height=\"45vh\" \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black'\r\n                                }}> \r\n                            <SumPlot\r\n                                signals = {current}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className = {styles.otherPlots}>\r\n                    <div className = {styles.fourierPhasePlots} id =\"fourierPhasePlotsID\">\r\n                        <svg id=\"svgFourierPhasePlot\" width=\"40vw\" height=\"45vh\"  \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black',\r\n                                \r\n                                }}> \r\n                        \r\n                            <FourierPhasePlot\r\n                                signals = {current}\r\n                                onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                                onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                                onMouseOut = {(event) => this.handleMouseUp(event)}\r\n                                onMouseMove = {(event) => this.handleMouseMoveFourierPhase(event)}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className = {styles.fourierMagPlots} id =\"fourierMagPlotsID\">\r\n                        <svg id=\"svgFourierMagPlot\" width=\"40vw\" height=\"45vh\"  \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black',\r\n                                \r\n                                }}> \r\n                        \r\n                            <FourierMagPlot\r\n                                signals = {current}\r\n                                onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                                onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                                onMouseOut = {(event) => this.handleMouseUp(event)}\r\n                                onMouseMove = {(event) => this.handleMouseMoveFourierMag(event)}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className = {styles.controls}>\r\n                    \r\n                        <Controls\r\n                            signals = {current}\r\n                            onChange = {(event) => this.handleChange(event)}\r\n                            onAdd = {() => this.addSignal()}\r\n                            onRemove = {(i) => this.removeSignal(i)}\r\n                        />\r\n                    \r\n                </div>\r\n            </div>\r\n      );\r\n    }\r\n  }","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styles from './FrequencyDomain.module.css';\r\nimport * as d3 from \"d3\";\r\n\r\nconst svgContainerWidth = 800;\r\nconst svgContainerHeight = 800;\r\n\r\nfunction Dials(props) {\r\n    return(\r\n        <div className={styles.signal_container}>\r\n            <div className={styles.signal_info}>\r\n                <div>ID: {props.signal.id}</div>\r\n                <button id = \"remove-signal\" onClick={(i) => props.onRemove(props.signal.id)}> Remove Signal </button>\r\n            </div>\r\n            <div className={styles.signal_props}>\r\n                <div>Amplitude: {props.signal.amplitude}</div>\r\n                <div>Frequency: {props.signal.frequency}</div>\r\n                <div>Phase: {props.signal.phase}</div>\r\n            </div>\r\n            <div className = {styles.signal_dials}>\r\n                <div>\r\n                    <input \r\n                    id = {\"signal\" + props.signal.id + \"_AmpDial\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpDial\"}\r\n                    type =\"range\" \r\n                    min={-5} \r\n                    max ={5} \r\n                    value = {props.signal.amplitude} \r\n                    step={0.1}\r\n                    onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                    id = {\"signal\" + props.signal.id + \"_AmpText\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpText\"}\r\n                    type = \"number\"  \r\n                    min = {-5}\r\n                    max = {5}\r\n                    onChange={props.onChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        id = {\"signal\" + props.signal.id + \"_FreqDial\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"FreqDial\"}\r\n                        type =\"range\" \r\n                        min={-4} \r\n                        max ={4} \r\n                        value = {props.signal.frequency} \r\n                        step={0.1}\r\n                        onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                        id = {\"signal\" + props.signal.id + \"_FreqText\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"FreqText\"}\r\n                        type = \"number\"  \r\n                        min = {-4}\r\n                        max = {4}\r\n                        onChange={props.onChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        id = {\"signal\" + props.signal.id + \"_PhaseDial\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseDial\"}\r\n                        type =\"range\" \r\n                        min={-180} \r\n                        max ={180} \r\n                        value = {props.signal.phase} \r\n                        step={1}\r\n                        onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                        id = {\"signal\" + props.signal.id + \"_PhaseText\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseText\"}\r\n                        type = \"number\"  \r\n                        min = {-180}\r\n                        max = {180}\r\n                        onChange={props.onChange}\r\n                    />\r\n                </div>        \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Controls extends React.Component {\r\n\r\n    renderDial(signal){\r\n        return(\r\n            <Dials\r\n                signal = {signal}\r\n                onChange = {(event) => this.props.onChange(event)}\r\n                onRemove = {(i) => this.props.onRemove(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n        const signalList = []; \r\n        for (let i=0; i < this.props.signals.length; i++){\r\n            signalList.push(\r\n                <div key={\"signal\" + this.props.signals[i].id}> \r\n                    {this.renderDial(this.props.signals[i])} \r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            <div className = {styles.dials} >\r\n                {signalList}\r\n                <button id = \"add-signal\" align-content = \"center\" onClick={() => this.props.onAdd()}> Add New Signal </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction Circles(props) {\r\n        return(\r\n            <circle\r\n                id = {\"circle_\"+props.signal.id}\r\n                signal_id = {props.signal.id}\r\n                cx = {(props.signal.frequency)* (800/8)}\r\n                cy = {(props.signal.amplitude)*(800/8)}\r\n                transform=\"translate(400,400) scale(1,-1)\"\r\n                r = {20}\r\n                fill = \"black\"\r\n                stroke = \"black\"\r\n                strokeWidth=\"1\"\r\n                onMouseDown={props.onMouseDown}\r\n                onMouseUp={props.onMouseUp}\r\n                onMouseOut={props.onMouseUp}\r\n                onMouseMove={props.onMouseMove}\r\n            />\r\n        );\r\n    \r\n}\r\n\r\n\r\nclass SinePlot extends React.Component {\r\n    render(){\r\n        const current = this.props.signals;\r\n    \r\n        // Appending svg\r\n        // Check if the element 'svg_id' exists. If not, create new svg, append and draw it\r\n        // Not sure if this scales well \r\n\r\n        for(let i = 0; i < current.length; i++){\r\n\r\n            let svgID  = 'svg_'\r\n            let pathID = 'path_'\r\n            svgID = svgID.concat(i.toString(10))\r\n            pathID = pathID.concat(i.toString(10))\r\n\r\n            let lineGenerator = d3.line()\r\n                                  .curve(d3.curveNatural);\r\n\r\n            let pathData = lineGenerator(current[i].values);\r\n\r\n             // Create scale\r\n            let xscale = d3.scaleLinear()\r\n                        .domain([0, 2]) // This needs to be dynamic\r\n                        .range([50, 750]);\r\n\r\n            let yscale = d3.scaleLinear()\r\n                        .domain([3.5,-3.5]) // This needs to be dynamic\r\n                        .range([50, 750]);\r\n\r\n            // Add scales to axis\r\n            let x_axis = d3.axisBottom()\r\n                .scale(xscale);\r\n\r\n            let y_axis = d3.axisLeft()\r\n                .scale(yscale);\r\n\r\n            // For now, if svgID exists, then just redraw\r\n            if(document.getElementById(svgID)){\r\n                d3.select(\"#\"+pathID).attr(\"d\", pathData)  \r\n            }\r\n            \r\n            // If svgID doesn't exist, then add it to the DOM\r\n\r\n            if(!document.getElementById(svgID)){\r\n                //The SVG Container\r\n                const svgSinePlot = d3.select(\"#sinePlotsID\").append(\"svg\")\r\n                .attr(\"id\",svgID)\r\n                .attr(\"width\", svgContainerWidth)\r\n                .attr(\"height\", svgContainerHeight)\r\n                .attr(\"transform\",\"translate(10)\")\r\n                .attr(\"style\",\"position: absolute\")\r\n                .attr(\"style\", \"border: 1px solid black\")\r\n                .attr(\"top\",\"100px\")\r\n                .attr(\"left\",\"50px\")\r\n\r\n                svgSinePlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",400)\r\n                .attr(\"y\",30)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sine Plot \" + i);\r\n\r\n                //The line SVG Path we draw\r\n                svgSinePlot.append(\"path\")\r\n                .attr(\"id\",pathID)\r\n                .attr(\"transform\",\"translate(50)\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"stroke\", \"blue\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(0,400)\")\r\n                .call(x_axis);\r\n                \r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(50,0)\")\r\n                .call(y_axis);\r\n            }          \r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport class FrequencyPlot extends React.Component {\r\n\r\n    renderCircle(signal){\r\n        return(\r\n            <Circles\r\n                signal = {signal}\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n    const signals = this.props.signals;\r\n     \r\n        let freqSvg = d3.select(\"#svgFreqPlot\")\r\n\r\n        const circleList = []; \r\n       \r\n        for (let i=0; i < this.props.signals.length; i++){\r\n            circleList.push(\r\n                    this.renderCircle(this.props.signals[i])\r\n            )\r\n        }\r\n        \r\n        // Should probably check both axis if they exist before appending\r\n        if(!document.getElementById(\"x_axis_freqPlot\")){\r\n\r\n            // Create Axis for Frequency Plot\r\n            let xscale_freq = d3.scaleLinear()\r\n                                .domain([-3.5, 3.5]) // This needs to be dynamic\r\n                                .range([50, 750]);\r\n\r\n            let yscale_freq = d3.scaleLinear()\r\n                                .domain([3.5,-3.5]) // This needs to be dynamic\r\n                                .range([50, 750]);\r\n\r\n            // Add scales to axis\r\n            let x_axis_freq = d3.axisBottom()\r\n                                .scale(xscale_freq);\r\n\r\n            let y_axis_freq = d3.axisLeft()\r\n                                .scale(yscale_freq);\r\n            \r\n            freqSvg.append(\"text\")\r\n                    .attr(\"text-anchor\", \"middle\")  \r\n                    .attr(\"x\",400)\r\n                    .attr(\"y\",30)\r\n                    .style(\"font-size\", \"16px\") \r\n                    .style(\"text-decoration\", \"underline\")  \r\n                    .text(\"Frequency Domain Plot\");\r\n                    \r\n            freqSvg.append('g')\r\n                    .attr(\"id\",\"x_axis_freqPlot\")\r\n                    .attr(\"transform\",\"translate(0,400)\")\r\n                    .call(x_axis_freq);\r\n\r\n            freqSvg.append('g')\r\n                    .attr(\"id\",\"y_axis_freqPlot\")\r\n                    .attr(\"transform\",\"translate(400,0)\")\r\n                    .call(y_axis_freq); \r\n        }\r\n\r\n        return( \r\n            <svg>\r\n               {circleList}\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n\r\nclass SumPlot extends React.Component {\r\n\r\n    render(){\r\n\r\n        let sumSignals = []; \r\n        let svgContainerHeight = 800;\r\n        let plotWidth = 700;\r\n\r\n        // This will break if we change plotWidth elsewhere \r\n        for(let k = 0; k < plotWidth; k++){\r\n            sumSignals.push([0,0]);\r\n        }\r\n\r\n        // Looping through all the signals\r\n        for (let i=0; i < this.props.signals.length; i++){\r\n\r\n            // Looping through the signal values\r\n            for(let j=0; j < this.props.signals[i].values.length; j++){\r\n\r\n                //sumSignals[j] = this.props.signals[i].values[j];\r\n                sumSignals[j][0] = this.props.signals[i].values[j][0];\r\n                sumSignals[j][1] += this.props.signals[i].values[j][1];\r\n            }\r\n            \r\n        }\r\n\r\n        // There is a way to scale this to the svg dimenesions rather than hardcoding it\r\n        for (let n =0; n < sumSignals.length; n++){\r\n            sumSignals[n][1] = sumSignals[n][1] - (this.props.signals.length-1)*(svgContainerHeight/2)\r\n        }\r\n\r\n        let lineGenerator = d3.line()\r\n          .curve(d3.curveNatural);\r\n\r\n        let pathData = lineGenerator(sumSignals);\r\n\r\n        // Create scale\r\n        let xscale = d3.scaleLinear()\r\n        .domain([0, 2]) // This needs to be dynamic\r\n        .range([50, 750]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n        .domain([3.5,-3.5]) // This needs to be dynamic\r\n        .range([50, 750]);\r\n\r\n        // Add scales to axis\r\n        let x_axis = d3.axisBottom()\r\n        .scale(xscale);\r\n\r\n        let y_axis = d3.axisLeft()\r\n        .scale(yscale);\r\n\r\n        //The line SVG Path we draw\r\n\r\n        // If exists, update\r\n        if(document.getElementById(\"path_Sum\")){\r\n            d3.select(\"#\"+\"path_Sum\").attr(\"d\", pathData)  \r\n               \r\n        }\r\n        \r\n        // Draws path if it doesn't exist\r\n        if(!document.getElementById(\"path_Sum\")){\r\n             d3.select(\"#svgSumPlot\").append(\"path\")\r\n                .attr(\"id\",\"path_Sum\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"transform\",\"translate(50)\")\r\n                .attr(\"stroke\", \"blue\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n\r\n            const svgSumPlot = d3.select(\"#svgSumPlot\")\r\n\r\n                svgSumPlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",400)\r\n                .attr(\"y\",30)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sum of Signals Plot\");\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\",\"translate(0,400)\")\r\n                .call(x_axis);\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\",\"translate(20,0)\")\r\n                .call(y_axis)\r\n                .attr(\"transform\",\"translate(50,0)\");\r\n                \r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class FrequencyDomain extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            signals: [\r\n                /* Example signal object \r\n                    {\r\n                    id: 0,\r\n                    amplitude: 1,\r\n                    frequency: 1,\r\n                    values: this.generateSignal(1,1),\r\n                    dragging: false,    \r\n                    },\r\n                */\r\n            ],\r\n            circles:[\r\n            ],\r\n        };\r\n        // This binding is necessary to make `this.` work in the callback   \r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseUp = this.handleMouseUp.bind(this);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    }\r\n    \r\n    addSignal(){\r\n        const signals = this.state.signals;\r\n\r\n        // Once this.setState has been called, it'll call render() to render straight away\r\n        this.setState({\r\n            signals: signals.concat([{  // Just concatenating array of JSON\r\n                id: signals.length,\r\n                amplitude: 0,           // Should be user input\r\n                frequency: 0,           // Should be user input\r\n                phase: 0,\r\n                values: this.generateSignal(0,0,0),\r\n                dragging: false,    \r\n            },]),\r\n        });        \r\n\r\n\r\n    }\r\n\r\n    removeSignal(i){\r\n        // Need to find signal id from the array and delete, then re-update id's\r\n        const signals = this.state.signals;\r\n\r\n\r\n        console.log(\"Hi from removeSignal\");    \r\n        console.log(i)\r\n        console.log(\"Before: \", signals);\r\n        signals.splice(i,1)\r\n        console.log(\"After:\", signals);\r\n\r\n        for(let n = 0; n< this.state.signals.length; n++){\r\n            signals[n].id = n;\r\n        }        \r\n\r\n        // Find the svgId and pathID and delete from DOM\r\n\r\n        let svgID  = 'svg_'\r\n        let pathID = 'path_'\r\n        svgID = svgID.concat(i.toString(10))\r\n        pathID = pathID.concat(i.toString(10))\r\n\r\n        d3.select(\"#\"+svgID).remove();\r\n\r\n        this.setState({\r\n            signals: signals,\r\n        });\r\n        console.log(this.state.signals);\r\n\r\n    \r\n    }\r\n\r\n    generateSignal(amplitude, frequency, phase){\r\n        // Generating path data\r\n        let points = [];\r\n        const plotHeight = 700;\r\n        const plotWidth = 700;\r\n        let scale = -100;\r\n        let x_offset = 0;\r\n        let y_offset = 50;\r\n\r\n        let Fs = 80;\r\n        let Ts = Math.PI / 200;\r\n\r\n        /* Calculation Reference\r\n        // 1 period = 1 second\r\n        // 1 period = 400 pixels => Ts = 400 samples per second\r\n        // 1 Hz = 2pi radians\r\n\r\n        // Sampling frequency = samples/second\r\n        // 1 sample per 1/400 second (Ts = 1/400)\r\n        // Fs = 2pi * (1/400)\r\n        // Fs = pi / 200\r\n\r\n        // Frequency is in Hz\r\n        // This is bascially an inverse FFT \r\n        // i is basically our t (1 unit of time)\r\n        */\r\n        for(let i = x_offset; i< plotWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude*Math.sin(Ts*frequency*i + (phase * (Math.PI / 180) )) + (plotHeight/2 + y_offset)];\r\n        }\r\n        return points;\r\n    }\r\n\r\n    updateDials(){\r\n        const signals = this.state.signals;\r\n\r\n        for(let i = 0; i< signals.length; i++){\r\n            document.getElementById(\"signal\" + signals[i].id + \"_AmpText\").value = signals[i].amplitude;\r\n            document.getElementById(\"signal\" + signals[i].id + \"_FreqText\").value = signals[i].frequency;\r\n        }\r\n    }\r\n\r\n    handleChange(event){\r\n\r\n\r\n        const signals = this.state.signals;\r\n        const inputType = event.target.getAttribute('input_type');\r\n        const signalID = event.target.getAttribute('signal_id'); // Signal ID Number\r\n        let value = parseFloat(event.target.value);   \r\n\r\n        // Text Form can currently exceed the maximum limit of 10, should limit?\r\n\r\n        if((inputType === \"AmpDial\") || (inputType === \"AmpText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                signals[signalID].amplitude = value;                 \r\n                signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n            }\r\n        }\r\n        else if ((inputType === \"FreqDial\") || (inputType === \"FreqText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                signals[signalID].frequency = value; \r\n                signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                document.getElementById(\"signal\" + signalID + \"_FreqText\").value = value;\r\n            }\r\n        } \r\n        else if ((inputType === \"PhaseDial\") || (inputType === \"PhaseText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                signals[signalID].phase = value; \r\n                signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n            }\r\n        }     \r\n\r\n        this.setState({\r\n                signals: signals,   \r\n            }   \r\n        );\r\n\r\n    }\r\n\r\n    \r\n    handleMouseDown(e){\r\n        console.log(\"clicked\")\r\n\r\n        e.preventDefault();\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n\r\n        signals[signalID].dragging = true;\r\n\r\n        this.setState({\r\n            signals: signals,   \r\n            }\r\n        );   \r\n    }\r\n\r\n    handleMouseUp(e){\r\n        console.log(\"click released\")\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n        console.log(e.type)\r\n        if(e.type == 'mouseout' && signals[signalID].dragging) {\r\n            console.log(\"mouse went out\")\r\n            return;\r\n        }\r\n\r\n        signals[signalID].dragging = false;\r\n        \r\n        this.setState({\r\n            signals: signals,   \r\n            }\r\n        );\r\n        \r\n    }\r\n\r\n    handleMouseMove(e) {\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n\r\n        //If we are dragging\r\n          if (signals[signalID].dragging) {\r\n              e.preventDefault();\r\n\r\n              console.log(e)\r\n              console.log(e.target)\r\n              console.log(\"clientX:\",e.clientX)\r\n              console.log(\"clientY:\",e.clientY)\r\n              // console.log(e.target.parentNode.parentNode)\r\n            let  rect = e.target.parentNode.parentNode.getBoundingClientRect();  \r\n\r\n            console.log(rect.left);\r\n            console.log(rect.top);\r\n\r\n\r\n            // Maybe should seperate coordinates and freq/amp values\r\n             signals[signalID].frequency = (e.clientX - rect.left - 400) / 100;\r\n             signals[signalID].amplitude = - (e.clientY - rect.top - 400) / 100;\r\n             signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n\r\n\r\n            // We should set position limits\r\n\r\n            console.log(signals[signalID].frequency)\r\n            console.log(signals[signalID].amplitude)\r\n\r\n            console.log(this)\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n                }\r\n            );  \r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n    const current = this.state.signals;\r\n\r\n    return (\r\n            <div className = {styles.container}>\r\n\r\n                <div className = {styles.sinePlots} id =\"sinePlotsID\">\r\n                    <SinePlot\r\n                        signals = {current}\r\n                    />\r\n                </div>\r\n\r\n                <div className = {styles.otherPlots}>\r\n                    <div className = {styles.freqPlots} id =\"freqPlotsID\">\r\n                        <svg id=\"svgFreqPlot\" width=\"800\" height=\"800\"  \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black',\r\n                                \r\n                                }}> \r\n                        \r\n                            <FrequencyPlot\r\n                                signals = {current}\r\n                                onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                                onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                                onMouseOut = {(event) => this.handleMouseUp(event)}\r\n                                onMouseMove = {(event) => this.handleMouseMove(event)}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className = {styles.sumPlots} id =\"sumPlotsID\">\r\n                        <svg id=\"svgSumPlot\" width=\"800\" height=\"800\" \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black'\r\n                                }}> \r\n                            <SumPlot\r\n                                signals = {current}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div className = {styles.controls}>\r\n                    \r\n                        <Controls\r\n                            signals = {current}\r\n                            onChange = {(event) => this.handleChange(event)}\r\n                            onAdd = {() => this.addSignal()}\r\n                            onRemove = {(i) => this.removeSignal(i)}\r\n                        />\r\n                    \r\n                </div>\r\n            </div>\r\n      );\r\n    }\r\n  }","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n// import logo from './logo.svg';\nimport styles from './App.module.css';\nimport * as d3 from \"d3\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport {FourierCoefficients} from './FourierCoefficients.js'\nimport {FrequencyDomain} from './FrequencyDomain.js'\n\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n*/\n\n\n/* Known Bugs:\n- removeSignal() only works if you starting removing from the last signal\n- if you move/drag the mouse too fast the circle doesn't catch up\n- phase dial for DC signal updates amplitude when it's not meant to\n- negative phase circle is meant to move in opposite direction when dragged (cartersian coordinate problem)\n\n\n- Changing frequency does update the signal (when it's not meant to)\n^ But this is deliberate because we haven't updated FreqPlot functionality to fit with Fourier Plots\n*/\n\n\n\nfunction App() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        </header>\n        <Router>\n          <div className = {styles.navbar}>\n                      <div className = {styles.tab} id=\"home\">  \n                        <Link to=\"/\">Home</Link>\n                      </div>\n                      <div className = {styles.tab}> \n                        <Link to=\"/about\">About</Link>\n                      </div>\n                      <div className = {styles.tab}>  \n                        <Link to=\"/FourierCoefficients\">Fourier Coefficients</Link>\n                      </div>\n                      <div className = {styles.tab}>  \n                        <Link to=\"/FrequencyDomain\">Frequency Domain</Link>\n                      </div>\n          </div>\n            {/*\n              A <Switch> looks through all its children <Route>\n              elements and renders the first one whose path\n              matches the current URL. Use a <Switch> any time\n              you have multiple routes, but you want only one\n              of them to render at a time\n            */}\n\n            <Switch>\n              <Route exact path=\"/\">\n                <Home />\n              </Route>\n              <Route path=\"/about\">\n                <About />\n              </Route>\n              <Route path=\"/FourierCoefficients\">\n                <FourierCoefficients />\n              </Route>\n              <Route path=\"/FrequencyDomain\">\n                <FrequencyDomain />\n              </Route>\n            </Switch>\n  \n        </Router>\n      </div>\n    );\n  }\n\n  function About() {\n    return (\n      <div className = {styles.centertext}>  \n        <div>\n          <h2>About the Project</h2>\n            <h4>\n              The aim of the project was to help students to have a more intuitive understanding \n              of the various topics in ECE2111 - Signals and Systems. The unit ECE2111, Signals and Systems, \n              taught by lecturer James Saunderson, involves many visual representations of the properties of \n              sinusoidal signals and their frequency response. \n            </h4>\n            <h4>\n              James had an idea of a helpful, interactive web application where students could interact \n              with and adjust signal properties and observe the relationships in time domain, frequency \n              domain etc. Hence, this final year project was proposed.\n            </h4>\n          <h2/>\n        </div>\n      </div>\n    );\n  }\n  \n  class Home extends React.Component{\n    render() {\n\n      return(\n      <div>\n        <div className = {styles.centertext}>  \n          <h2>Welcome!</h2>\n          <h4>\n            This website was designed to allow students to learn more about topics in the unit ECE2111\n            through visualization and interaction with signal properties.\n            \n          </h4>\n            <h4>\n              Feel free to explore the topics, there's (hopefully) more to come!\n            </h4>\n          </div>\n      </div>\n      )\n\n    };\n  }\n\n  // ========================================\n  \n  ReactDOM.render(\n    <App />,\n    document.getElementById('root')\n  );\n\n  export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}