{"version":3,"sources":["FourierCoefficients.module.css","FourierCoefficients.js","App.js","serviceWorker.js","index.js","App.module.css"],"names":["module","exports","Dials","props","Grid","id","concat","signal","toString","signal_id","className","styles","signal_container","signal_info","Tooltip","title","IconButton","aria-label","color","Box","component","m","p","bgcolor","Button","onClick","signalID","onRemove","variant","signal_props","amplitude","toFixed","input_type","type","min","max","value","step","onChange","phase","d3","prototype","moveToFront","this","each","parentNode","appendChild","moveToBack","firstChild","insertBefore","Controls","event","i","signalList","signals","length","push","key","renderDial","dials","global_controls","align-content","onAdd","style","gridRow","name","demoSignal","onDemoSignal","FormControlLabel","label","labelPlacement","control","Switch","checked","plotViewState","onToggleView","inputProps","gridColumn","alignItems","justifyContent","plotView","React","Component","FourierCirclesMagPos","strokeWidth","divHeight","document","getElementById","getBoundingClientRect","height","divWidth","width","plotHeight","plotWidth","highlight","radius","fourierMultiples","fourierCircles","cx","cy","transform","r","fill","colour","stroke","FourierCirclesMagNeg","FourierCirclesPhasePos","FourierCirclesPhaseNeg","FourierMagPlot","FourierMagSvg","remove","xscale_freq","domain","range","yscale_freq","xAxisTicks","ticks","filter","tick","Number","isInteger","yAxisTicks","x_axis_freq","tickValues","tickFormat","y_axis_freq","append","attr","call","text","drawAxis","circleList","renderCirclePos","renderCircleNeg","FourierPhasePlot","CosinePlot","svgCosinePlot","xscale","yscale","x_axis","scale","y_axis","pathData","curve","lineGenerator","values","pathID","SumPlot","svgSumPlot","sumSignals","k","j","n","FourierCoefficients","state","handleMouseDown","bind","handleMouseUp","handleMouseOverFourier","handleMouseMoveFourierMag","handleMouseMoveFourierPhase","handleDemoSignal","intensity","frequency","generateSignal","draggingMag","draggingPhasePos","draggingPhaseNeg","rgb","animating","newSignal","splice","setState","index","points","Ts","Math","PI","cos","inputType","target","getAttribute","parseInt","parseFloat","isNaN","generateDC","e","preventDefault","stopPropagation","elementID","includes","circleID","dragging","rect","clientY","top","circleCX","condition","signalControlID","opacity","emptyPlots","alternate","pow","current","container","timePlots","cosinePlots","position","left","border","sumPlots","otherPlots","fourierMagPlots","onMouseDown","onMouseUp","onMouseMove","onMouseOver","fourierPhasePlots","controls","handleChange","addSignal","removeSignal","onAnimate","animateSignal","toggleView","App","Typography","navbar","tab","to","exact","path","About","centertext","Home","ReactDOM","render","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6cda4234.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"FourierCoefficients_home__10kQG\",\"container\":\"FourierCoefficients_container__kd25g\",\"navbar\":\"FourierCoefficients_navbar__2pTv4\",\"tab\":\"FourierCoefficients_tab__8pHCY\",\"controls\":\"FourierCoefficients_controls___EOHp\",\"dials\":\"FourierCoefficients_dials__1zijK\",\"global_controls\":\"FourierCoefficients_global_controls__1LP2r\",\"signal_container\":\"FourierCoefficients_signal_container__1Of7C\",\"signal_info\":\"FourierCoefficients_signal_info__2oYZ9\",\"signal_props\":\"FourierCoefficients_signal_props__1Kcya\",\"signal_dials\":\"FourierCoefficients_signal_dials__kLbm8\",\"signal_animate\":\"FourierCoefficients_signal_animate__2qmfm\",\"timePlots\":\"FourierCoefficients_timePlots__vs39U\",\"cosinePlots\":\"FourierCoefficients_cosinePlots__1MO-n\",\"otherPlots\":\"FourierCoefficients_otherPlots__AqeTC\",\"fourierMagPlots\":\"FourierCoefficients_fourierMagPlots__1Fesw\",\"fourierPhasePlots\":\"FourierCoefficients_fourierPhasePlots__3rZM3\",\"sumPlots\":\"FourierCoefficients_sumPlots__DMOR_\",\"fourierCircles\":\"FourierCoefficients_fourierCircles__2jYlh\"};","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styles from './FourierCoefficients.module.css'; \r\nimport * as d3 from \"d3\";\r\nimport { hsl, nest } from 'd3';\r\nimport { rgb } from 'd3';\r\n\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\n// Prototype functions to move signals SVG elements front and back when hovered\r\nd3.selection.prototype.moveToFront = function() {\r\n    return this.each(function(){\r\n      this.parentNode.appendChild(this);\r\n    });\r\n  };\r\n\r\nd3.selection.prototype.moveToBack = function() {\r\n    return this.each(function() {\r\n        let firstChild = this.parentNode.firstChild;\r\n        if (firstChild) {\r\n            this.parentNode.insertBefore(this, firstChild);\r\n        }\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Returns HTML code for the control panel for an individual signal.\r\n *\r\n * @param {object} props An individual signal object and relevenat signal functions.\r\n * @return {HTML} HTML code for the control panel for an individual signal.\r\n */\r\n\r\nfunction Dials(props) {\r\n\r\n    const toolTipText = \"Try adjusting the Amplitude or Phase!\"\r\n\r\n    return(\r\n        <Grid\r\n        id={'signal-controls-'.concat(props.signal.id.toString())} \r\n        signal_id = {props.signal.id}\r\n        className={styles.signal_container}\r\n        >\r\n            <div className={styles.signal_info}>\r\n\r\n            <Tooltip title={toolTipText}>\r\n                <IconButton aria-label=\"Help\" color=\"secondary\">\r\n                    <HelpIcon />\r\n                </IconButton>\r\n            </Tooltip>\r\n                \r\n                <Box component=\"div\" m={0.5} p={1} bgcolor=\"primary.main\">\r\n                    Fundamental Frequency Multiple: {props.signal.id}\r\n                </Box>\r\n                <Button \r\n                    id = \"remove-signal\" \r\n                    onClick={(signalID) => props.onRemove(props.signal.id)}\r\n                    variant=\"contained\"\r\n                    m={1}\r\n                    p={1} \r\n                    color=\"secondary\"\r\n                > \r\n                    Remove Signal \r\n                </Button>\r\n\r\n            </div>\r\n            <Box \r\n                component=\"div\" \r\n                m={0.5} \r\n                p={1} \r\n                bgcolor=\"primary.main\" \r\n                color=\"primary.contrastText\"\r\n                className={styles.signal_props}\r\n            >\r\n                <div className={styles.signal_props}>\r\n                    <div>Amplitude: {props.signal.amplitude.toFixed(2)}</div>\r\n                </div>\r\n                <div className = {styles.signal_props}>\r\n                    <div>\r\n                        <input \r\n                        id = {\"signal\" + props.signal.id + \"_AmpDial\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"AmpDial\"}\r\n                        type =\"range\" \r\n                        min={0} \r\n                        max ={4} \r\n                        value = {props.signal.amplitude} \r\n                        step={0.1}\r\n                        onChange={props.onChange}\r\n                        /> \r\n\r\n                        <input\r\n                        id = {\"signal\" + props.signal.id + \"_AmpText\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"AmpText\"}\r\n                        type = \"number\"  \r\n                        min = {0}\r\n                        max = {4}\r\n                        onChange={props.onChange}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </Box>\r\n\r\n            <Box \r\n                component=\"div\" \r\n                m={0.5} \r\n                p={1} \r\n                bgcolor=\"primary.main\" \r\n                color=\"primary.contrastText\"\r\n                className={styles.signal_props}\r\n            >\r\n                <div className={styles.signal_props}>\r\n                    <div>Phase: {props.signal.phase}</div>\r\n                </div>\r\n                <div className={styles.signal_props}>\r\n                    <div>\r\n                        <input \r\n                            id = {\"signal\" + props.signal.id + \"_PhaseDial\" }\r\n                            signal_id = {props.signal.id}\r\n                            input_type = {\"PhaseDial\"}\r\n                            type =\"range\" \r\n                            min={-180} \r\n                            max ={180} \r\n                            value = {props.signal.phase} \r\n                            step={1}\r\n                            onChange={props.onChange}\r\n                        /> \r\n                        <input\r\n                            id = {\"signal\" + props.signal.id + \"_PhaseText\" }\r\n                            signal_id = {props.signal.id}\r\n                            input_type = {\"PhaseText\"}\r\n                            type = \"number\"  \r\n                            min = {-180}\r\n                            max = {180}\r\n                            onChange={props.onChange}\r\n                        />\r\n                    </div>        \r\n                </div>\r\n            </Box>\r\n\r\n            \r\n        </Grid>\r\n    );\r\n}\r\n\r\n/**\r\n * Returns HTML code for the whole control panel (global controls and each individual signal).\r\n *\r\n * @param {object} props global state variables and functions, signals array and functions \r\n * @return {HTML} HTML code for the control panel (global controls and each individual signal).\r\n */\r\nclass Controls extends React.Component {\r\n\r\n    // Renders a signal's control panel\r\n    renderDial(signal){\r\n        return(\r\n            <Dials\r\n                signal = {signal}\r\n                onChange = {(event) => this.props.onChange(event)}\r\n                onRemove = {(i) => this.props.onRemove(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    // Returns HTML code to the FourierCoefficients parent class to render the control panel\r\n    render(){\r\n\r\n        // Creating each signal's control panel (for every signal in the signals state arary)\r\n        const signalList = []; \r\n        for (let i=0; i < this.props.signals.length; i++){\r\n            signalList.push(\r\n                <div key={\"signal\" + this.props.signals[i].id}> \r\n                    {this.renderDial(this.props.signals[i])} \r\n                </div>\r\n            )\r\n        }\r\n\r\n        const toolTipText = \"Try adding a New Signal or Demo Signal!\"\r\n        return(\r\n            <div className = {styles.dials} >\r\n                <div className = {styles.global_controls}>\r\n\r\n                    <Tooltip title={toolTipText}>\r\n                        <IconButton aria-label=\"Help\" color=\"primary\">\r\n                            <HelpIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                    <Button \r\n                        id = \"add-signal\" \r\n                        align-content = \"center\" \r\n                        onClick={() => this.props.onAdd(0, 0)}\r\n                        variant=\"contained\" \r\n                        color=\"primary\"\r\n                    > \r\n                        Add New Signal \r\n                    </Button>\r\n                    \r\n                    <div style={{gridRow: \"2\"}}> Try a demo signal </div>\r\n\r\n                    <select name=\"demoSignal\" id=\"demoSignal\" \r\n                        value = {this.props.demoSignal}\r\n                        onChange = {(event) => this.props.onDemoSignal(event)}\r\n                        style={{gridRow: \"2\"}}>\r\n                        <option value =\"select\">- Select -</option>\r\n                        <option value =\"empty\">Empty</option>\r\n                        <option value=\"cosine\">Cosine Wave</option>\r\n                        <option value=\"triangle\">Triangle Wave</option>\r\n                        <option value=\"square\">Square Wave Approx</option>\r\n                        <option value=\"sawtooth\">Sawtooth Wave Approx</option>\r\n                    </select>\r\n\r\n                    <div id=\"toggle-view\" style = {{gridRow:\"3\"}}>\r\n                        <FormControlLabel\r\n                            label=\"Toggle View\"\r\n                            labelPlacement = \"Start\"\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.props.plotViewState}\r\n                                    onClick={(event) => this.props.onToggleView(event)}\r\n                                    name=\"toggleViewSwitch\"\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                />\r\n                            }\r\n                        />\r\n                    </div>\r\n\r\n                    <Box \r\n                        style = {{gridRow:\"3\", gridColumn:\"2\"}} \r\n                        bgcolor=\"primary.main\" \r\n                        color=\"white\" m={1}\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                    >\r\n                        {this.props.plotView}\r\n                    </Box>\r\n                   \r\n                </div>\r\n\r\n                {signalList} \r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Returns HTML code for an individual positive Fourier Magnitude Coefficient circle given\r\n * an individual signal's properties. To be plotted on the Fourier Magnitude plot. \r\n *\r\n * @param {object} props an individual signal object \r\n * @return {HTML} HTML code for an individual positive Fourier Magnitude Coefficient circle.\r\n */\r\nfunction FourierCirclesMagPos(props) {\r\n\r\n    // Getting plot's height and width\r\n    let divHeight = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    // Checking if signal has been highlighted\r\n    let strokeWidth\r\n    if(props.signal.highlight){\r\n        strokeWidth = \"2\" \r\n    }\r\n    else{\r\n        strokeWidth = \"1\" \r\n    }\r\n\r\n    // Determining Coefficient's circle radius \r\n    let radius = 10;\r\n    if((plotWidth / (5 * props.fourierMultiples)) < 10){\r\n        radius = plotWidth / (5 * props.fourierMultiples)\r\n    }\r\n\r\n    // Returns HTML code to FourierMagPlot class to render the circle \r\n    return(\r\n        <circle\r\n            className ={styles.fourierCircles}\r\n            id = {\"circle_mag_\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*(plotWidth/ (props.fourierMultiples * 2))}\r\n            cy = {(props.signal.amplitude)*(plotHeight/8)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {radius}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth= {strokeWidth}\r\n        />\r\n    );\r\n}\r\n\r\n/**\r\n * Returns HTML code for an individual negative Fourier Magnitude Coefficient circle given\r\n * an individual signal's properties. To be plotted on the Fourier Magnitude plot. \r\n *\r\n * @param {object} props an individual signal object \r\n * @return {HTML} HTML code for an individual negative Fourier Magnitude Coefficient circle.\r\n */\r\nfunction FourierCirclesMagNeg(props) {\r\n\r\n    // Getting plot's height and width\r\n    let divHeight = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    // Checking if signal has been highlighted\r\n    let strokeWidth\r\n    if(props.signal.highlight){\r\n        strokeWidth = \"2\" \r\n    }\r\n    else{\r\n        strokeWidth = \"1\" \r\n    }\r\n\r\n    // Determining Coefficient's circle radius \r\n    let radius = 10;\r\n    if((plotWidth / (5 * props.fourierMultiples)) < 10){\r\n        radius = plotWidth / (5 * props.fourierMultiples)\r\n    }\r\n\r\n    // Returns HTML code to FourierMagPlot class to render the circle \r\n    return(\r\n        <circle\r\n            id = {\"circle_mag_-\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*-(plotWidth/(props.fourierMultiples * 2))} // 8 is because our x-axis is divided into 8 sections \r\n            cy = {(props.signal.amplitude)*(plotHeight/8)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {radius}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth={strokeWidth}\r\n        />\r\n    );\r\n}\r\n\r\n/**\r\n * Returns HTML code for an individual positive Fourier Phase Coefficient circle given\r\n * an individual signal's properties. To be plotted on the Fourier Phase plot. \r\n *\r\n * @param {object} props an individual signal object \r\n * @return {HTML} HTML code for an individual positive Fourier Phase Coefficient circle.\r\n */\r\nfunction FourierCirclesPhasePos(props) {\r\n\r\n    // Getting plot's height and width\r\n    let divHeight = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    // Checking if signal has been highlighted\r\n    let strokeWidth\r\n    if(props.signal.highlight){\r\n        strokeWidth = \"2\" \r\n    }\r\n    else{\r\n        strokeWidth = \"1\" \r\n    }\r\n\r\n    // Determining Coefficient's circle radius \r\n    let radius = 10;\r\n    if((plotWidth / (5 * props.fourierMultiples)) < 10){\r\n        radius = plotWidth / (5 * props.fourierMultiples)\r\n    }\r\n    \r\n    // Returns HTML code to FourierMagPlot class to render the circle \r\n    return(\r\n        <circle\r\n            id = {\"circle_phase_+\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*(plotWidth/ (props.fourierMultiples * 2))} \r\n            cy = {(props.signal.phase)*(plotHeight/360)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {radius}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth={strokeWidth}\r\n        />\r\n    );\r\n}\r\n\r\n/**\r\n * Returns HTML code for an individual negative Fourier Phase Coefficient circle given\r\n * an individual signal's properties. To be plotted on the Fourier Phase plot. \r\n *\r\n * @param {object} props an individual signal object \r\n * @return {HTML} HTML code for an individual negative Fourier Phase Coefficient circle.\r\n */\r\nfunction FourierCirclesPhaseNeg(props) {\r\n\r\n    // Getting plot's height and width\r\n    let divHeight = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    // Checking if signal has been highlighted\r\n    let strokeWidth\r\n    if(props.signal.highlight){\r\n        strokeWidth = \"2\" \r\n    }\r\n    else{\r\n        strokeWidth = \"1\" \r\n    }\r\n\r\n    // Determining Coefficient's circle radius \r\n    let radius = 10;\r\n    if((plotWidth / (5 * props.fourierMultiples)) < 10){\r\n        radius = plotWidth / (5 * props.fourierMultiples)\r\n    }\r\n\r\n    // Returns HTML code to FourierMagPlot class to render the circle \r\n    return(\r\n        <circle\r\n            id = {\"circle_phase_-\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*-(plotWidth/ (props.fourierMultiples * 2))} \r\n            cy = {-(props.signal.phase)*(plotHeight/360)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {radius}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth={strokeWidth}\r\n        />\r\n    );\r\n}\r\n\r\n/**\r\n * Returns HTML code to FourierCoefficients parent class to render the Fourier Magnitude Plot. \r\n *\r\n * @param {object} props signals state array, fourierMultiples \r\n * @return {HTML} HTML code for the Fourier Magnitude Plot.\r\n */\r\nclass FourierMagPlot extends React.Component {\r\n    \r\n    // Initializing plot's height and width (to be updated later when DOM is loaded)\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    // Draws the axis for the Fourier Magnitude Plot when called\r\n    drawAxis(height, width, fourierMultiples){\r\n\r\n        let FourierMagSvg = d3.select(\"#svgFourierMagPlot\")\r\n\r\n        // If axis exists but we are redrawing\r\n        if(document.getElementById(\"x_axis_fourierMagPlot\") || document.getElementById(\"y_axis_fourierMagPlot\")){\r\n\r\n            // remove current axis\r\n            d3.select(\"#x_axis_fourierMagPlot\").remove();\r\n            d3.select(\"#y_axis_fourierMagPlot\").remove();\r\n        }\r\n\r\n        // Drawing new axis\r\n\r\n        // Creating axis domain based on pixel range for the plot\r\n        let xscale_freq = d3.scaleLinear()\r\n                            .domain([-fourierMultiples, fourierMultiples]) \r\n                            .range([ (1/10)*width, (9/10)*width ]);\r\n\r\n        let yscale_freq = d3.scaleLinear()\r\n                            .domain([4,0]) \r\n                            .range([ (1/10)*height, (5/10)*height ]);\r\n\r\n        // Configuring axis ticks\r\n        const xAxisTicks = xscale_freq.ticks()\r\n                            .filter(tick => Number.isInteger(tick));\r\n\r\n        const yAxisTicks = yscale_freq.ticks()\r\n                            .filter(tick => Number.isInteger(tick))                         \r\n \r\n        let x_axis_freq = d3.axisBottom(xscale_freq)\r\n                            .tickValues(xAxisTicks)\r\n                            .tickFormat(d3.format(\"d\"));\r\n\r\n        let y_axis_freq = d3.axisLeft(yscale_freq)\r\n                            .tickValues(yAxisTicks)\r\n                            .tickFormat(d3.format(\"d\"));\r\n            \r\n        // Adding the axis to the plot\r\n        FourierMagSvg.append('g')\r\n                     .attr(\"id\",\"x_axis_fourierMagPlot\")\r\n                     .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n                     .attr(\"pointer-events\", \"none\")\r\n                     .call(x_axis_freq)\r\n\r\n        FourierMagSvg.append('g')\r\n                     .attr(\"id\",\"y_axis_fourierMagPlot\")\r\n                     .attr(\"transform\",\"translate(\" + this.width/2 + \",0)\")\r\n                     .attr(\"pointer-events\", \"none\")\r\n                     .call(y_axis_freq); \r\n\r\n    }\r\n\r\n    // Creates the Fourier Magnitude plot when DOM is loaded  \r\n    componentDidMount(){\r\n        // Get plot element's dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n\r\n        // Adding plot title\r\n        let FourierMagSvg = d3.select(\"#svgFourierMagPlot\")\r\n\r\n        FourierMagSvg.append(\"text\")\r\n                         .attr(\"id\",\"fourierMagPlotTitleText\")\r\n                         .attr(\"text-anchor\", \"middle\")  \r\n                         .attr(\"x\",this.width/2)\r\n                         .attr(\"y\",this.height/20)\r\n                         .style(\"font-size\", \"16px\") \r\n                         .style(\"text-decoration\", \"underline\")  \r\n                         .text(\"Fourier Magnitude Plot\");\r\n\r\n        // Initial drawing of the axis (default view of 4 multiples)\r\n        this.drawAxis(this.height, this.width, this.props.fourierMultiples);\r\n        \r\n    }\r\n\r\n    // Function component to call to render a positive Fourier Magnitude Coefficient \r\n    renderCirclePos(signal, fourierMultiples){\r\n        return(\r\n            <FourierCirclesMagPos\r\n                signal = {signal}\r\n                fourierMultiples = {fourierMultiples}\r\n            />\r\n        );\r\n    }\r\n\r\n    // Function component to call to render a negative Fourier Magnitude Coefficient\r\n    renderCircleNeg(signal, fourierMultiples){\r\n        return(\r\n            <FourierCirclesMagNeg\r\n                signal = {signal}\r\n                fourierMultiples = {fourierMultiples}\r\n            />\r\n        );\r\n    }\r\n\r\n    // Returns Fourier Magnitude Plot HTML code to parent class \r\n    render(){\r\n\r\n        const signals = this.props.signals;\r\n        const fourierMultiples = this.props.fourierMultiples;\r\n\r\n        // call drawAxis to redraw axis if view mode was toggled between \"default\" and \"full\"\r\n        this.drawAxis(this.height, this.width, fourierMultiples)\r\n\r\n        // Generating circle SVG's for each of the positive and negative Fourier Coefficients\r\n        const circleList = [];\r\n          \r\n        for (let i=0; i < signals.length; i++){\r\n            // Render DC term\r\n            if(signals[i].id === 0){\r\n                circleList.push(\r\n                    this.renderCirclePos(signals[i], fourierMultiples) \r\n                )\r\n            }\r\n            // Render all other Fourier Terms\r\n            else{\r\n                circleList.push(\r\n                    this.renderCirclePos(signals[i], fourierMultiples),\r\n                    this.renderCircleNeg(signals[i], fourierMultiples)\r\n                )\r\n             }\r\n        }                    \r\n   \r\n        return( \r\n            <svg>\r\n                {circleList}\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Returns HTML code to FourierCoefficients parent class to render the Fourier Phase Plot. \r\n *\r\n * @param {object} props signals state array, fourierMultiples \r\n * @return {HTML} HTML code for the Fourier Phase Plot.\r\n */\r\nclass FourierPhasePlot extends React.Component {\r\n\r\n    // Initializing plot's height and width (to be updated later when DOM is loaded)\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    // Draws the axis for the Fourier Phase Plot when called\r\n    drawAxis(height, width, fourierMultiples){\r\n\r\n        let FourierMagSvg = d3.select(\"#svgFourierPhasePlot\")\r\n\r\n        // If axis exists but we are redrawing\r\n        if(document.getElementById(\"x_axis_fourierPhasePlot\") || document.getElementById(\"y_axis_fourierPhasePlot\")){\r\n\r\n            // remove current axis\r\n            d3.select(\"#x_axis_fourierPhasePlot\").remove();\r\n            d3.select(\"#y_axis_fourierPhasePlot\").remove();\r\n        }\r\n\r\n        // Drawing new axis\r\n\r\n        // Creating axis domain based on pixel range for the plot\r\n        let xscale_freq = d3.scaleLinear()\r\n                            .domain([-fourierMultiples, fourierMultiples]) \r\n                            .range([ (1/10)*width, (9/10)*width ]);\r\n\r\n        let yscale_freq = d3.scaleLinear()\r\n                            .domain([180,-180]) \r\n                            .range([ (1/10)*height, (9/10)*height ]);\r\n\r\n        // Configuring axis ticks\r\n        const xAxisTicks = xscale_freq.ticks()\r\n                            .filter(tick => Number.isInteger(tick));\r\n\r\n        const yAxisTicks = yscale_freq.ticks()\r\n                            .filter(tick => Number.isInteger(tick))                         \r\n \r\n        let x_axis_freq = d3.axisBottom(xscale_freq)\r\n                            .tickValues(xAxisTicks)\r\n                            .tickFormat(d3.format(\"d\"));\r\n\r\n        let y_axis_freq = d3.axisLeft(yscale_freq)\r\n                            .tickValues(yAxisTicks)\r\n                            .tickFormat(d3.format(\"d\"));\r\n            \r\n        // Adding the axis to the plot\r\n        FourierMagSvg.append('g')\r\n                     .attr(\"id\",\"x_axis_fourierPhasePlot\")\r\n                     .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n                     .attr(\"pointer-events\", \"none\")\r\n                     .call(x_axis_freq)\r\n\r\n        FourierMagSvg.append('g')\r\n                     .attr(\"id\",\"y_axis_fourierPhasePlot\")\r\n                     .attr(\"transform\",\"translate(\" + this.width/2 + \",0)\")\r\n                     .attr(\"pointer-events\", \"none\")\r\n                     .call(y_axis_freq); \r\n        \r\n    }\r\n    \r\n    // Creates the Fourier Magnitude plot when DOM is loaded  \r\n    componentDidMount(){\r\n        // Get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n\r\n        // Adding plot title\r\n        let FourierPhaseSvg = d3.select(\"#svgFourierPhasePlot\")\r\n\r\n        FourierPhaseSvg.append(\"text\")\r\n                         .attr(\"id\",\"fourierPhasePlotTitleText\")\r\n                         .attr(\"text-anchor\", \"middle\")  \r\n                         .attr(\"x\",this.width/2)\r\n                         .attr(\"y\",this.height/20)\r\n                         .style(\"font-size\", \"16px\") \r\n                         .style(\"text-decoration\", \"underline\")  \r\n                         .text(\"Fourier Phase Plot\");\r\n\r\n        // Initial drawing of the axis (default view of 4 multiples)\r\n        this.drawAxis(this.height, this.width, this.props.fourierMultiples);\r\n        \r\n    }\r\n\r\n    // Function component to call to render a positive Fourier Phase Coefficient \r\n    renderCirclePos(signal, fourierMultiples){\r\n        return(\r\n            <FourierCirclesPhasePos\r\n                signal = {signal}\r\n                fourierMultiples = {fourierMultiples}\r\n            />\r\n        );\r\n    }\r\n\r\n    // Function component to call to render a negative Fourier Phase Coefficient\r\n    renderCircleNeg(signal, fourierMultiples){\r\n        return(\r\n            <FourierCirclesPhaseNeg\r\n                signal = {signal}\r\n                fourierMultiples = {fourierMultiples}\r\n            />\r\n        );\r\n    }\r\n\r\n    // Returns Fourier Phase Plot HTML code to parent class \r\n    render(){\r\n\r\n        const signals = this.props.signals;\r\n        const fourierMultiples = this.props.fourierMultiples;\r\n\r\n        // call drawAxis to redraw axis if view mode was toggled between \"default\" and \"full\"\r\n        this.drawAxis(this.height, this.width, fourierMultiples)\r\n    \r\n        // Generating circle SVG's for each of the positive and negative Fourier Coefficients\r\n        const circleList = []; \r\n           \r\n        for (let i=0; i < this.props.signals.length; i++){\r\n            // Render DC term\r\n            if(signals[i].id ===0){\r\n                circleList.push(\r\n                    this.renderCirclePos(this.props.signals[i], fourierMultiples) \r\n                )\r\n            }\r\n            // Render all other Fourier Terms\r\n            else{\r\n                circleList.push(\r\n                    this.renderCirclePos(this.props.signals[i], fourierMultiples),\r\n                    this.renderCircleNeg(this.props.signals[i], fourierMultiples)\r\n                )\r\n            }\r\n               \r\n        }\r\n   \r\n        return( \r\n            <svg>\r\n                {circleList}\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Returns HTML code to FourierCoefficients parent class to render the Cosine Plot. \r\n *\r\n * @param {object} props signals state array \r\n * @return {HTML} HTML code for the Cosine Plot.\r\n */\r\nclass CosinePlot extends React.Component {\r\n\r\n    // Initializing plot's height and width (to be updated later when DOM is loaded)\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    // Draws the axis for the Cosine Plot when called\r\n    drawAxis(height, width){\r\n\r\n        const svgCosinePlot = d3.select(\"#svgCosinePlot\")\r\n\r\n        // If axis exists but we are redrawing\r\n        if(document.getElementById(\"x_axis_cosinePlot\") || document.getElementById(\"y_axis_cosinePlot\")){\r\n\r\n            // remove current axis\r\n            d3.select(\"#x_axis_cosinePlot\").remove();\r\n            d3.select(\"#y_axis_cosinePlot\").remove();\r\n        }\r\n\r\n        // Drawing new axis\r\n\r\n        // Creating axis domain based on pixel range for the plot\r\n        let xscale = d3.scaleLinear()\r\n                        .domain([0, 2]) \r\n                        .range([ (1/10)*width, (9/10)*width ]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n                        .domain([4,-4]) \r\n                        .range([ (1/10)*height, (9/10)*height ]);\r\n\r\n        // Configuring axis ticks\r\n        let x_axis = d3.axisBottom()\r\n                        .scale(xscale);\r\n\r\n        let y_axis = d3.axisLeft()\r\n                        .scale(yscale);\r\n\r\n        // Adding the axis to the plot\r\n        svgCosinePlot.append('g')\r\n                     .attr(\"id\",\"x_axis_cosinePlot\")\r\n                     .attr(\"transform\", \"translate(0,\" + height/2 + \")\")\r\n                     .attr(\"pointer-events\", \"none\")\r\n                     .call(x_axis);\r\n\r\n            svgCosinePlot.append('g')\r\n                     .attr(\"id\",\"y_axis_cosinePlot\")\r\n                     .attr(\"transform\",\"translate(\" + (1/10)*width + \",0)\")\r\n                     .attr(\"pointer-events\", \"none\")\r\n                     .call(y_axis)\r\n            \r\n    }\r\n\r\n    // Creates the Cosine plot when DOM is loaded  \r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"cosinePlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"cosinePlotsID\").getBoundingClientRect().width;\r\n\r\n        // Adding plot title\r\n        const svgCosinePlot = d3.select(\"#svgCosinePlot\")\r\n\r\n        svgCosinePlot.append(\"text\")\r\n                    .attr(\"text-anchor\", \"middle\")  \r\n                    .attr(\"x\",this.width/2)\r\n                    .attr(\"y\",this.height/20)\r\n                    .style(\"font-size\", \"16px\") \r\n                    .style(\"text-decoration\", \"underline\")  \r\n                    .text(\"Cosine Plots\");\r\n\r\n        // Initial drawing of the axis \r\n        this.drawAxis(this.height, this.width);\r\n\r\n    }\r\n\r\n    // Returns Cosine Plot HTML code to parent class \r\n    render(){\r\n        const signals = this.props.signals;\r\n    \r\n        // \"Overlay all sine plots into one graph\" version\r\n        for(let i = 0; i < signals.length; i++){\r\n\r\n                \r\n            // Creating the path svg for each signal  \r\n\r\n            let lineGenerator = d3.line().curve(d3.curveNatural);\r\n            let pathData = lineGenerator(signals[i].values);\r\n    \r\n            // If signal path exists, update\r\n            if(document.getElementById(signals[i].pathID)){\r\n\r\n                let signal = d3.select(\"#\"+signals[i].pathID);\r\n\r\n                // Checking if signal is highlighted\r\n                let strokeWidth\r\n                let color\r\n                if(signals[i].highlight){\r\n                    strokeWidth = 4;\r\n                    signal.moveToFront();\r\n                    color = 'blue'\r\n                }\r\n                else{\r\n                    strokeWidth = 2;\r\n                    signal.moveToBack();\r\n                    color = signals[i].colour\r\n                }\r\n                \r\n                signal.attr(\"d\", pathData)\r\n                      .attr(\"stroke\", color)\r\n                      .attr(\"stroke-width\", strokeWidth)      \r\n              \r\n            }\r\n            \r\n            // Draws path if signal path doesn't exist\r\n            if(!document.getElementById(signals[i].pathID)){\r\n\r\n                d3.select(\"#svgCosinePlot\").append(\"path\")\r\n                    .attr(\"id\",signals[i].pathID)\r\n                    .attr(\"d\", pathData)\r\n                    .attr(\"transform\",\"translate(\" + (1/10)*this.width + \")\")\r\n                    .attr(\"stroke\", signals[i].colour)\r\n                    .attr(\"stroke-width\", 2)\r\n                    .attr(\"fill\", \"none\")\r\n            }\r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Returns HTML code to FourierCoefficients parent class to render the Sum of Signals Plot. \r\n *\r\n * @param {object} props signals state array \r\n * @return {HTML} HTML code for the Sum of Signals Plot.\r\n */\r\nclass SumPlot extends React.Component {\r\n\r\n    // Initializing plot's height and width (to be updated later when DOM is loaded)\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    // Draws the axis for the Sum of Signals Plot when called\r\n    drawAxis(height, width){\r\n\r\n        const svgSumPlot = d3.select(\"#svgSumPlot\")\r\n\r\n        // If axis exists but we are redrawing\r\n        if(document.getElementById(\"x_axis_sumPlot\") || document.getElementById(\"y_axis_sumPlot\")){\r\n\r\n            // remove current axis\r\n            d3.select(\"#x_axis_sumPlot\").remove();\r\n            d3.select(\"#y_axis_sumPlot\").remove();\r\n        }\r\n    \r\n        // Drawing new axis\r\n\r\n        // Creating axis domain based on pixel range for the plot\r\n        let xscale = d3.scaleLinear()\r\n                        .domain([0, 2]) \r\n                        .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n                        .domain([4,-4]) \r\n                        .range([(1/10)*this.height, (9/10)*this.height ]);\r\n\r\n        // Configuring axis ticks\r\n        let x_axis = d3.axisBottom()\r\n                        .scale(xscale);\r\n\r\n        let y_axis = d3.axisLeft()\r\n                        .scale(yscale);\r\n\r\n        // Adding the axis to the plot\r\n        svgSumPlot.append('g')\r\n                  .attr(\"id\",\"x_axis_sumPlot\")\r\n                  .attr(\"transform\", \"translate(0,\" + this.height/2 + \")\")\r\n                  .attr(\"pointer-events\", \"none\")\r\n                  .call(x_axis);\r\n\r\n        svgSumPlot.append('g')\r\n                  .attr(\"id\",\"y_axis_sumPlot\")\r\n                  .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                  .attr(\"pointer-events\", \"none\")\r\n                  .call(y_axis)\r\n\r\n    }\r\n\r\n    // Creates the Sum of Signals plot when DOM is loaded  \r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n\r\n        // Adding plot title\r\n        const svgSumPlot = d3.select(\"#svgSumPlot\")\r\n\r\n        svgSumPlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",this.width/2)\r\n                .attr(\"y\",this.height/20)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sum of Signals Plot\");\r\n\r\n        // Initial drawing of the axis \r\n        this.drawAxis(this.height, this.width);\r\n\r\n    }\r\n\r\n    // Returns Sum of Signals Plot HTML code to parent class \r\n    render(){\r\n\r\n        // Generating Sum of Signals path (brute force summation)\r\n        let sumSignals = []; \r\n        let plotWidth = 0.8 * this.width;\r\n\r\n        for(let k = 0; k < plotWidth; k++){\r\n            sumSignals.push([0,0]);\r\n        }\r\n\r\n        // Looping through all the signals\r\n        for (let i=0; i < this.props.signals.length; i++){\r\n\r\n            // Looping through and summing the signal values\r\n            for(let j=0; j < this.props.signals[i].values.length; j++){\r\n                sumSignals[j][0] = this.props.signals[i].values[j][0];\r\n                sumSignals[j][1] += this.props.signals[i].values[j][1];\r\n            }\r\n            \r\n        }\r\n\r\n        // Centering the sum of signals path values to the middle of the plot's height \r\n        for (let n =0; n < sumSignals.length; n++){\r\n            sumSignals[n][1] = sumSignals[n][1] - (this.props.signals.length-1)*(this.height/2)\r\n        }\r\n\r\n            \r\n        // Creating the path svg for each signal  \r\n\r\n        let lineGenerator = d3.line().curve(d3.curveNatural);\r\n        let pathData = lineGenerator(sumSignals);\r\n\r\n        // If signal path exists, update\r\n        if(document.getElementById(\"path_Sum\")){\r\n            d3.select(\"#\".concat(\"path_Sum\")).attr(\"d\", pathData)  \r\n               \r\n        }\r\n        \r\n        // Draws path if signal path doesn't exist\r\n        if(!document.getElementById(\"path_Sum\")){\r\n             d3.select(\"#svgSumPlot\").append(\"path\")\r\n                .attr(\"id\",\"path_Sum\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \")\")\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Renders all the HTML code for the Fourier Coefficients page. \r\n *\r\n * @return {HTML} HTML code for the FourierCoefficients topic page.\r\n */\r\nexport class FourierCoefficients extends React.Component {\r\n\r\n    // Initializing page's default state\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            signals: [\r\n                /* Example signal object \r\n                {\r\n                    id: signals.length,\r\n                    amplitude: amplitude,                \r\n                    frequency: signals.length,   \r\n                    phase: phase,\r\n                    values: this.generateSignal(amplitude,signals.length,phase),\r\n                    pathID: 'path_'.concat(i.toString(10)), \r\n                    draggingMag: false,    \r\n                    draggingPhasePos: false,    \r\n                    draggingPhaseNeg: false,  \r\n                    colour: rgb(intensity,intensity,intensity),\r\n                    highlight: false,\r\n                    animating: false,\r\n                }\r\n                */\r\n            ],\r\n            demoSignal: 'select',\r\n            plotViewState: false, // false is default view, true is full view\r\n            plotView: 'Default',\r\n            fourierMultiples: 4, // 4 is the default view, -4 to 4 multiples of fundamental frequency \r\n        };\r\n\r\n        // These bindings are necessary to make `this.` work in the callback   \r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseUp = this.handleMouseUp.bind(this);\r\n        this.handleMouseOverFourier = this.handleMouseOverFourier.bind(this);\r\n        this.handleMouseMoveFourierMag = this.handleMouseMoveFourierMag.bind(this);\r\n        this.handleMouseMoveFourierPhase = this.handleMouseMoveFourierPhase.bind(this);\r\n        this.handleDemoSignal = this.handleDemoSignal.bind(this);\r\n    }\r\n    \r\n    /* \r\n    * Adds a signal to the page's signals state array\r\n    */\r\n    addSignal(amplitude, phase){\r\n        let signals = this.state.signals;\r\n\r\n        // Colour intensity ranges from: \r\n        // Least intense: rgb(192,192,192) (Silver) \r\n        // Most intense: rgb(0,0,0) (Black)\r\n        const intensity =  (192 - 48*amplitude);\r\n\r\n        // Loop through the current state's signals array\r\n        for(let i = 0; i < signals.length + 1; i++){\r\n\r\n            // Add new signal object to end of array if we reach end of array\r\n            if(i === signals.length){\r\n                signals = signals.concat([{       \r\n                    id: signals.length,\r\n                    amplitude: amplitude,               \r\n                    frequency: signals.length,   \r\n                    phase: phase,\r\n                    values: this.generateSignal(amplitude,signals.length,phase),\r\n                    pathID: 'path_'.concat(i.toString(10)), \r\n                    draggingMag: false,    \r\n                    draggingPhasePos: false,    \r\n                    draggingPhaseNeg: false,  \r\n                    colour: rgb(intensity,intensity,intensity),\r\n                    highlight: false,\r\n                    animating: false,\r\n                },]);\r\n\r\n                break;\r\n            }\r\n\r\n            // If there's a missing ID, insert it to appropriate index\r\n            // e.g. id array: [0, 1, 3]. Therefore missing id 2\r\n            if(i !== signals[i].id){\r\n                let newSignal = {       \r\n                    id: i,\r\n                    amplitude: amplitude,                \r\n                    frequency: i,   \r\n                    phase: phase,\r\n                    values: this.generateSignal(amplitude,i,phase),\r\n                    pathID: 'path_'.concat(i.toString(10)), \r\n                    draggingMag: false,    \r\n                    draggingPhasePos: false,    \r\n                    draggingPhaseNeg: false,  \r\n                    colour: rgb(intensity,intensity,intensity),\r\n                    highlight: false,\r\n                    animating: false,\r\n                }\r\n\r\n                signals.splice(i, 0, newSignal);\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Once this.setState has been called, React will schedule an update to update the state\r\n        this.setState({\r\n            signals: signals,\r\n        });        \r\n    }\r\n\r\n    /* \r\n    * Removes a signal from the signal state array given the signal's ID\r\n    */\r\n    removeSignal(signalID){\r\n\r\n        // Need to find signal id from the array and delete, then re-update id's\r\n        const signals = this.state.signals;\r\n\r\n        // Finding signal's index in signals array based on signalID (DOM element ID)\r\n        let index;\r\n        for(index = 0; index < signals.length; index++){\r\n            if(signals[index].id === signalID){\r\n                break\r\n            }\r\n        }\r\n        \r\n        // Find the corresponding pathID and delete from DOM\r\n        d3.select(\"#\"+signals[index].pathID).remove();\r\n        \r\n        // Find the signal in the signals array and delete\r\n        signals.splice(index,1)\r\n        \r\n        // Update the signals array\r\n        this.setState({\r\n            signals: signals,\r\n        });\r\n    \r\n    }\r\n    \r\n    /*\r\n    * Returns an array of cosine values given amplitude, frequency and phase values. \r\n    * Note: This function assumes that sumPlot and CosinePlots have the same dimensions, \r\n    *       since generateSignal() is called from those two plots\r\n    */\r\n    generateSignal(amplitude, frequency, phase){\r\n\r\n        let points = [];\r\n        \r\n        const divHeight = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        const plotWidth = 0.8 * document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n\r\n        let scale = -divHeight/10;\r\n        let x_offset = 0;\r\n        let y_offset = 0;\r\n\r\n        let Ts = Math.PI / (plotWidth/4);\r\n\r\n        /* Calculation Reference\r\n        // Assuming a plot is 800x800\r\n        // 1 period = 1 second\r\n        // If 1 period = 400 pixels, => then Ts = 400 samples per second\r\n\r\n        // Sampling frequency = samples/second\r\n        // 1 sample per 1/400 second (Ts = 1/400)\r\n        // Ts = 2pi * (1/400)\r\n        // Ts = pi / 200\r\n\r\n        // Frequency is in Hz\r\n        // Here, i refers to each unit of time\r\n        */\r\n\r\n        for(let i = x_offset; i< plotWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude*Math.cos(Ts*frequency*i + (phase * (Math.PI / 180) )) + (divHeight/2 + y_offset)];\r\n        }\r\n\r\n        return points;\r\n    }\r\n\r\n    /* \r\n    * Returns an array of values corresponding to a straight line, given an amplitude value.\r\n    * Used to generate the signal for the 0th multiple of the fundamental frequency\r\n    */ \r\n    generateDC(amplitude){\r\n\r\n        let points = [];\r\n\r\n        const divHeight = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        const plotWidth = 0.8 * document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n        \r\n        let scale = - divHeight/10;\r\n        let x_offset = 0;\r\n        let y_offset = 0;\r\n\r\n        for(let i = x_offset; i< plotWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude + (divHeight/2 + y_offset)];\r\n        }\r\n \r\n        return points\r\n    }\r\n\r\n    /*\r\n    * Updates all signals' amplitude and phase values in the HTML when called.\r\n    * Note: This method may be quite inefficient, as it loops through all signals, re-assigns and\r\n    *       updates each signal's values in the HTML, even if only one signal's value has changed. \r\n    */\r\n    updateDials(){\r\n        const signals = this.state.signals;\r\n\r\n        for(let i = 0; i< signals.length; i++){\r\n            document.getElementById(\"signal\" + signals[i].id + \"_AmpText\").value = signals[i].amplitude;\r\n            document.getElementById(\"signal\" + signals[i].id + \"_FreqText\").value = signals[i].frequency;\r\n        }\r\n    }\r\n\r\n    /* \r\n    * Handles user input for an individual signal's control panel (slider or text input)\r\n    */ \r\n    handleChange(event){\r\n\r\n        // Collecting event information \r\n        const signals = this.state.signals;\r\n        const inputType = event.target.getAttribute('input_type');\r\n        const signalID = parseInt(event.target.getAttribute('signal_id')); // Signal ID Number\r\n        let value = parseFloat(event.target.value);   \r\n\r\n        // Checking if user input was an amplitude change\r\n        if((inputType === \"AmpDial\") || (inputType === \"AmpText\")){\r\n            \r\n            // Sanity check if input is not a float number \r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n\r\n            else{\r\n\r\n                // Finding signal's index in signals array based on signalID (DOM element ID)\r\n                let index;\r\n                for(index = 0; index < signals.length; index++){\r\n                    if(signals[index].id === signalID){\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // Setting limits\r\n                if(value>4){\r\n                    value = 4\r\n                }\r\n                else if(value < 0){\r\n                    value = 0\r\n                }\r\n\r\n                // Updating signal's amplitude and path values\r\n\r\n                // DC Case\r\n                if(signalID === 0){\r\n                    signals[index].amplitude = value; \r\n                    signals[index].values = this.generateDC(signals[index].amplitude);\r\n                    document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n\r\n                    const intensity =  (192 - 48*value);\r\n                    signals[index].colour = rgb(intensity,intensity,intensity);\r\n                }\r\n\r\n                // All Other cases\r\n                else{\r\n                    signals[index].amplitude = value;                 \r\n                    signals[index].values = this.generateSignal(signals[index].amplitude, signals[index].frequency, signals[index].phase);\r\n                    document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n\r\n                    const intensity =  (192 - 48*value);\r\n                    signals[index].colour = rgb(intensity,intensity,intensity);\r\n                }     \r\n            }\r\n        }\r\n\r\n        // Checking if user input was a phase change\r\n        else if ((inputType === \"PhaseDial\") || (inputType === \"PhaseText\")){\r\n\r\n            // Sanity check if input is not a float number\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n\r\n            else{\r\n\r\n                // Finding signal's index in signals array based on signalID (DOM element ID)\r\n                let index;\r\n                for(index = 0; index < signals.length; index++){\r\n                    if(signals[index].id === signalID){\r\n                        break\r\n                    }\r\n                }            \r\n            \r\n                // Setting limits\r\n                if(value>180){\r\n                    value = 180\r\n                }\r\n                else if(value < -180){\r\n                    value = -180\r\n                }\r\n\r\n                // Updating signal's phase and path values\r\n\r\n                // DC Case\r\n                if(signalID === 0){\r\n                    signals[index].phase = value; \r\n                    signals[index].values = this.generateDC(signals[index].amplitude);\r\n                    document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n                }\r\n\r\n                // All Other cases\r\n                else{\r\n                    signals[index].phase = value; \r\n                    signals[index].values = this.generateSignal(signals[index].amplitude, signals[index].frequency, signals[index].phase);\r\n                    document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n                }\r\n            }\r\n        }     \r\n\r\n        // Updating page's state with updated signals array\r\n        this.setState({\r\n                signals: signals,   \r\n            }   \r\n        );\r\n\r\n    }\r\n    \r\n    /*\r\n    * Handles mouse button down events (click down)\r\n    * Embedded in Fourier Plot SVG elements for Fourier Coefficients circles dragging functionality\r\n    */\r\n    handleMouseDown(e){\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation()\r\n\r\n        const elementID = e.target.getAttribute('id');\r\n        \r\n        // Sanity check\r\n        if(elementID !== null){\r\n\r\n            // Check if a circle was clicked\r\n            const condition = elementID.includes(\"circle_\");\r\n\r\n            if(condition){\r\n\r\n                // Collecting event information \r\n                const signals = this.state.signals;\r\n                const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n                const circleID = e.target.getAttribute('id'); // Circle ID \r\n                \r\n                // Finding signal's index in signals array based on signalID (DOM element ID)\r\n                let index;\r\n                for(index = 0; index < signals.length; index++){\r\n                    if(signals[index].id === signalID){\r\n                        \r\n                        break\r\n                    }\r\n                }\r\n                \r\n                // Toggling circle's dragging state   \r\n                if(circleID.includes(\"circle_mag\")){\r\n                    signals[index].draggingMag = true;\r\n                } \r\n                if(circleID.includes(\"circle_phase_+\")){\r\n                    signals[index].draggingPhasePos = true;\r\n                } \r\n                if(circleID.includes(\"circle_phase_-\")){\r\n                    signals[index].draggingPhaseNeg = true;\r\n                } \r\n\r\n                // Updating page's state with updated signals array\r\n                this.setState({\r\n                    signals: signals,   \r\n                    }\r\n                );   \r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    /*\r\n    * Handles mouse button up events (click release)\r\n    * Embedded in Fourier Plot SVG elements for Fourier Coefficients circles dragging functionality\r\n    */\r\n    handleMouseUp(e){\r\n\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n\r\n        const signals = this.state.signals;\r\n        const elementID = e.target.getAttribute('id');\r\n\r\n        // Sanity check\r\n        if(elementID !== null){\r\n\r\n            // set all signals dragging to false\r\n            for(let n = 0; n < signals.length; n++){\r\n                signals[n].draggingMag = false;\r\n                signals[n].draggingPhasePos = false;\r\n                signals[n].draggingPhaseNeg = false;\r\n            }\r\n                \r\n            // Updating page's state with updated signals array\r\n            this.setState({\r\n                signals: signals,   \r\n            });\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Handles mouse move events (dragging) for Fourier Magnitude Coefficients' circles\r\n    * Embedded in Fourier Plot SVG elements for Fourier Coefficients circles dragging functionality\r\n    */\r\n    handleMouseMoveFourierMag(e) {\r\n\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n        \r\n        // Collecting event information\r\n        const elementID = e.target.getAttribute('id');\r\n\r\n        // Sanity check\r\n        if(elementID !== null){\r\n\r\n            const signals = this.state.signals;\r\n                \r\n            // Note: \r\n            // Getting signal id number will not work if mouse event is outside of the div element (e.g. outside the plot)\r\n            // Currently not an issue since there are position limits for the circle elements\r\n\r\n            // Find the signal that is dragging \r\n            let index;\r\n            let dragging = false;\r\n            for(let n = 0; n < signals.length; n++){\r\n                if(signals[n].draggingMag === true){\r\n                    \r\n                    dragging = true;\r\n                    index = n;\r\n                }\r\n            }\r\n\r\n            // If circle is dragging\r\n            if (dragging) {\r\n\r\n                let  rect = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect();  \r\n\r\n                let divHeight = rect.height;\r\n                let divWidth = rect.width;\r\n                let plotHeight = 0.8*divHeight;\r\n                let plotWidth = 0.8*divWidth;\r\n\r\n                // Divide by 8: max axis size (-4 to 4) (relative to Cosine plot y axis)\r\n                let amplitude = - (e.clientY - rect.top - divHeight/2) / (plotHeight/8);\r\n\r\n                // Setting plot y-axis limits\r\n                if(amplitude > 4){\r\n                    amplitude = 4;\r\n                }\r\n                if(amplitude < 0){\r\n                    amplitude = 0;\r\n                }\r\n\r\n                /* Updating signal amplitude, phase and values */\r\n                \r\n                // Maybe should seperate coordinates and freq/amp values in future\r\n                signals[index].frequency = signals[index].id;\r\n                signals[index].amplitude = amplitude;    \r\n                    \r\n                const intensity =  (192 - 48*amplitude)\r\n                signals[index].colour = rgb(intensity,intensity,intensity);\r\n\r\n\r\n                // Checking if signal is the DC case\r\n                if(index === 0){\r\n                    signals[index].values = this.generateDC(signals[index].amplitude);\r\n                }\r\n                // All other cases\r\n                else{\r\n                    signals[index].values = this.generateSignal(signals[index].amplitude, signals[index].frequency, signals[index].phase);\r\n                \r\n                }\r\n\r\n                // Updating page's state with updated signals array\r\n                this.setState({\r\n                    signals: signals,   \r\n                });  \r\n            }\r\n        }\r\n    }\r\n    \r\n    /*\r\n    * Handles mouse move events (dragging) for Fourier Phase Coefficients' circles\r\n    * Embedded in Fourier Plot SVG elements for Fourier Coefficients circles dragging functionality\r\n    */\r\n    handleMouseMoveFourierPhase(e) {\r\n\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n\r\n        const elementID = e.target.getAttribute('id');\r\n\r\n        // Sanity check\r\n        if(elementID !== null){\r\n\r\n            const signals = this.state.signals;\r\n\r\n            // Note: \r\n            // Getting signal id number will not work if mouse event is outside of the div element (e.g. outside the plot)\r\n            // Currently not an issue since there are position limits for the circle elements\r\n\r\n            // Find the signal that is dragging \r\n            let index;\r\n            let draggingPhasePos = false;\r\n            let draggingPhaseNeg = false;\r\n            for(let n = 0; n < signals.length; n++){\r\n                if(signals[n].draggingPhasePos === true ){                        \r\n                    draggingPhasePos = true;\r\n                    index = n;\r\n                }\r\n                if(signals[n].draggingPhaseNeg === true){                      \r\n                    draggingPhaseNeg = true;\r\n                    index = n;\r\n                }\r\n            }\r\n\r\n            // If circle is dragging\r\n            if(draggingPhasePos || draggingPhaseNeg){\r\n\r\n                let rect = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect();  \r\n\r\n                let divHeight = rect.height;\r\n                let divWidth = rect.width;\r\n                let plotHeight = 0.8*divHeight;\r\n                let plotWidth = 0.8*divWidth;\r\n\r\n                // Finding circle element's ID from the mouse event \r\n                let circleID;\r\n                if(draggingPhasePos){\r\n                    circleID = \"circle_phase_+\".concat(index.toString(10)); \r\n                }\r\n                if(draggingPhaseNeg){\r\n                    circleID = \"circle_phase_-\".concat(index.toString(10)); \r\n                }\r\n                \r\n                /* Updating signal amplitude, phase and values */\r\n\r\n                const circleCX = parseInt(document.getElementById(circleID).getAttribute(\"cx\"))\r\n                \r\n                // Positive Circle case\r\n                if(circleCX >= 0){\r\n\r\n                    // Divide by 360: max axis size (-180 to 180) (relative to FourierPhasePlot y axis)\r\n                    let phase = parseInt( - (e.clientY - rect.top - divHeight/2) / (plotHeight/360));\r\n                    \r\n                    // Setting plot y-axis limits\r\n                    if(phase > 180){\r\n                        phase = 180;\r\n                    }\r\n                    if(phase < -180){\r\n                        phase = -180;\r\n                    }\r\n                    signals[index].phase = phase;\r\n                } \r\n\r\n                // Negative Circle case (inverted direction)\r\n                else if(circleCX < 0){\r\n\r\n                    // Divide by 360: max axis size (-180 to 180) (relative to FourierPhasePlot y axis)\r\n                    let phase = parseInt( (e.clientY - rect.top - divHeight/2) / (plotHeight/360));\r\n\r\n                    // Setting plot y-axis limits\r\n                    if(phase > 180){\r\n                        phase = 180;\r\n                    }\r\n                    if(phase < -180){\r\n                        phase = -180;\r\n                    }\r\n                    signals[index].phase = phase;\r\n                } \r\n\r\n                signals[index].frequency = signals[index].id; \r\n                \r\n                // Checking if signal is the DC case\r\n                if(index === 0){\r\n                    signals[index].values = this.generateDC(signals[index].amplitude);\r\n                }\r\n                // All other cases\r\n                else{\r\n                    signals[index].values = this.generateSignal(signals[index].amplitude, signals[index].frequency, signals[index].phase);\r\n                }\r\n\r\n                // Updating page's state with updated signals array\r\n                this.setState({\r\n                    signals: signals,   \r\n                    }\r\n                );  \r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Handles mouse over events (highlighting) for Fourier Phase Coefficients' circles\r\n    * Embedded in Fourier Plot SVG elements for Fourier Coefficients circles\r\n    */\r\n    handleMouseOverFourier(e){\r\n\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n        \r\n        const elementID = e.target.getAttribute('id');\r\n        \r\n        // Sanity check\r\n        if(elementID !== null){\r\n\r\n            const condition = elementID.includes(\"circle_\");\r\n            const signals = this.state.signals;\r\n\r\n            // If mouseover event was over a circle \r\n            if(condition){\r\n                \r\n                const signalID = parseInt(e.target.getAttribute('signal_id')); \r\n                const circleID = e.target.getAttribute('id');  \r\n\r\n                // Finding signal's index in signals array based on signalID (DOM element ID)\r\n                let index;\r\n                for(index = 0; index < signals.length; index++){\r\n                    if(signals[index].id === signalID){\r\n                        break\r\n                    }\r\n                }\r\n                signals[index].highlight = true;\r\n\r\n                // Highlighting signal control panel\r\n                let signalControlID = 'signal-controls-'.concat(signalID.toString())\r\n                document.getElementById(signalControlID).style.opacity = 1;\r\n            }\r\n\r\n            // If the mouseover is not over a circle\r\n            else {\r\n\r\n                // Set all highlight booleans to false\r\n                let signalControlID\r\n                for(let n = 0; n < signals.length; n++){\r\n                    signals[n].highlight = false;\r\n                    signalControlID = 'signal-controls-'.concat(n.toString())\r\n\r\n                    // Check if the signal's control panel exists\r\n                    if(document.getElementById(signalControlID)){\r\n                        // Un-highlighting signal control panel\r\n                        document.getElementById(signalControlID).style.opacity = 0.6;\r\n                    }\r\n                }  \r\n            }\r\n\r\n            // Updating page's state with updated signals array\r\n            this.setState({\r\n                signals: signals,   \r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n    * Toggles between 'default' and 'full' view of the Fourier Magnitude and Phase Plots\r\n    * The view will only toggle to 'full' view if there are more than 4 Fourier multiples on the plots\r\n    */\r\n    toggleView(e){\r\n\r\n        // Toggle the state\r\n        // False: Default \r\n        // True: Full\r\n        const plotViewState = !this.state.plotViewState; \r\n\r\n        // Default View\r\n        if(!plotViewState){\r\n            \r\n            this.setState({\r\n                fourierMultiples: 4,\r\n                plotViewState: plotViewState,\r\n                plotView: 'Default',\r\n            });\r\n        }\r\n\r\n        // Full View\r\n        else{\r\n\r\n            const fourierMultiples = this.state.signals.length - 1; // -1 because of DC term\r\n\r\n            // Only change to full view if there are more than 4 Fourier Multiples\r\n            if(fourierMultiples > 4){\r\n                this.setState({\r\n                    fourierMultiples: fourierMultiples,\r\n                    plotViewState: plotViewState,\r\n                    plotView: 'Full',\r\n                });\r\n            }\r\n            else{\r\n                this.setState({\r\n                    fourierMultiples: 4,\r\n                    plotViewState: plotViewState,\r\n                    plotView: 'Full',\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Removes all signals from the signal state array\r\n    * Removes all signal SVG elements on the CosinePlot, SumPlot, FourierMagPlot, FourierPhasePlot    \r\n    * i.e. Removes the signal path and Fourier Coefficients' circles SVG's    \r\n    */\r\n    emptyPlots(){\r\n        let signals = this.state.signals;\r\n\r\n        for(let i = 0; i< signals.length; i++){                 \r\n\r\n            d3.select(\"#\"+signals[i].pathID).remove();\r\n        }  \r\n\r\n        return signals = [];\r\n    }\r\n\r\n    /*\r\n    * Handles user input select event of a selected demo signal\r\n    * Updates the signals array and the demoSignal string in the 'global' state object\r\n    */\r\n    handleDemoSignal(e){\r\n\r\n        let signals = this.state.signals;\r\n        const demoSignal = e.target.value;\r\n\r\n        if(demoSignal === 'empty'){\r\n            signals = this.emptyPlots();\r\n        }\r\n\r\n        // Note: If there are multiple local setState() calls, only the last call will run (the prior ones won't run)\r\n        // Hence why here, instead of repeatedly calling addSignal(), the code explicitly generates the signals array\r\n        // setState() is asynchronous and are batched for performance gains. \r\n        \r\n        if(demoSignal === 'cosine'){\r\n \r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            let amplitude = 0;\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,\r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                highlight: false,\r\n                animating: false,\r\n            },])\r\n\r\n            // Generating other sine waves\r\n            amplitude = 1;\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,                \r\n                frequency: signals.length,   \r\n                phase: 0,\r\n                values: this.generateSignal(amplitude,signals.length,0),\r\n                pathID: 'path_1', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false, \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                highlight: false,\r\n                animating: false,\r\n            },])\r\n        }\r\n\r\n\r\n        if(demoSignal === 'triangle'){\r\n            signals = this.emptyPlots();\r\n\r\n            let amplitude = 0\r\n            // Generating DC signal\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0',  \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,     \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                highlight: false,\r\n                animating: false,\r\n            },])\r\n\r\n            // Generating other sine waves\r\n            let alternate = true;\r\n            for(let i = 1; i < 20; i++){\r\n                // Odd\r\n                if((i % 2) !== 0 ){\r\n                    amplitude = (8/Math.pow(Math.PI,2))*(1/Math.pow(i,2));\r\n\r\n                    // Non-phase shifted harmonic\r\n                    if(alternate){\r\n                        signals = signals.concat([{       \r\n                            id: signals.length,\r\n                            amplitude: amplitude,                \r\n                            frequency: signals.length,   \r\n                            phase: 90,\r\n                            values: this.generateSignal(amplitude,signals.length,90),\r\n                            pathID: 'path_'.concat(i.toString(10)), \r\n                            draggingMag: false,    \r\n                            draggingPhasePos: false, \r\n                            draggingPhaseNeg: false,   \r\n                            colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                            highlight: false,\r\n                            animating: false,\r\n                        },])\r\n                        alternate = !alternate; \r\n                    }\r\n                    // Phase shifted harmonic\r\n                    else if(!alternate){\r\n                        signals = signals.concat([{       \r\n                            id: signals.length,\r\n                            amplitude: amplitude,                \r\n                            frequency: signals.length,   \r\n                            phase: -90,\r\n                            values: this.generateSignal(amplitude,signals.length, -90),\r\n                            pathID: 'path_'.concat(i.toString(10)), \r\n                            draggingMag: false,    \r\n                            draggingPhasePos: false, \r\n                            draggingPhaseNeg: false,    \r\n                            colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                            highlight: false,\r\n                            animating: false,\r\n                        },])\r\n                        alternate = !alternate; \r\n                    }    \r\n                    \r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    amplitude = 0;\r\n                    \r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: 0,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(0,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                        animating: false,\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if(demoSignal === 'square'){\r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            let amplitude = 0\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,  \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                highlight: false,\r\n                animating: false,\r\n            },])\r\n\r\n            // Generating other sine waves\r\n\r\n            for(let i = 1; i < 25; i++){\r\n                // Odd\r\n                if((i % 2) !== 0 ){\r\n                    \r\n                    amplitude = (4/Math.PI)*(1/i);\r\n\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 90,\r\n                        values: this.generateSignal(amplitude,signals.length,90),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,     \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                        animating: false,\r\n                    },])    \r\n\r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n\r\n                    amplitude = 0\r\n\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 90,\r\n                        values: this.generateSignal(amplitude,signals.length,90),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                        animating: false,\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if(demoSignal === 'sawtooth'){\r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            let amplitude = 0\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,     \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                highlight: false,\r\n                animating: false,\r\n            },])\r\n\r\n            // Generating other sine waves\r\n            for(let i = 1; i < 25; i++){\r\n\r\n                amplitude = (4/Math.PI)*(1/i);\r\n\r\n                // Odd\r\n                if((i % 2) !== 0 ){    \r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: -90,\r\n                        values: this.generateSignal(amplitude,signals.length,-90),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                        animating: false,\r\n                    },])    \r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 90,\r\n                        values: this.generateSignal(amplitude,signals.length,90),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                        animating: false,\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        // Updating page's state with updated signals array and demo signal string\r\n        this.setState({\r\n            signals: signals,\r\n            demoSignal: demoSignal,\r\n        });\r\n    }\r\n\r\n    // Renders the HTML code for the FourierCoefficients page (other than the navigation bar)\r\n    // Renders the Controls column, CosinePlot, SumPlot, FourierMagPlot, FourierPhasePlot\r\n    render() {\r\n\r\n    const current = this.state.signals;\r\n    const fourierMultiples = this.state.fourierMultiples;\r\n\r\n    return (\r\n            <div className = {styles.container}>\r\n\r\n                <div className = {styles.timePlots} id = \"timePlotsID\">\r\n                    <div className = {styles.cosinePlots} id =\"cosinePlotsID\">\r\n                        <svg id=\"svgCosinePlot\" width=\"40vw\" height=\"45vh\" \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black'\r\n                            }}> \r\n\r\n                            <CosinePlot\r\n                                signals = {current}\r\n                            />\r\n\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className = {styles.sumPlots} id =\"sumPlotsID\">\r\n                        <svg id=\"svgSumPlot\" width=\"40vw\" height=\"45vh\" \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black'\r\n                            }}> \r\n\r\n                            <SumPlot\r\n                                signals = {current}\r\n                            />\r\n                            \r\n                        </svg>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className = {styles.otherPlots}>\r\n\r\n                    <div className = {styles.fourierMagPlots} id =\"fourierMagPlotsID\">\r\n\r\n                        <svg id=\"svgFourierMagPlot\" width=\"40vw\" height=\"45vh\"  \r\n                            onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                            onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                            onMouseMove = {(event) => this.handleMouseMoveFourierMag(event)}\r\n                            onMouseOver = {(event) => this.handleMouseOverFourier(event)}\r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black',\r\n                            }}> \r\n                            \r\n                            <FourierMagPlot\r\n                                signals = {current}\r\n                                fourierMultiples = {fourierMultiples}\r\n                            />\r\n                \r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className = {styles.fourierPhasePlots} id =\"fourierPhasePlotsID\">\r\n                        <svg id=\"svgFourierPhasePlot\" width=\"40vw\" height=\"45vh\"\r\n                            onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                            onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                            onMouseMove = {(event) => this.handleMouseMoveFourierPhase(event)}  \r\n                            onMouseOver = {(event) => this.handleMouseOverFourier(event)}\r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black',\r\n                            }}> \r\n                        \r\n                            <FourierPhasePlot\r\n                                signals = {current}\r\n                                fourierMultiples = {fourierMultiples}\r\n                            />\r\n\r\n                        </svg>\r\n                    </div>  \r\n\r\n                </div>\r\n\r\n                <div className = {styles.controls} >\r\n        \r\n                        <Controls\r\n                            signals = {current}\r\n                            plotView = {this.state.plotView}\r\n                            demoSignal = {this.state.demoSignal}\r\n                            onChange = {(event) => this.handleChange(event)}\r\n                            onAdd = {(amplitude, phase) => this.addSignal(amplitude, phase)}\r\n                            onRemove = {(signalID) => this.removeSignal(signalID)}\r\n                            onAnimate = {(signalID) => this.animateSignal(signalID)}\r\n                            onDemoSignal = {(event) => this.handleDemoSignal(event)}\r\n                            onToggleView = {(event) => this.toggleView(event)}\r\n                        />\r\n                    \r\n                </div>\r\n            </div>\r\n      );\r\n    }\r\n  }","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styles from './App.module.css';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nimport {FourierCoefficients} from './FourierCoefficients.js'\r\n\r\n// \"Highest\" Parent class App. Manages the website's navigation and routing\r\nfunction App() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        </header>\r\n        <Router>\r\n          <Typography className = {styles.navbar}>\r\n                      <div className = {styles.tab} id=\"home\">  \r\n                        <Link to=\"/signals-web-app/\">Home</Link>\r\n                      </div>\r\n                      <div className = {styles.tab}> \r\n                        <Link to=\"/about\">About</Link>\r\n                      </div>\r\n                      <div className = {styles.tab}>  \r\n                        <Link to=\"/FourierCoefficients\">Fourier Coefficients</Link>\r\n                      </div>\r\n          </Typography>\r\n            {/*\r\n              A <Switch> looks through all its children <Route>\r\n              elements and renders the first one whose path\r\n              matches the current URL. Use a <Switch> any time\r\n              you have multiple routes, but you want only one\r\n              of them to render at a time\r\n            */}\r\n\r\n            <Switch>\r\n              <Route exact path=\"/signals-web-app/\">\r\n                <Home />\r\n              </Route>\r\n              <Route path=\"/about\">\r\n                <About />\r\n              </Route>\r\n              <Route path=\"/FourierCoefficients\">\r\n                <FourierCoefficients />\r\n              </Route>\r\n            </Switch>\r\n  \r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Returns HTML code for the \"About\" page\r\n  function About() {\r\n    return (\r\n      <div className = {styles.centertext}>  \r\n        <div>\r\n          <h2>About the Project</h2>\r\n            <h4>\r\n              The aim of the project was to help students to have a more intuitive understanding \r\n              of the various topics in ECE2111 - Signals and Systems. The unit ECE2111, Signals and Systems, \r\n              taught by lecturer James Saunderson, involves many visual representations of the properties of \r\n              sinusoidal signals and their frequency response. \r\n            </h4>\r\n            <h4>\r\n              James had an idea of a helpful, interactive web application where students could interact \r\n              with and adjust signal properties and observe the relationships in time domain, frequency \r\n              domain etc. Hence, this final year project was proposed.\r\n            </h4>\r\n          <h2/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Returns HTML code for the \"Home\" page\r\n  class Home extends React.Component{\r\n    render() {\r\n\r\n      return(\r\n      <div>\r\n        <div className = {styles.centertext}>  \r\n          <h2>Welcome!</h2>\r\n          <h4>\r\n            This website was designed to allow students to learn more about topics in the unit ECE2111\r\n            through visualization and interaction with signal properties.\r\n            \r\n          </h4>\r\n            <h4>\r\n              Feel free to explore the topics, there's (hopefully) more to come!\r\n            </h4>\r\n          </div>\r\n      </div>\r\n      )\r\n\r\n    };\r\n  }\r\n\r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n  );\r\n\r\n  export default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"App_home__gVUmA\",\"container\":\"App_container__2fAhY\",\"navbar\":\"App_navbar__3YSH8\",\"tab\":\"App_tab__2izV7\",\"centertext\":\"App_centertext__1tHIr\"};"],"sourceRoot":""}