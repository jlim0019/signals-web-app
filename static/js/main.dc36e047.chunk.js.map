{"version":3,"sources":["FrequencyDomain.module.css","App.module.css","FourierCoefficients.module.css","FourierCoefficients.js","FrequencyDomain.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dials","props","className","styles","signal_container","signal_info","tooltip","tooltiptext","signal","id","onClick","signalID","onRemove","height","width","r","cx","cy","fill","colour","stroke","strokeWidth","signal_props","amplitude","toFixed","signal_id","input_type","type","min","max","value","step","onChange","phase","Controls","event","i","signalList","this","signals","length","push","key","renderDial","dials","global_controls","align-content","onAdd","style","gridRow","name","demoSignal","onDemoSignal","React","Component","FourierCirclesMagPos","divHeight","document","getElementById","getBoundingClientRect","divWidth","plotHeight","plotWidth","transform","FourierCirclesMagNeg","FourierCirclesPhasePos","FourierCirclesPhaseNeg","FourierMagPlot","FourierMagSvg","d3","xscale_freq","domain","range","yscale_freq","xAxisTicks","ticks","filter","tick","Number","isInteger","yAxisTicks","x_axis_freq","tickValues","tickFormat","y_axis_freq","append","attr","text","call","circleList","renderCirclePos","renderCircleNeg","FourierPhasePlot","FourierPhaseSvg","SinePlot","svgSinePlot","xscale","yscale","x_axis","scale","y_axis","pathData","curve","lineGenerator","values","pathID","SumPlot","svgSumPlot","sumSignals","k","j","n","concat","FourierCoefficients","state","handleMouseDown","bind","handleMouseUp","handleMouseMove","handleMouseMoveFourierMag","handleMouseMoveFourierPhase","handleDemoSignal","intensity","frequency","generateSignal","toString","draggingMag","draggingPhasePos","draggingPhaseNeg","rgb","newSignal","splice","setState","index","console","log","remove","points","Ts","Math","PI","sin","inputType","target","getAttribute","parseFloat","isNaN","generateDC","e","preventDefault","stopPropagation","elementID","includes","parseInt","circleID","dragging","clientX","clientY","rect","parentNode","left","top","circleCX","emptyPlots","hsl","amp","alternate","pow","current","container","timePlots","sinePlots","position","border","sumPlots","otherPlots","fourierMagPlots","onMouseDown","onMouseUp","onMouseMove","fourierPhasePlots","controls","handleChange","addSignal","removeSignal","signal_dials","Circles","onMouseOut","svgID","FrequencyPlot","freqSvg","renderCircle","FrequencyDomain","circles","freqPlots","App","navbar","tab","to","exact","path","About","centertext","Home","ReactDOM","render","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc36e047.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"FrequencyDomain_home__30fuX\",\"container\":\"FrequencyDomain_container__DTkEc\",\"navbar\":\"FrequencyDomain_navbar__2nfHk\",\"tab\":\"FrequencyDomain_tab__2HYGI\",\"controls\":\"FrequencyDomain_controls__3_b1P\",\"dials\":\"FrequencyDomain_dials__1_C6C\",\"signal_container\":\"FrequencyDomain_signal_container__2wtJT\",\"signal_info\":\"FrequencyDomain_signal_info__2oOve\",\"signal_props\":\"FrequencyDomain_signal_props__3Psyr\",\"signal_dials\":\"FrequencyDomain_signal_dials__36fR_\",\"sinePlots\":\"FrequencyDomain_sinePlots__1Lmk_\",\"otherPlots\":\"FrequencyDomain_otherPlots__2dZs_\",\"freqPlots\":\"FrequencyDomain_freqPlots__2WRIF\",\"sumPlots\":\"FrequencyDomain_sumPlots__9CQRp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"App_home__gVUmA\",\"container\":\"App_container__2fAhY\",\"navbar\":\"App_navbar__3YSH8\",\"tab\":\"App_tab__2izV7\",\"centertext\":\"App_centertext__1tHIr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"FourierCoefficients_home__10kQG\",\"container\":\"FourierCoefficients_container__kd25g\",\"navbar\":\"FourierCoefficients_navbar__2pTv4\",\"tab\":\"FourierCoefficients_tab__8pHCY\",\"tooltip\":\"FourierCoefficients_tooltip__1v6vc\",\"tooltiptext\":\"FourierCoefficients_tooltiptext__P9iLV\",\"controls\":\"FourierCoefficients_controls___EOHp\",\"dials\":\"FourierCoefficients_dials__1zijK\",\"global_controls\":\"FourierCoefficients_global_controls__1LP2r\",\"signal_container\":\"FourierCoefficients_signal_container__1Of7C\",\"signal_info\":\"FourierCoefficients_signal_info__2oYZ9\",\"signal_props\":\"FourierCoefficients_signal_props__1Kcya\",\"signal_dials\":\"FourierCoefficients_signal_dials__kLbm8\",\"timePlots\":\"FourierCoefficients_timePlots__vs39U\",\"sinePlots\":\"FourierCoefficients_sinePlots__NqB9U\",\"otherPlots\":\"FourierCoefficients_otherPlots__AqeTC\",\"fourierMagPlots\":\"FourierCoefficients_fourierMagPlots__1Fesw\",\"fourierPhasePlots\":\"FourierCoefficients_fourierPhasePlots__3rZM3\",\"sumPlots\":\"FourierCoefficients_sumPlots__DMOR_\"};","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styles from './FourierCoefficients.module.css'; \r\nimport * as d3 from \"d3\";\r\nimport { hsl } from 'd3';\r\nimport { rgb } from 'd3';\r\n\r\nfunction Dials(props) {\r\n    return(\r\n        <div className={styles.signal_container}>\r\n            <div className={styles.signal_info}>\r\n\r\n                <div className={styles.tooltip}>\r\n                    | Help |\r\n                        <span className={styles.tooltiptext}>\r\n                            <p>This is the control panel to adjust signal properties.</p>\r\n                            <p>Try adjusting the Amplitude and Phase!</p>\r\n                        </span>\r\n                    \r\n                </div>\r\n                \r\n                <div>ID: {props.signal.id}</div>\r\n                <button id = \"remove-signal\" onClick={(signalID) => props.onRemove(props.signal.id)}> Remove Signal </button>\r\n                <div> Colour </div>\r\n                <svg height = \"40\" width = \"20\">\r\n                    <circle\r\n                        r = {10}\r\n                        cx = {10}\r\n                        cy = {20}\r\n                        fill = {props.signal.colour}\r\n                        stroke = \"black\"\r\n                        strokeWidth=\"1\"\r\n                    />\r\n                </svg>\r\n            </div>\r\n            <div className={styles.signal_props}>\r\n                <div>Amplitude: {props.signal.amplitude.toFixed(2)}</div>\r\n            </div>\r\n            <div className = {styles.signal_props}>\r\n                <div>\r\n                    <input \r\n                    id = {\"signal\" + props.signal.id + \"_AmpDial\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpDial\"}\r\n                    type =\"range\" \r\n                    min={0} \r\n                    max ={4} \r\n                    value = {props.signal.amplitude} \r\n                    step={0.1}\r\n                    onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                    id = {\"signal\" + props.signal.id + \"_AmpText\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpText\"}\r\n                    type = \"number\"  \r\n                    min = {0}\r\n                    max = {4}\r\n                    onChange={props.onChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div className={styles.signal_props}>\r\n                <div>Phase: {props.signal.phase}</div>\r\n            </div>\r\n            <div className={styles.signal_props}>\r\n                <div>\r\n                    <input \r\n                        id = {\"signal\" + props.signal.id + \"_PhaseDial\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseDial\"}\r\n                        type =\"range\" \r\n                        min={-180} \r\n                        max ={180} \r\n                        value = {props.signal.phase} \r\n                        step={1}\r\n                        onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                        id = {\"signal\" + props.signal.id + \"_PhaseText\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseText\"}\r\n                        type = \"number\"  \r\n                        min = {-180}\r\n                        max = {180}\r\n                        onChange={props.onChange}\r\n                    />\r\n                </div>        \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Controls extends React.Component {\r\n\r\n    renderDial(signal){\r\n        return(\r\n            <Dials\r\n                signal = {signal}\r\n                onChange = {(event) => this.props.onChange(event)}\r\n                onRemove = {(i) => this.props.onRemove(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n        const signalList = []; \r\n        for (let i=0; i < this.props.signals.length; i++){\r\n            signalList.push(\r\n                <div key={\"signal\" + this.props.signals[i].id}> \r\n                    {this.renderDial(this.props.signals[i])} \r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            <div className = {styles.dials} >\r\n                <div className = {styles.global_controls}>\r\n\r\n                    <div className={styles.tooltip}>\r\n                        | Help |\r\n                            <span className={styles.tooltiptext}>\r\n                                <p>Try adding a signal!</p>\r\n                            </span>\r\n                    </div>\r\n                    <button id = \"add-signal\" align-content = \"center\" onClick={() => this.props.onAdd(0, 0)}> Add New Signal </button>\r\n                    <div style={{gridRow: \"2\"}}> Try a demo signal </div>\r\n                    <select name=\"demoSignal\" id=\"demoSignal\" \r\n                        value = {this.props.demoSignal}\r\n                        onChange = {(event) => this.props.onDemoSignal(event)}\r\n                        style={{gridRow: \"2\"}}>\r\n                        <option value =\"select\">- Select -</option>\r\n                        <option value =\"empty\">Empty</option>\r\n                        <option value=\"sine\">Sine Wave</option>\r\n                        <option value=\"even\">Even Wave</option>\r\n                        <option value=\"odd\">Odd Wave</option>\r\n                        <option value=\"triangle\">Triangle Wave</option>\r\n                        <option value=\"square\">Square Wave Approx</option>\r\n                        <option value=\"sawtooth\">Sawtooth Wave Approx</option>\r\n                    </select>\r\n                </div>\r\n                {signalList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction FourierCirclesMagPos(props) {\r\n    let divHeight = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_mag_\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*(plotWidth/8)}\r\n            cy = {(props.signal.amplitude)*(plotHeight/8)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n            /*\r\n            onMouseDown={props.onMouseDown}\r\n            onMouseUp={props.onMouseUp}\r\n            onMouseOut={props.onMouseUp}\r\n            onMouseMove={props.onMouseMove}\r\n            */\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesMagNeg(props) {\r\n    let divHeight = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_mag_-\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*-(plotWidth/8)} // 8 is because our x-axis is divided into 8 sections \r\n            cy = {(props.signal.amplitude)*(plotHeight/8)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n            /*\r\n            onMouseDown={props.onMouseDown}\r\n            onMouseUp={props.onMouseUp}\r\n            onMouseOut={props.onMouseUp}\r\n            onMouseMove={props.onMouseMove}\r\n            */\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesPhasePos(props) {\r\n    let divHeight = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_phase_+\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*(plotWidth/8)} // 8 is because our x-axis is divided into 8 sections \r\n            cy = {(props.signal.phase)*(plotHeight/360)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n            /*\r\n            onMouseDown={props.onMouseDown}\r\n            onMouseUp={props.onMouseUp}\r\n            onMouseOut={props.onMouseUp}\r\n            onMouseMove={props.onMouseMove}\r\n            */\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesPhaseNeg(props) {\r\n    let divHeight = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_phase_-\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*-(plotWidth/8)} // 8 is because our x-axis is divided into 8 sections \r\n            cy = {-(props.signal.phase)*(plotHeight/360)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n            /*\r\n            onMouseDown={props.onMouseDown}\r\n            onMouseUp={props.onMouseUp}\r\n            onMouseOut={props.onMouseUp}\r\n            onMouseMove={props.onMouseMove}\r\n            */\r\n        />\r\n    );\r\n}\r\n\r\nclass FourierMagPlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n\r\n        let FourierMagSvg = d3.select(\"#svgFourierMagPlot\")\r\n\r\n        // Should probably check both axis if they exist before appending\r\n        if(!document.getElementById(\"x_axis_fourierMagPlot\")){\r\n   \r\n            // Create Axis for Frequency Plot\r\n            let xscale_freq = d3.scaleLinear()\r\n                    .domain([-4, 4]) // This needs to be dynamic\r\n                    .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n            let yscale_freq = d3.scaleLinear()\r\n                    .domain([4,0]) // This needs to be dynamic\r\n                    .range([ (1/10)*this.height, (5/10)*this.height ]);\r\n\r\n            // Add scales to axis\r\n            const xAxisTicks = xscale_freq.ticks()\r\n                                     .filter(tick => Number.isInteger(tick));\r\n\r\n            const yAxisTicks = yscale_freq.ticks()\r\n                                     .filter(tick => Number.isInteger(tick))                         \r\n \r\n            let x_axis_freq = d3.axisBottom(xscale_freq)\r\n             .tickValues(xAxisTicks)\r\n             .tickFormat(d3.format(\"d\"));\r\n\r\n            let y_axis_freq = d3.axisLeft(yscale_freq)\r\n             .tickValues(yAxisTicks)\r\n             .tickFormat(d3.format(\"d\"));\r\n\r\n            FourierMagSvg.append(\"text\")\r\n                         .attr(\"text-anchor\", \"middle\")  \r\n                         .attr(\"x\",this.width/2)\r\n                         .attr(\"y\",this.height/20)\r\n                         .style(\"font-size\", \"16px\") \r\n                         .style(\"text-decoration\", \"underline\")  \r\n                         .text(\"Fourier Magnitude Plot\");\r\n\r\n            FourierMagSvg.append('g')\r\n                         .attr(\"id\",\"x_axis_fourierMagPlot\")\r\n                         .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n                         .attr(\"pointer-events\", \"none\")\r\n                         .call(x_axis_freq)\r\n\r\n            FourierMagSvg.append('g')\r\n                         .attr(\"id\",\"y_axis_fourierMagPlot\")\r\n                         .attr(\"transform\",\"translate(\" + this.width/2 + \",0)\")\r\n                         .attr(\"pointer-events\", \"none\")\r\n                         .call(y_axis_freq); \r\n        }\r\n    }\r\n\r\n    renderCirclePos(signal){\r\n        return(\r\n            <FourierCirclesMagPos\r\n                signal = {signal}\r\n                /*\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n                */\r\n            />\r\n        );\r\n    }\r\n\r\n    renderCircleNeg(signal){\r\n        return(\r\n            <FourierCirclesMagNeg\r\n                signal = {signal}\r\n                /*\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n                */\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n        const signals = this.props.signals;\r\n   \r\n           const circleList = [];\r\n          \r\n           for (let i=0; i < signals.length; i++){\r\n                if(signals[i].id === 0){\r\n                    circleList.push(\r\n                        this.renderCirclePos(signals[i]) \r\n                    )\r\n                }\r\n                else{\r\n                    circleList.push(\r\n                        this.renderCirclePos(signals[i]),\r\n                        this.renderCircleNeg(signals[i])\r\n                    )\r\n                }\r\n           }                    \r\n   \r\n           return( \r\n               <svg>\r\n                  {circleList}\r\n               </svg>\r\n           );\r\n       }\r\n}\r\n\r\nclass FourierPhasePlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n\r\n        let FourierPhaseSvg = d3.select(\"#svgFourierPhasePlot\")\r\n\r\n        // Should probably check both axis if they exist before appending\r\n        if(!document.getElementById(\"x_axis_fourierPhasePlot\")){\r\n   \r\n            // Create Axis for Frequency Plot\r\n            let xscale_freq = d3.scaleLinear()\r\n                    .domain([-4, 4]) // This needs to be dynamic\r\n                    .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n            let yscale_freq = d3.scaleLinear()\r\n                    .domain([180,-180]) // This needs to be dynamic\r\n                    .range([ (1/10)*this.height, (9/10)*this.height ]);\r\n\r\n            // Add scales to axis\r\n            const xAxisTicks = xscale_freq.ticks()\r\n                                     .filter(tick => Number.isInteger(tick));\r\n \r\n            let x_axis_freq = d3.axisBottom(xscale_freq)\r\n             .tickValues(xAxisTicks)\r\n             .tickFormat(d3.format(\"d\"));\r\n\r\n            let y_axis_freq = d3.axisLeft(yscale_freq);\r\n            \r\n            FourierPhaseSvg.append(\"text\")\r\n                         .attr(\"text-anchor\", \"middle\")  \r\n                         .attr(\"x\",this.width/2)\r\n                         .attr(\"y\",this.height/20)\r\n                         .style(\"font-size\", \"16px\") \r\n                         .style(\"text-decoration\", \"underline\")  \r\n                         .text(\"Fourier Phase Plot\"); \r\n\r\n            FourierPhaseSvg.append('g')\r\n                         .attr(\"id\",\"x_axis_fourierPhasePlot\")\r\n                         .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n                         .attr(\"pointer-events\", \"none\")\r\n                         .call(x_axis_freq)\r\n\r\n            FourierPhaseSvg.append('g')\r\n                         .attr(\"id\",\"y_axis_fourierPhasePlot\")\r\n                         .attr(\"transform\",\"translate(\" + this.width/2 + \",0)\")\r\n                         .attr(\"pointer-events\", \"none\")\r\n                         .call(y_axis_freq); \r\n        }\r\n    }\r\n\r\n    renderCirclePos(signal){\r\n        return(\r\n            <FourierCirclesPhasePos\r\n                signal = {signal}\r\n                /*\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n                */\r\n            />\r\n        );\r\n    }\r\n\r\n    renderCircleNeg(signal){\r\n        return(\r\n            <FourierCirclesPhaseNeg\r\n                signal = {signal}\r\n                /*\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n                */\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n        const signals = this.props.signals;\r\n    \r\n           const circleList = []; \r\n           \r\n           for (let i=0; i < this.props.signals.length; i++){\r\n\r\n                if(i ===0){\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i]) \r\n                    )\r\n                }\r\n                else{\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i]),\r\n                        this.renderCircleNeg(this.props.signals[i])\r\n                    )\r\n                }\r\n               \r\n           }\r\n   \r\n           return( \r\n               <svg>\r\n                  {circleList}\r\n               </svg>\r\n           );\r\n       }\r\n}\r\n\r\n\r\nclass SinePlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"sinePlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"sinePlotsID\").getBoundingClientRect().width;\r\n\r\n        const svgSinePlot = d3.select(\"#svgSinePlot\")\r\n\r\n         // Create scale\r\n        let xscale = d3.scaleLinear()\r\n                        .domain([0, 2]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n                        .domain([4,-4]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.height, (9/10)*this.height ]);\r\n\r\n        // Add scales to axis\r\n        let x_axis = d3.axisBottom()\r\n                        .scale(xscale);\r\n\r\n        let y_axis = d3.axisLeft()\r\n                        .scale(yscale);\r\n\r\n        svgSinePlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",this.width/2)\r\n                .attr(\"y\",this.height/20)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sine Plots\");\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\", \"translate(0,\" + this.height/2 + \")\")\r\n                .attr(\"pointer-events\", \"none\")\r\n                .call(x_axis);\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .attr(\"pointer-events\", \"none\")\r\n                .call(y_axis)\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n        const signals = this.props.signals;\r\n    \r\n        // \"Overlay all sine plots into one graph\" version\r\n        for(let i = 0; i < signals.length; i++){\r\n\r\n            let lineGenerator = d3.line().curve(d3.curveNatural);\r\n  \r\n            let pathData = lineGenerator(signals[i].values);\r\n    \r\n            //The svg line Path we draw\r\n    \r\n            // If exists, update\r\n            if(document.getElementById(signals[i].pathID)){\r\n                d3.select(\"#\"+signals[i].pathID)\r\n                    .attr(\"d\", pathData)\r\n                    .attr(\"stroke\", signals[i].colour)                      \r\n            }\r\n            \r\n            // Draws path if it doesn't exist\r\n            if(!document.getElementById(signals[i].pathID)){\r\n                d3.select(\"#svgSinePlot\").append(\"path\")\r\n                    .attr(\"id\",signals[i].pathID)\r\n                    .attr(\"d\", pathData)\r\n                    .attr(\"transform\",\"translate(\" + (1/10)*this.width + \")\")\r\n                    .attr(\"stroke\", signals[i].colour)\r\n                    .attr(\"stroke-width\", 2)\r\n                    .attr(\"fill\", \"none\")\r\n          }\r\n        }\r\n\r\n\r\n        // Appending svg\r\n        // Check if the element 'svg_id' exists. If not, create new svg, append and draw it\r\n        // Not sure if this scales well\r\n\r\n        /* Code for seperate Plots\r\n        for(let i = 0; i < current.length; i++){\r\n\r\n            let svgID  = 'svg_'\r\n            let pathID = 'path_'\r\n            svgID = svgID.concat(i.toString(10))\r\n            pathID = pathID.concat(i.toString(10))\r\n\r\n            let lineGenerator = d3.line()\r\n                                  .curve(d3.curveNatural);\r\n\r\n            let pathData = lineGenerator(current[i].values);\r\n\r\n             // Create scale\r\n            let xscale = d3.scaleLinear()\r\n                        .domain([0, 2]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n            let yscale = d3.scaleLinear()\r\n                        .domain([4,-4]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.height, (9/10)*this.height ]);\r\n\r\n            // Add scales to axis\r\n            let x_axis = d3.axisBottom()\r\n                .scale(xscale);\r\n\r\n            let y_axis = d3.axisLeft()\r\n                .scale(yscale);\r\n\r\n            // For now, if svgID exists, then just redraw\r\n            if(document.getElementById(svgID)){\r\n                d3.select(\"#\"+pathID).attr(\"d\", pathData)  \r\n            }\r\n            \r\n            // If svgID doesn't exist, then add it to the DOM\r\n\r\n            if(!document.getElementById(svgID)){\r\n                //The SVG Container\r\n                const svgSinePlot = d3.select(\"#sinePlotsID\").append(\"svg\")\r\n                .attr(\"id\",svgID)\r\n                .attr(\"width\", \"40vw\")\r\n                .attr(\"height\", \"45vh\")\r\n                .attr(\"style\",\"position: absolute\")\r\n                .attr(\"style\", \"border: 1px solid black\")\r\n\r\n                svgSinePlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",this.width/2)\r\n                .attr(\"y\",this.height/20)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sine Plot \" + i);\r\n\r\n                //The line SVG Path we draw\r\n                svgSinePlot.append(\"path\")\r\n                .attr(\"id\",pathID)\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"stroke\", current[i].colour)\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n                .call(x_axis);\r\n                \r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .call(y_axis);\r\n            }          \r\n        }\r\n        */\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass SumPlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n\r\n        // Create scale\r\n        let xscale = d3.scaleLinear()\r\n        .domain([0, 2]) // This needs to be dynamic\r\n        .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n        .domain([4,-4]) // This needs to be dynamic\r\n        .range([(1/10)*this.height, (9/10)*this.height ]);\r\n\r\n        // Add scales to axis\r\n        let x_axis = d3.axisBottom()\r\n        .scale(xscale);\r\n\r\n        let y_axis = d3.axisLeft()\r\n        .scale(yscale);\r\n\r\n        const svgSumPlot = d3.select(\"#svgSumPlot\")\r\n\r\n                svgSumPlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",this.width/2)\r\n                .attr(\"y\",this.height/20)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sum of Signals Plot\");\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\", \"translate(0,\" + this.height/2 + \")\")\r\n                .attr(\"pointer-events\", \"none\")\r\n                .call(x_axis);\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .attr(\"pointer-events\", \"none\")\r\n                .call(y_axis)\r\n    }\r\n\r\n    render(){\r\n\r\n        let sumSignals = []; \r\n        let plotWidth = 0.8 * this.width;\r\n        // console.log(this.height);\r\n        // console.log(this.width);\r\n\r\n        // This will break if we change plotWidth elsewhere \r\n        for(let k = 0; k < plotWidth; k++){\r\n            sumSignals.push([0,0]);\r\n        }\r\n\r\n        // Looping through all the signals\r\n        for (let i=0; i < this.props.signals.length; i++){\r\n\r\n            // Looping through the signal values\r\n            for(let j=0; j < this.props.signals[i].values.length; j++){\r\n\r\n                //sumSignals[j] = this.props.signals[i].values[j];\r\n                sumSignals[j][0] = this.props.signals[i].values[j][0];\r\n                sumSignals[j][1] += this.props.signals[i].values[j][1];\r\n            }\r\n            \r\n        }\r\n\r\n        // Should scale this to the svg dimenesions rather than hardcoding it with svgContainerHeight\r\n        for (let n =0; n < sumSignals.length; n++){\r\n            sumSignals[n][1] = sumSignals[n][1] - (this.props.signals.length-1)*(this.height/2)\r\n        }\r\n\r\n        let lineGenerator = d3.line()\r\n          .curve(d3.curveNatural);\r\n\r\n        let pathData = lineGenerator(sumSignals);\r\n\r\n        //The svg line Path we draw\r\n\r\n        // If exists, update\r\n        if(document.getElementById(\"path_Sum\")){\r\n            d3.select(\"#\".concat(\"path_Sum\")).attr(\"d\", pathData)  \r\n               \r\n        }\r\n        \r\n        // Draws path if it doesn't exist\r\n        if(!document.getElementById(\"path_Sum\")){\r\n             d3.select(\"#svgSumPlot\").append(\"path\")\r\n                .attr(\"id\",\"path_Sum\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \")\")\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class FourierCoefficients extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            signals: [\r\n                /* Example signal object \r\n                {\r\n                    id: 0,\r\n                    amplitude: 1,\r\n                    frequency: 1,\r\n                    values: this.generateSignal(1,1),\r\n                    dragging: false,    \r\n                },\r\n                */\r\n            ],\r\n            demoSignal: 'select',\r\n        };\r\n        // This binding is necessary to make `this.` work in the callback   \r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseUp = this.handleMouseUp.bind(this);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n        this.handleMouseMoveFourierMag = this.handleMouseMoveFourierMag.bind(this);\r\n        this.handleMouseMoveFourierPhase = this.handleMouseMoveFourierPhase.bind(this);\r\n        this.handleDemoSignal = this.handleDemoSignal.bind(this);\r\n    }\r\n    \r\n    addSignal(amplitude, phase){\r\n        let signals = this.state.signals;\r\n\r\n        // Colour intensity goes from least intense: rgb(192,192,192) (Silver) to most intense: rgb(0,0,0) (Black)\r\n        const intensity =  (192 - 48*amplitude);\r\n\r\n        // Loop through the current state's signals array\r\n        for(let i = 0; i < signals.length + 1; i++){\r\n\r\n            // Add new signal to end of array if we reach end of array\r\n            if(i === signals.length){\r\n                signals = signals.concat([{       // Just concatenating array of JSON\r\n                    id: signals.length,\r\n                    amplitude: amplitude,                // Should be user input\r\n                    frequency: signals.length,   // Should be user input\r\n                    phase: phase,\r\n                    values: this.generateSignal(amplitude,signals.length,phase),\r\n                    pathID: 'path_'.concat(i.toString(10)), \r\n                    draggingMag: false,    \r\n                    draggingPhasePos: false,    \r\n                    draggingPhaseNeg: false,  \r\n                    colour: rgb(intensity,intensity,intensity),\r\n                },]);\r\n                // console.log(signals)\r\n                break;\r\n            }\r\n\r\n            // If there's a missing ID, insert it to appropriate index\r\n            // e.g. id array: [0, 1, 3]. Therefore missing id 2\r\n            if(i !== signals[i].id){\r\n                let newSignal = {       \r\n                    id: i,\r\n                    amplitude: amplitude,                // Should be user input\r\n                    frequency: i,   // Should be user input\r\n                    phase: phase,\r\n                    values: this.generateSignal(amplitude,i,phase),\r\n                    pathID: 'path_'.concat(i.toString(10)), \r\n                    draggingMag: false,    \r\n                    draggingPhasePos: false,    \r\n                    draggingPhaseNeg: false,  \r\n                    colour: rgb(intensity,intensity,intensity),\r\n                }\r\n\r\n                signals.splice(i, 0, newSignal);\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Once this.setState has been called, it'll call render() to render straight away\r\n        this.setState({\r\n            signals: signals,\r\n        });        \r\n    }\r\n\r\n    removeSignal(signalID){\r\n        // Need to find signal id from the array and delete, then re-update id's\r\n        const signals = this.state.signals;\r\n\r\n        console.log(\"Hi from removeSignal\");    \r\n        console.log(signalID)\r\n        console.log(\"Before: \", signals);\r\n\r\n        let index;\r\n        for(index = 0; index < signals.length; index++){\r\n            if(signals[index].id === signalID){\r\n                break\r\n            }\r\n        }\r\n        console.log(index)\r\n        \r\n        // Find the pathID and delete from DOM\r\n        d3.select(\"#\"+signals[index].pathID).remove();\r\n        \r\n        // Find the signal in the signals array and delete\r\n        signals.splice(index,1)\r\n        \r\n        console.log(\"After:\", signals);\r\n\r\n        this.setState({\r\n            signals: signals,\r\n        });\r\n        console.log(this.state.signals);\r\n\r\n    \r\n    }\r\n\r\n    generateSignal(amplitude, frequency, phase){\r\n        // Generating path data\r\n        let points = [];\r\n        // This assumes that sumPlot and sinePlots have the same dimensions, since generateSignal() is called from those plots\r\n        const divHeight = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        const plotWidth = 0.8 * document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n        // console.log(\"Plot Width\",plotWidth)\r\n        // console.log(\"Div Height\", divHeight)\r\n        let scale = -divHeight/10;\r\n        let x_offset = 0;\r\n        let y_offset = 0;\r\n\r\n        // let Fs = 80;\r\n        let Ts = Math.PI / (plotWidth/4);\r\n\r\n        /* Calculation Reference\r\n        // Assuming the plot is 800x800\r\n        // 1 period = 1 second\r\n        // 1 period = 400 pixels => Ts = 400 samples per second\r\n        // 1 Hz = 2pi radians\r\n\r\n        // Sampling frequency = samples/second\r\n        // 1 sample per 1/400 second (Ts = 1/400)\r\n        // Fs = 2pi * (1/400)\r\n        // Fs = pi / 200\r\n\r\n        // Frequency is in Hz\r\n        // This is bascially an inverse FFT \r\n        // i is basically our t (1 unit of time)\r\n        */\r\n        for(let i = x_offset; i< plotWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude*Math.sin(Ts*frequency*i + (phase * (Math.PI / 180) )) + (divHeight/2 + y_offset)];\r\n        }\r\n        // console.log(\"Plot Length\", points.length)\r\n\r\n        return points;\r\n    }\r\n\r\n    generateDC(amplitude){\r\n        let points = [];\r\n        const divHeight = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        const plotWidth = 0.8 * document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n        let scale = - divHeight/10;\r\n\r\n        let x_offset = 0;\r\n        let y_offset = 0;\r\n\r\n        for(let i = x_offset; i< plotWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude + (divHeight/2 + y_offset)];\r\n        }\r\n \r\n        return points\r\n    }\r\n\r\n    updateDials(){\r\n        const signals = this.state.signals;\r\n\r\n        for(let i = 0; i< signals.length; i++){\r\n            document.getElementById(\"signal\" + signals[i].id + \"_AmpText\").value = signals[i].amplitude;\r\n            document.getElementById(\"signal\" + signals[i].id + \"_FreqText\").value = signals[i].frequency;\r\n        }\r\n    }\r\n\r\n    handleChange(event){\r\n\r\n        console.log(event)\r\n\r\n        const signals = this.state.signals;\r\n        const inputType = event.target.getAttribute('input_type');\r\n        const signalID = event.target.getAttribute('signal_id'); // Signal ID Number\r\n        let value = parseFloat(event.target.value);   \r\n\r\n        // Text Form can currently exceed the maximum limit of 10, should limit?\r\n\r\n        if((inputType === \"AmpDial\") || (inputType === \"AmpText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                // DC Case\r\n                if(signalID === 0){\r\n                    signals[signalID].amplitude = value; \r\n                    signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n                    document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n\r\n                    const intensity =  (192 - 48*value);\r\n                    signals[signalID].colour = rgb(intensity,intensity,intensity);\r\n                }\r\n                // All Other cases\r\n                else{\r\n                    signals[signalID].amplitude = value;                 \r\n                    signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                    document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n\r\n                    const intensity =  (192 - 48*value);\r\n                    signals[signalID].colour = rgb(intensity,intensity,intensity);\r\n                }     \r\n            }\r\n        }\r\n        else if ((inputType === \"PhaseDial\") || (inputType === \"PhaseText\")){\r\n            console.log(\"HELLO\")\r\n            console.log(signals[signalID].amplitude)\r\n            console.log(signals[signalID].phase)\r\n\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                // DC Case\r\n                if(signalID === 0){\r\n                    signals[signalID].phase = value; \r\n                    signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n                    document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n                }\r\n                 // All Other cases\r\n                else{\r\n                    signals[signalID].phase = value; \r\n                    signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                    document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n                }\r\n            }\r\n        }     \r\n\r\n        this.setState({\r\n                signals: signals,   \r\n            }   \r\n        );\r\n\r\n    }\r\n\r\n    \r\n    handleMouseDown(e){\r\n        console.log(\"clicked\")\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation()\r\n\r\n        const elementID = e.target.getAttribute('id');\r\n\r\n        if(elementID !== null){\r\n\r\n            const condition = elementID.includes(\"circle_\");\r\n\r\n            if(condition){\r\n\r\n                console.log('circle clicked')\r\n\r\n                const signals = this.state.signals;\r\n                const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n                const circleID = e.target.getAttribute('id'); // Circle ID \r\n                \r\n                // Finding signal array's index from signal id\r\n                let index;\r\n                for(index = 0; index < signals.length; index++){\r\n                    if(signals[index].id === signalID){\r\n                        \r\n                        break\r\n                    }\r\n                }\r\n                \r\n                if(circleID.includes(\"circle_mag\")){\r\n                    signals[index].draggingMag = true;\r\n                } \r\n                if(circleID.includes(\"circle_phase_+\")){\r\n                    signals[index].draggingPhasePos = true;\r\n                } \r\n                if(circleID.includes(\"circle_phase_-\")){\r\n                    signals[index].draggingPhaseNeg = true;\r\n                } \r\n\r\n                this.setState({\r\n                    signals: signals,   \r\n                    }\r\n                );   \r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseUp(e){\r\n        console.log(\"click released\")\r\n\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n\r\n        const signals = this.state.signals;\r\n\r\n        const elementID = e.target.getAttribute('id');\r\n\r\n        if(elementID !== null){\r\n\r\n            // set all signals dragging to false\r\n            for(let n = 0; n < signals.length; n++){\r\n                signals[n].draggingMag = false;\r\n                signals[n].draggingPhasePos = false;\r\n                signals[n].draggingPhaseNeg = false;\r\n            }\r\n\r\n            \r\n            const condition = elementID.includes(\"circle_\");\r\n\r\n            if(condition){\r\n\r\n                /*\r\n                const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n                console.log(e.type)\r\n\r\n                // Finding signal array's index from signal id\r\n                let index;\r\n                for(index = 0; index < signals.length; index++){\r\n                    if(signals[index].id === signalID){\r\n                        \r\n                        break\r\n                    }\r\n                }\r\n\r\n                // signals[index].dragging = false;\r\n\r\n                // signals[signalID].dragging = false;\r\n                */\r\n                \r\n                this.setState({\r\n                    signals: signals,   \r\n                    }\r\n                );\r\n\r\n                console.log(\"circle click released\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // Base Mouse move function. Used in Frequency Domain. Not currently in use in this .js file\r\n    handleMouseMove(e) {\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n        \r\n        let index;\r\n        for(index = 0; index < signals.length; index++){\r\n            if(signals[index].id === signalID){\r\n                break\r\n            }\r\n        }\r\n\r\n        //If we are dragging\r\n          if (signals[index].dragging) {\r\n              e.preventDefault();\r\n\r\n              console.log(e)\r\n              console.log(e.target)\r\n              console.log(\"clientX:\",e.clientX)\r\n              console.log(\"clientY:\",e.clientY)\r\n              // console.log(e.target.parentNode.parentNode)\r\n            let  rect = e.target.parentNode.parentNode.getBoundingClientRect();  \r\n\r\n            console.log(rect.left);\r\n            console.log(rect.top);\r\n\r\n\r\n            // Maybe should seperate coordinates and freq/amp values\r\n             signals[index].frequency = (e.clientX - rect.left - 400) / 100;\r\n             signals[index].amplitude = - (e.clientY - rect.top - 400) / 100;\r\n             signals[index].values = this.generateSignal(signals[index].amplitude, signals[index].frequency, signals[index].phase);\r\n\r\n            // We should set position limits\r\n\r\n            console.log(signals[index].frequency)\r\n            console.log(signals[index].amplitude)\r\n\r\n            console.log(this)\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n                }\r\n            );  \r\n        }\r\n    }\r\n\r\n    handleMouseMoveFourierMag(e) {\r\n\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n        \r\n        const elementID = e.target.getAttribute('id');\r\n\r\n        if(elementID !== null){\r\n\r\n            //if(condition){\r\n\r\n                const signals = this.state.signals;\r\n                \r\n                // Grabbing signal id number doesn't work if event is outside of the div element \r\n                // const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n\r\n                // Find the signal that is dragging \r\n                let index;\r\n                let dragging = false;\r\n                for(let n = 0; n < signals.length; n++){\r\n                    if(signals[n].draggingMag === true){\r\n                        \r\n                        dragging = true;\r\n                        index = n;\r\n                        // break // Need to break or else index will increment \r\n                    }\r\n                }\r\n\r\n                // console.log(\"mousemove signals:\",signals)\r\n                console.log(index);\r\n                \r\n                //If we are dragging\r\n                if (dragging) {\r\n                    // e.preventDefault();\r\n\r\n                    console.log(\"im dragging\")\r\n                    console.log(signals[index].draggingMag);\r\n                    // console.log(e.target)\r\n                    let  rect = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect();  \r\n\r\n                    let divHeight = rect.height;\r\n                    let divWidth = rect.width;\r\n                    let plotHeight = 0.8*divHeight;\r\n                    let plotWidth = 0.8*divWidth;\r\n\r\n                    // Divide by 8: max axis size (-4 to 4)\r\n                    let amplitude = - (e.clientY - rect.top - divHeight/2) / (plotHeight/8);\r\n                    if(amplitude > 4){\r\n                        amplitude = 4;\r\n                    }\r\n                    if(amplitude < 0){\r\n                        amplitude = 0;\r\n                    }\r\n\r\n                    // Maybe should seperate coordinates and freq/amp values\r\n                    signals[index].frequency = signals[index].id;\r\n                    signals[index].amplitude = amplitude;    \r\n                    signals[index].values = this.generateSignal(signals[index].amplitude, signals[index].frequency, signals[index].phase);\r\n                    \r\n                    const intensity =  (192 - 48*amplitude)\r\n                    signals[index].colour = rgb(intensity,intensity,intensity);\r\n\r\n                    // We should set position limits\r\n\r\n                    // Checking if signal is the DC value\r\n                    if(index === 0){\r\n                        signals[index].values = this.generateDC(signals[index].amplitude);\r\n                    }\r\n\r\n                    this.setState({\r\n                        signals: signals,   \r\n                        }\r\n                    );  \r\n                }\r\n\r\n            //}\r\n        }\r\n\r\n        \r\n    }\r\n    \r\n    handleMouseMoveFourierPhase(e) {\r\n\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n\r\n        const signals = this.state.signals;\r\n\r\n        const elementID = e.target.getAttribute('id');\r\n\r\n        // Sanity check\r\n        if(elementID !== null){\r\n\r\n            // Find the signal that is dragging \r\n\r\n            // Grabbing signal id number doesn't work if event is outside of the div element \r\n            // const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n\r\n            let index;\r\n            let draggingPhasePos = false;\r\n            let draggingPhaseNeg = false;\r\n            for(let n = 0; n < signals.length; n++){\r\n                if(signals[n].draggingPhasePos === true ){                        \r\n                    draggingPhasePos = true;\r\n                    index = n;\r\n                }\r\n                if(signals[n].draggingPhaseNeg === true){                      \r\n                    draggingPhaseNeg = true;\r\n                    index = n;\r\n                }\r\n            }\r\n\r\n            //If we are dragging\r\n            if(draggingPhasePos || draggingPhaseNeg){\r\n\r\n                // console.log(e.target)\r\n                let rect = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect();  \r\n\r\n                let divHeight = rect.height;\r\n                let divWidth = rect.width;\r\n                let plotHeight = 0.8*divHeight;\r\n                let plotWidth = 0.8*divWidth;\r\n\r\n                // Maybe should seperate coordinates and freq/amp values\r\n\r\n                let circleID;\r\n                console.log(index)\r\n                if(draggingPhasePos){\r\n                    circleID = \"circle_phase_+\".concat(index.toString(10)); \r\n                }\r\n                if(draggingPhaseNeg){\r\n                    circleID = \"circle_phase_-\".concat(index.toString(10)); \r\n                }\r\n                \r\n                console.log(circleID)\r\n                const circleCX = parseInt(document.getElementById(circleID).getAttribute(\"cx\"))\r\n                console.log(circleCX) \r\n\r\n                // Positive Circle\r\n                if(circleCX >= 0){\r\n                    let phase = parseInt( - (e.clientY - rect.top - divHeight/2) / (plotHeight/360));\r\n                    if(phase > 180){\r\n                        phase = 180;\r\n                    }\r\n                    if(phase < -180){\r\n                        phase = -180;\r\n                    }\r\n                    signals[index].phase = phase;\r\n                } \r\n\r\n                // Negative Circle\r\n                else if(circleCX < 0){\r\n                    let phase = parseInt( (e.clientY - rect.top - divHeight/2) / (plotHeight/360));\r\n                    if(phase > 180){\r\n                        phase = 180;\r\n                    }\r\n                    if(phase < -180){\r\n                        phase = -180;\r\n                    }\r\n                    signals[index].phase = phase;\r\n                } \r\n\r\n                console.log(signals[index].phase)\r\n                signals[index].frequency = signals[index].id; \r\n                signals[index].values = this.generateSignal(signals[index].amplitude, signals[index].frequency, signals[index].phase);\r\n\r\n                // We should set position limits\r\n\r\n                // Checking if signal is the DC value\r\n                if(index === 0){\r\n                    signals[index].values = this.generateDC(signals[index].amplitude);\r\n                }\r\n\r\n                this.setState({\r\n                    signals: signals,   \r\n                    }\r\n                );  \r\n            }\r\n        }\r\n    }\r\n\r\n    emptyPlots(){\r\n        let signals = this.state.signals;\r\n\r\n        for(let i = 0; i< signals.length; i++){                 \r\n\r\n            d3.select(\"#\"+signals[i].pathID).remove();\r\n        }  \r\n\r\n        return signals = [];\r\n    }\r\n\r\n    handleDemoSignal(e){\r\n\r\n        let signals = this.state.signals;\r\n        const demoSignal = e.target.value;\r\n\r\n\r\n        if(demoSignal === 'empty'){\r\n            signals = this.emptyPlots();\r\n        }\r\n\r\n        // Note: If you make multiple setState() calls, only the last call will run (the prior ones won't run)\r\n        // Hence why here, we instead of repeatedly calling addSignal(), we explicitly generate the signals array\r\n        // setState() is asynchronous and are batched for performance gains. \r\n        \r\n        if(demoSignal === 'sine'){\r\n \r\n            signals = this.emptyPlots();\r\n\r\n            // colour = rgb((192 - 48*value).toString(10) , (192 - 48*value).toString(10), (192 - 48*value).toString(10));\r\n\r\n            // Generating DC signal\r\n            let amplitude = 0;\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,\r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n            },])\r\n\r\n            // Generating other sine waves\r\n            amplitude = 1;\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,                \r\n                frequency: signals.length,   \r\n                phase: 0,\r\n                values: this.generateSignal(amplitude,signals.length,0),\r\n                pathID: 'path_1', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false, \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n            },])\r\n        }\r\n\r\n\r\n        if(demoSignal === 'even'){\r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: 0,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(0,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,    \r\n                colour: hsl(signals.length*60, 100, 50)\r\n            },])\r\n\r\n            // Generating other sine waves\r\n            for(let i = 0; i < 4; i++){\r\n                // Odd\r\n                if((i % 2) !== 0 ){\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: 1,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(1,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,     \r\n                        colour: hsl(signals.length*60, 100, 50)\r\n                    },])\r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: 0,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(0,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,  \r\n                        colour: hsl(signals.length*60, 100, 50)\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if(demoSignal === 'odd'){\r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: 0,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(0,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,    \r\n                colour: hsl(signals.length*60, 100, 50)\r\n            },])\r\n\r\n            // Generating other sine waves\r\n            for(let i = 0; i < 4; i++){\r\n                // Odd\r\n                if((i % 2) !== 0 ){\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: 0,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(0,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,   \r\n                        colour: hsl(signals.length*60, 100, 50)\r\n                    },])\r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: 1,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(1,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,   \r\n                        colour: hsl(signals.length*60, 100, 50)\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if(demoSignal === 'triangle'){\r\n            signals = this.emptyPlots();\r\n\r\n            let amp = 0\r\n            // Generating DC signal\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amp,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amp,signals.length,0),\r\n                pathID: 'path_0',  \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,     \r\n                colour: rgb((192 - 48*amp), (192 - 48*amp),(192 - 48*amp)),\r\n            },])\r\n\r\n            // Generating other sine waves\r\n            let alternate = true;\r\n            for(let i = 1; i < 20; i++){\r\n                // Odd\r\n                if((i % 2) !== 0 ){\r\n                    amp = (8/Math.pow(Math.PI,2))*(1/Math.pow(i,2));\r\n\r\n                    // Non-phase shifted harmonic\r\n                    if(alternate){\r\n                        signals = signals.concat([{       \r\n                            id: signals.length,\r\n                            amplitude: amp,                \r\n                            frequency: signals.length,   \r\n                            phase: 0,\r\n                            values: this.generateSignal(amp,signals.length,0),\r\n                            pathID: 'path_'.concat(i.toString(10)), \r\n                            draggingMag: false,    \r\n                            draggingPhasePos: false, \r\n                            draggingPhaseNeg: false,   \r\n                            colour: rgb((192 - 48*amp), (192 - 48*amp),(192 - 48*amp)),\r\n                        },])\r\n                        alternate = !alternate; \r\n                    }\r\n                    // Phase shifted harmonic\r\n                    else if(!alternate){\r\n                        signals = signals.concat([{       \r\n                            id: signals.length,\r\n                            amplitude: amp,                \r\n                            frequency: signals.length,   \r\n                            phase: 180,\r\n                            values: this.generateSignal(amp,signals.length, 180),\r\n                            pathID: 'path_'.concat(i.toString(10)), \r\n                            draggingMag: false,    \r\n                            draggingPhasePos: false, \r\n                            draggingPhaseNeg: false,    \r\n                            colour: rgb((192 - 48*amp), (192 - 48*amp),(192 - 48*amp)),\r\n                        },])\r\n                        alternate = !alternate; \r\n                    }    \r\n                    \r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    amp = 0;\r\n                    \r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: 0,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(0,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: rgb((192 - 48*amp), (192 - 48*amp),(192 - 48*amp)),\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if(demoSignal === 'square'){\r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: 0,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(0,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,  \r\n                colour: hsl(signals.length*60, 100, 50)\r\n            },])\r\n\r\n            // Generating other sine waves\r\n\r\n            for(let i = 1; i < 25; i++){\r\n                // Odd\r\n                if((i % 2) !== 0 ){\r\n                    \r\n                    let amp = (4/Math.PI)*(1/i);\r\n\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amp,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(amp,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,     \r\n                        colour: hsl(signals.length*60, 100, 50)\r\n                    },])    \r\n\r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: 0,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(0,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: hsl(signals.length*60, 100, 50)\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if(demoSignal === 'sawtooth'){\r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: 0,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(0,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,     \r\n                colour: hsl(signals.length*60, 100, 50)\r\n            },])\r\n\r\n            // Generating other sine waves\r\n\r\n            for(let i = 1; i < 25; i++){\r\n\r\n                let amp = (4/Math.PI)*(1/i);\r\n\r\n                // Odd\r\n                if((i % 2) !== 0 ){    \r\n\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amp,                \r\n                        frequency: signals.length,   \r\n                        phase: 180,\r\n                        values: this.generateSignal(amp,signals.length,180),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: hsl(signals.length*60, 100, 50)\r\n                    },])    \r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amp,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(amp,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: hsl(signals.length*60, 100, 50)\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            signals: signals,\r\n            demoSignal: demoSignal,\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n    const current = this.state.signals;\r\n    // console.log('demo:', this.state.demoSignal);\r\n\r\n    return (\r\n            <div className = {styles.container}>\r\n\r\n                <div className = {styles.timePlots} id = \"timePlotsID\">\r\n                    <div className = {styles.sinePlots} id =\"sinePlotsID\">\r\n                        <svg id=\"svgSinePlot\" width=\"40vw\" height=\"45vh\" \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black'\r\n                                }}> \r\n                            <SinePlot\r\n                                signals = {current}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                    <div className = {styles.sumPlots} id =\"sumPlotsID\">\r\n                        <svg id=\"svgSumPlot\" width=\"40vw\" height=\"45vh\" \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black'\r\n                                }}> \r\n                            <SumPlot\r\n                                signals = {current}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className = {styles.otherPlots}>\r\n\r\n                    <div className = {styles.fourierMagPlots} id =\"fourierMagPlotsID\">\r\n                        <svg id=\"svgFourierMagPlot\" width=\"40vw\" height=\"45vh\"  \r\n                        onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                        onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                        onMouseMove = {(event) => this.handleMouseMoveFourierMag(event)}\r\n\r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black',\r\n                                \r\n                                }}> \r\n                                \r\n                                \r\n                        \r\n                            <FourierMagPlot\r\n                                signals = {current}\r\n                                /*\r\n                                onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                                onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                                onMouseOut = {(event) => this.handleMouseUp(event)}\r\n                                onMouseMove = {(event) => this.handleMouseMoveFourierMag(event)}\r\n                                */\r\n\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className = {styles.fourierPhasePlots} id =\"fourierPhasePlotsID\">\r\n                        <svg id=\"svgFourierPhasePlot\" width=\"40vw\" height=\"45vh\"\r\n                            onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                            onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                            onMouseMove = {(event) => this.handleMouseMoveFourierPhase(event)}  \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black',\r\n                                \r\n                                }}> \r\n                        \r\n                            <FourierPhasePlot\r\n                                signals = {current}\r\n                                /*\r\n                                onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                                onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                                onMouseOut = {(event) => this.handleMouseUp(event)}\r\n                                onMouseMove = {(event) => this.handleMouseMoveFourierPhase(event)}\r\n                                */\r\n                            />\r\n                        </svg>\r\n                    </div>         \r\n                    \r\n                </div>\r\n                <div className = {styles.controls}>\r\n                    \r\n                        <Controls\r\n                            signals = {current}\r\n                            demoSignal = {this.state.demoSignal}\r\n                            onChange = {(event) => this.handleChange(event)}\r\n                            onAdd = {(amplitude, phase) => this.addSignal(amplitude, phase)}\r\n                            onRemove = {(signalID) => this.removeSignal(signalID)}\r\n                            onDemoSignal = {(event) => this.handleDemoSignal(event)}\r\n                        />\r\n                    \r\n                </div>\r\n            </div>\r\n      );\r\n    }\r\n  }","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styles from './FrequencyDomain.module.css';\r\nimport * as d3 from \"d3\";\r\n\r\nconst svgContainerWidth = 800;\r\nconst svgContainerHeight = 800;\r\n\r\nfunction Dials(props) {\r\n    return(\r\n        <div className={styles.signal_container}>\r\n            <div className={styles.signal_info}>\r\n                <div>ID: {props.signal.id}</div>\r\n                <button id = \"remove-signal\" onClick={(i) => props.onRemove(props.signal.id)}> Remove Signal </button>\r\n            </div>\r\n            <div className={styles.signal_props}>\r\n                <div>Amplitude: {props.signal.amplitude}</div>\r\n                <div>Frequency: {props.signal.frequency}</div>\r\n                <div>Phase: {props.signal.phase}</div>\r\n            </div>\r\n            <div className = {styles.signal_dials}>\r\n                <div>\r\n                    <input \r\n                    id = {\"signal\" + props.signal.id + \"_AmpDial\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpDial\"}\r\n                    type =\"range\" \r\n                    min={-5} \r\n                    max ={5} \r\n                    value = {props.signal.amplitude} \r\n                    step={0.1}\r\n                    onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                    id = {\"signal\" + props.signal.id + \"_AmpText\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpText\"}\r\n                    type = \"number\"  \r\n                    min = {-5}\r\n                    max = {5}\r\n                    onChange={props.onChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        id = {\"signal\" + props.signal.id + \"_FreqDial\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"FreqDial\"}\r\n                        type =\"range\" \r\n                        min={-4} \r\n                        max ={4} \r\n                        value = {props.signal.frequency} \r\n                        step={0.1}\r\n                        onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                        id = {\"signal\" + props.signal.id + \"_FreqText\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"FreqText\"}\r\n                        type = \"number\"  \r\n                        min = {-4}\r\n                        max = {4}\r\n                        onChange={props.onChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        id = {\"signal\" + props.signal.id + \"_PhaseDial\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseDial\"}\r\n                        type =\"range\" \r\n                        min={-180} \r\n                        max ={180} \r\n                        value = {props.signal.phase} \r\n                        step={1}\r\n                        onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                        id = {\"signal\" + props.signal.id + \"_PhaseText\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseText\"}\r\n                        type = \"number\"  \r\n                        min = {-180}\r\n                        max = {180}\r\n                        onChange={props.onChange}\r\n                    />\r\n                </div>        \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Controls extends React.Component {\r\n\r\n    renderDial(signal){\r\n        return(\r\n            <Dials\r\n                signal = {signal}\r\n                onChange = {(event) => this.props.onChange(event)}\r\n                onRemove = {(i) => this.props.onRemove(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n        const signalList = []; \r\n        for (let i=0; i < this.props.signals.length; i++){\r\n            signalList.push(\r\n                <div key={\"signal\" + this.props.signals[i].id}> \r\n                    {this.renderDial(this.props.signals[i])} \r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            <div className = {styles.dials} >\r\n                {signalList}\r\n                <button id = \"add-signal\" align-content = \"center\" onClick={() => this.props.onAdd()}> Add New Signal </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction Circles(props) {\r\n        return(\r\n            <circle\r\n                id = {\"circle_\"+props.signal.id}\r\n                signal_id = {props.signal.id}\r\n                cx = {(props.signal.frequency)* (800/8)}\r\n                cy = {(props.signal.amplitude)*(800/8)}\r\n                transform=\"translate(400,400) scale(1,-1)\"\r\n                r = {20}\r\n                fill = \"black\"\r\n                stroke = \"black\"\r\n                strokeWidth=\"1\"\r\n                onMouseDown={props.onMouseDown}\r\n                onMouseUp={props.onMouseUp}\r\n                onMouseOut={props.onMouseUp}\r\n                onMouseMove={props.onMouseMove}\r\n            />\r\n        );\r\n    \r\n}\r\n\r\n\r\nclass SinePlot extends React.Component {\r\n    render(){\r\n        const current = this.props.signals;\r\n    \r\n        // Appending svg\r\n        // Check if the element 'svg_id' exists. If not, create new svg, append and draw it\r\n        // Not sure if this scales well \r\n\r\n        for(let i = 0; i < current.length; i++){\r\n\r\n            let svgID  = 'svg_'\r\n            let pathID = 'path_'\r\n            svgID = svgID.concat(i.toString(10))\r\n            pathID = pathID.concat(i.toString(10))\r\n\r\n            let lineGenerator = d3.line()\r\n                                  .curve(d3.curveNatural);\r\n\r\n            let pathData = lineGenerator(current[i].values);\r\n\r\n             // Create scale\r\n            let xscale = d3.scaleLinear()\r\n                        .domain([0, 2]) // This needs to be dynamic\r\n                        .range([50, 750]);\r\n\r\n            let yscale = d3.scaleLinear()\r\n                        .domain([3.5,-3.5]) // This needs to be dynamic\r\n                        .range([50, 750]);\r\n\r\n            // Add scales to axis\r\n            let x_axis = d3.axisBottom()\r\n                .scale(xscale);\r\n\r\n            let y_axis = d3.axisLeft()\r\n                .scale(yscale);\r\n\r\n            // For now, if svgID exists, then just redraw\r\n            if(document.getElementById(svgID)){\r\n                d3.select(\"#\"+pathID).attr(\"d\", pathData)  \r\n            }\r\n            \r\n            // If svgID doesn't exist, then add it to the DOM\r\n\r\n            if(!document.getElementById(svgID)){\r\n                //The SVG Container\r\n                const svgSinePlot = d3.select(\"#sinePlotsID\").append(\"svg\")\r\n                .attr(\"id\",svgID)\r\n                .attr(\"width\", svgContainerWidth)\r\n                .attr(\"height\", svgContainerHeight)\r\n                .attr(\"transform\",\"translate(10)\")\r\n                .attr(\"style\",\"position: absolute\")\r\n                .attr(\"style\", \"border: 1px solid black\")\r\n                .attr(\"top\",\"100px\")\r\n                .attr(\"left\",\"50px\")\r\n\r\n                svgSinePlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",400)\r\n                .attr(\"y\",30)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sine Plot \" + i);\r\n\r\n                //The line SVG Path we draw\r\n                svgSinePlot.append(\"path\")\r\n                .attr(\"id\",pathID)\r\n                .attr(\"transform\",\"translate(50)\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"stroke\", \"blue\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(0,400)\")\r\n                .call(x_axis);\r\n                \r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(50,0)\")\r\n                .call(y_axis);\r\n            }          \r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport class FrequencyPlot extends React.Component {\r\n\r\n    renderCircle(signal){\r\n        return(\r\n            <Circles\r\n                signal = {signal}\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n    const signals = this.props.signals;\r\n     \r\n        let freqSvg = d3.select(\"#svgFreqPlot\")\r\n\r\n        const circleList = []; \r\n       \r\n        for (let i=0; i < this.props.signals.length; i++){\r\n            circleList.push(\r\n                    this.renderCircle(this.props.signals[i])\r\n            )\r\n        }\r\n        \r\n        // Should probably check both axis if they exist before appending\r\n        if(!document.getElementById(\"x_axis_freqPlot\")){\r\n\r\n            // Create Axis for Frequency Plot\r\n            let xscale_freq = d3.scaleLinear()\r\n                                .domain([-3.5, 3.5]) // This needs to be dynamic\r\n                                .range([50, 750]);\r\n\r\n            let yscale_freq = d3.scaleLinear()\r\n                                .domain([3.5,-3.5]) // This needs to be dynamic\r\n                                .range([50, 750]);\r\n\r\n            // Add scales to axis\r\n            let x_axis_freq = d3.axisBottom()\r\n                                .scale(xscale_freq);\r\n\r\n            let y_axis_freq = d3.axisLeft()\r\n                                .scale(yscale_freq);\r\n            \r\n            freqSvg.append(\"text\")\r\n                    .attr(\"text-anchor\", \"middle\")  \r\n                    .attr(\"x\",400)\r\n                    .attr(\"y\",30)\r\n                    .style(\"font-size\", \"16px\") \r\n                    .style(\"text-decoration\", \"underline\")  \r\n                    .text(\"Frequency Domain Plot\");\r\n                    \r\n            freqSvg.append('g')\r\n                    .attr(\"id\",\"x_axis_freqPlot\")\r\n                    .attr(\"transform\",\"translate(0,400)\")\r\n                    .call(x_axis_freq);\r\n\r\n            freqSvg.append('g')\r\n                    .attr(\"id\",\"y_axis_freqPlot\")\r\n                    .attr(\"transform\",\"translate(400,0)\")\r\n                    .call(y_axis_freq); \r\n        }\r\n\r\n        return( \r\n            <svg>\r\n               {circleList}\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n\r\nclass SumPlot extends React.Component {\r\n\r\n    render(){\r\n\r\n        let sumSignals = []; \r\n        let svgContainerHeight = 800;\r\n        let plotWidth = 700;\r\n\r\n        // This will break if we change plotWidth elsewhere \r\n        for(let k = 0; k < plotWidth; k++){\r\n            sumSignals.push([0,0]);\r\n        }\r\n\r\n        // Looping through all the signals\r\n        for (let i=0; i < this.props.signals.length; i++){\r\n\r\n            // Looping through the signal values\r\n            for(let j=0; j < this.props.signals[i].values.length; j++){\r\n\r\n                //sumSignals[j] = this.props.signals[i].values[j];\r\n                sumSignals[j][0] = this.props.signals[i].values[j][0];\r\n                sumSignals[j][1] += this.props.signals[i].values[j][1];\r\n            }\r\n            \r\n        }\r\n\r\n        // There is a way to scale this to the svg dimenesions rather than hardcoding it\r\n        for (let n =0; n < sumSignals.length; n++){\r\n            sumSignals[n][1] = sumSignals[n][1] - (this.props.signals.length-1)*(svgContainerHeight/2)\r\n        }\r\n\r\n        let lineGenerator = d3.line()\r\n          .curve(d3.curveNatural);\r\n\r\n        let pathData = lineGenerator(sumSignals);\r\n\r\n        // Create scale\r\n        let xscale = d3.scaleLinear()\r\n        .domain([0, 2]) // This needs to be dynamic\r\n        .range([50, 750]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n        .domain([3.5,-3.5]) // This needs to be dynamic\r\n        .range([50, 750]);\r\n\r\n        // Add scales to axis\r\n        let x_axis = d3.axisBottom()\r\n        .scale(xscale);\r\n\r\n        let y_axis = d3.axisLeft()\r\n        .scale(yscale);\r\n\r\n        //The line SVG Path we draw\r\n\r\n        // If exists, update\r\n        if(document.getElementById(\"path_Sum\")){\r\n            d3.select(\"#\"+\"path_Sum\").attr(\"d\", pathData)  \r\n               \r\n        }\r\n        \r\n        // Draws path if it doesn't exist\r\n        if(!document.getElementById(\"path_Sum\")){\r\n             d3.select(\"#svgSumPlot\").append(\"path\")\r\n                .attr(\"id\",\"path_Sum\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"transform\",\"translate(50)\")\r\n                .attr(\"stroke\", \"blue\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n\r\n            const svgSumPlot = d3.select(\"#svgSumPlot\")\r\n\r\n                svgSumPlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",400)\r\n                .attr(\"y\",30)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sum of Signals Plot\");\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\",\"translate(0,400)\")\r\n                .call(x_axis);\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\",\"translate(20,0)\")\r\n                .call(y_axis)\r\n                .attr(\"transform\",\"translate(50,0)\");\r\n                \r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class FrequencyDomain extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            signals: [\r\n                /* Example signal object \r\n                    {\r\n                    id: 0,\r\n                    amplitude: 1,\r\n                    frequency: 1,\r\n                    values: this.generateSignal(1,1),\r\n                    dragging: false,    \r\n                    },\r\n                */\r\n            ],\r\n            circles:[\r\n            ],\r\n        };\r\n        // This binding is necessary to make `this.` work in the callback   \r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseUp = this.handleMouseUp.bind(this);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    }\r\n    \r\n    addSignal(){\r\n        const signals = this.state.signals;\r\n\r\n        // Once this.setState has been called, it'll call render() to render straight away\r\n        this.setState({\r\n            signals: signals.concat([{  // Just concatenating array of JSON\r\n                id: signals.length,\r\n                amplitude: 0,           // Should be user input\r\n                frequency: 0,           // Should be user input\r\n                phase: 0,\r\n                values: this.generateSignal(0,0,0),\r\n                dragging: false,    \r\n            },]),\r\n        });        \r\n\r\n\r\n    }\r\n\r\n    removeSignal(i){\r\n        // Need to find signal id from the array and delete, then re-update id's\r\n        const signals = this.state.signals;\r\n\r\n\r\n        console.log(\"Hi from removeSignal\");    \r\n        console.log(i)\r\n        console.log(\"Before: \", signals);\r\n        signals.splice(i,1)\r\n        console.log(\"After:\", signals);\r\n\r\n        for(let n = 0; n< this.state.signals.length; n++){\r\n            signals[n].id = n;\r\n        }        \r\n\r\n        // Find the svgId and pathID and delete from DOM\r\n\r\n        let svgID  = 'svg_'\r\n        let pathID = 'path_'\r\n        svgID = svgID.concat(i.toString(10))\r\n        pathID = pathID.concat(i.toString(10))\r\n\r\n        d3.select(\"#\"+svgID).remove();\r\n\r\n        this.setState({\r\n            signals: signals,\r\n        });\r\n        console.log(this.state.signals);\r\n\r\n    \r\n    }\r\n\r\n    generateSignal(amplitude, frequency, phase){\r\n        // Generating path data\r\n        let points = [];\r\n        const plotHeight = 700;\r\n        const plotWidth = 700;\r\n        let scale = -100;\r\n        let x_offset = 0;\r\n        let y_offset = 50;\r\n\r\n        let Fs = 80;\r\n        let Ts = Math.PI / 200;\r\n\r\n        /* Calculation Reference\r\n        // 1 period = 1 second\r\n        // 1 period = 400 pixels => Ts = 400 samples per second\r\n        // 1 Hz = 2pi radians\r\n\r\n        // Sampling frequency = samples/second\r\n        // 1 sample per 1/400 second (Ts = 1/400)\r\n        // Fs = 2pi * (1/400)\r\n        // Fs = pi / 200\r\n\r\n        // Frequency is in Hz\r\n        // This is bascially an inverse FFT \r\n        // i is basically our t (1 unit of time)\r\n        */\r\n        for(let i = x_offset; i< plotWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude*Math.sin(Ts*frequency*i + (phase * (Math.PI / 180) )) + (plotHeight/2 + y_offset)];\r\n        }\r\n        return points;\r\n    }\r\n\r\n    updateDials(){\r\n        const signals = this.state.signals;\r\n\r\n        for(let i = 0; i< signals.length; i++){\r\n            document.getElementById(\"signal\" + signals[i].id + \"_AmpText\").value = signals[i].amplitude;\r\n            document.getElementById(\"signal\" + signals[i].id + \"_FreqText\").value = signals[i].frequency;\r\n        }\r\n    }\r\n\r\n    handleChange(event){\r\n\r\n\r\n        const signals = this.state.signals;\r\n        const inputType = event.target.getAttribute('input_type');\r\n        const signalID = event.target.getAttribute('signal_id'); // Signal ID Number\r\n        let value = parseFloat(event.target.value);   \r\n\r\n        // Text Form can currently exceed the maximum limit of 10, should limit?\r\n\r\n        if((inputType === \"AmpDial\") || (inputType === \"AmpText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                signals[signalID].amplitude = value;                 \r\n                signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n            }\r\n        }\r\n        else if ((inputType === \"FreqDial\") || (inputType === \"FreqText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                signals[signalID].frequency = value; \r\n                signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                document.getElementById(\"signal\" + signalID + \"_FreqText\").value = value;\r\n            }\r\n        } \r\n        else if ((inputType === \"PhaseDial\") || (inputType === \"PhaseText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                signals[signalID].phase = value; \r\n                signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n            }\r\n        }     \r\n\r\n        this.setState({\r\n                signals: signals,   \r\n            }   \r\n        );\r\n\r\n    }\r\n\r\n    \r\n    handleMouseDown(e){\r\n        console.log(\"clicked\")\r\n\r\n        e.preventDefault();\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n\r\n        signals[signalID].dragging = true;\r\n\r\n        this.setState({\r\n            signals: signals,   \r\n            }\r\n        );   \r\n    }\r\n\r\n    handleMouseUp(e){\r\n        console.log(\"click released\")\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n        console.log(e.type)\r\n        if(e.type == 'mouseout' && signals[signalID].dragging) {\r\n            console.log(\"mouse went out\")\r\n            return;\r\n        }\r\n\r\n        signals[signalID].dragging = false;\r\n        \r\n        this.setState({\r\n            signals: signals,   \r\n            }\r\n        );\r\n        \r\n    }\r\n\r\n    handleMouseMove(e) {\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n\r\n        //If we are dragging\r\n          if (signals[signalID].dragging) {\r\n              e.preventDefault();\r\n\r\n              console.log(e)\r\n              console.log(e.target)\r\n              console.log(\"clientX:\",e.clientX)\r\n              console.log(\"clientY:\",e.clientY)\r\n              // console.log(e.target.parentNode.parentNode)\r\n            let  rect = e.target.parentNode.parentNode.getBoundingClientRect();  \r\n\r\n            console.log(rect.left);\r\n            console.log(rect.top);\r\n\r\n\r\n            // Maybe should seperate coordinates and freq/amp values\r\n             signals[signalID].frequency = (e.clientX - rect.left - 400) / 100;\r\n             signals[signalID].amplitude = - (e.clientY - rect.top - 400) / 100;\r\n             signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n\r\n\r\n            // We should set position limits\r\n\r\n            console.log(signals[signalID].frequency)\r\n            console.log(signals[signalID].amplitude)\r\n\r\n            console.log(this)\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n                }\r\n            );  \r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n    const current = this.state.signals;\r\n\r\n    return (\r\n            <div className = {styles.container}>\r\n\r\n                <div className = {styles.sinePlots} id =\"sinePlotsID\">\r\n                    <SinePlot\r\n                        signals = {current}\r\n                    />\r\n                </div>\r\n\r\n                <div className = {styles.otherPlots}>\r\n                    <div className = {styles.freqPlots} id =\"freqPlotsID\">\r\n                        <svg id=\"svgFreqPlot\" width=\"800\" height=\"800\"  \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black',\r\n                                \r\n                                }}> \r\n                        \r\n                            <FrequencyPlot\r\n                                signals = {current}\r\n                                onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                                onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                                onMouseOut = {(event) => this.handleMouseUp(event)}\r\n                                onMouseMove = {(event) => this.handleMouseMove(event)}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className = {styles.sumPlots} id =\"sumPlotsID\">\r\n                        <svg id=\"svgSumPlot\" width=\"800\" height=\"800\" \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black'\r\n                                }}> \r\n                            <SumPlot\r\n                                signals = {current}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div className = {styles.controls}>\r\n                    \r\n                        <Controls\r\n                            signals = {current}\r\n                            onChange = {(event) => this.handleChange(event)}\r\n                            onAdd = {() => this.addSignal()}\r\n                            onRemove = {(i) => this.removeSignal(i)}\r\n                        />\r\n                    \r\n                </div>\r\n            </div>\r\n      );\r\n    }\r\n  }","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import logo from './logo.svg';\r\nimport styles from './App.module.css';\r\nimport * as d3 from \"d3\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nimport {FourierCoefficients} from './FourierCoefficients.js'\r\nimport {FrequencyDomain} from './FrequencyDomain.js'\r\n\r\n/*\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\n\r\n/* Known Bugs:\r\n- removeSignal() only works if you starting removing from the last signal\r\n- if you move/drag the mouse too fast the circle doesn't catch up\r\n- phase dial for DC signal updates amplitude when it's not meant to\r\n- negative phase circle is meant to move in opposite direction when dragged (cartersian coordinate problem)\r\n\r\n\r\n- Changing frequency does update the signal (when it's not meant to)\r\n^ But this is deliberate because we haven't updated FreqPlot functionality to fit with Fourier Plots\r\n*/\r\n\r\n\r\n\r\nfunction App() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        </header>\r\n        <Router>\r\n          <div className = {styles.navbar}>\r\n                      <div className = {styles.tab} id=\"home\">  \r\n                        <Link to=\"/\">Home</Link>\r\n                      </div>\r\n                      <div className = {styles.tab}> \r\n                        <Link to=\"/about\">About</Link>\r\n                      </div>\r\n                      <div className = {styles.tab}>  \r\n                        <Link to=\"/FourierCoefficients\">Fourier Coefficients</Link>\r\n                      </div>\r\n                      <div className = {styles.tab}>  \r\n                        <Link to=\"/FrequencyDomain\">Frequency Domain</Link>\r\n                      </div>\r\n          </div>\r\n            {/*\r\n              A <Switch> looks through all its children <Route>\r\n              elements and renders the first one whose path\r\n              matches the current URL. Use a <Switch> any time\r\n              you have multiple routes, but you want only one\r\n              of them to render at a time\r\n            */}\r\n\r\n            <Switch>\r\n              <Route exact path=\"/\">\r\n                <Home />\r\n              </Route>\r\n              <Route path=\"/about\">\r\n                <About />\r\n              </Route>\r\n              <Route path=\"/FourierCoefficients\">\r\n                <FourierCoefficients />\r\n              </Route>\r\n              <Route path=\"/FrequencyDomain\">\r\n                <FrequencyDomain />\r\n              </Route>\r\n            </Switch>\r\n  \r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function About() {\r\n    return (\r\n      <div className = {styles.centertext}>  \r\n        <div>\r\n          <h2>About the Project</h2>\r\n            <h4>\r\n              The aim of the project was to help students to have a more intuitive understanding \r\n              of the various topics in ECE2111 - Signals and Systems. The unit ECE2111, Signals and Systems, \r\n              taught by lecturer James Saunderson, involves many visual representations of the properties of \r\n              sinusoidal signals and their frequency response. \r\n            </h4>\r\n            <h4>\r\n              James had an idea of a helpful, interactive web application where students could interact \r\n              with and adjust signal properties and observe the relationships in time domain, frequency \r\n              domain etc. Hence, this final year project was proposed.\r\n            </h4>\r\n          <h2/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  class Home extends React.Component{\r\n    render() {\r\n\r\n      return(\r\n      <div>\r\n        <div className = {styles.centertext}>  \r\n          <h2>Welcome!</h2>\r\n          <h4>\r\n            This website was designed to allow students to learn more about topics in the unit ECE2111\r\n            through visualization and interaction with signal properties.\r\n            \r\n          </h4>\r\n            <h4>\r\n              Feel free to explore the topics, there's (hopefully) more to come!\r\n            </h4>\r\n          </div>\r\n      </div>\r\n      )\r\n\r\n    };\r\n  }\r\n\r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n  );\r\n\r\n  export default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}