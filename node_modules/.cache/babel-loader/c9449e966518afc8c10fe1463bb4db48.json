{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bunny\\\\Documents\\\\GitHub\\\\signals-web-app\\\\src\\\\FourierCoefficients.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport styles from './FourierCoefficients.module.css';\nimport * as d3 from \"d3\";\nimport { hsl } from 'd3';\nimport { rgb } from 'd3';\n\nfunction Dials(props) {\n  return React.createElement(\"div\", {\n    className: styles.signal_container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.signal_info,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.tooltip,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"| Help |\", React.createElement(\"span\", {\n    className: styles.tooltiptext,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"This is the control panel to adjust signal properties.\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"Try adjusting the Amplitude and Phase!\"))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"ID: \", props.signal.id), React.createElement(\"button\", {\n    id: \"remove-signal\",\n    onClick: signalID => props.onRemove(props.signal.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \" Remove Signal \"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \" Colour \"), React.createElement(\"svg\", {\n    height: \"40\",\n    width: \"20\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"circle\", {\n    r: 10,\n    cx: 10,\n    cy: 20,\n    fill: props.signal.colour,\n    stroke: \"black\",\n    strokeWidth: \"1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: styles.signal_props,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Amplitude: \", props.signal.amplitude.toFixed(2))), React.createElement(\"div\", {\n    className: styles.signal_props,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: \"signal\" + props.signal.id + \"_AmpDial\",\n    signal_id: props.signal.id,\n    input_type: \"AmpDial\",\n    type: \"range\",\n    min: 0,\n    max: 4,\n    value: props.signal.amplitude,\n    step: 0.1,\n    onChange: props.onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    id: \"signal\" + props.signal.id + \"_AmpText\",\n    signal_id: props.signal.id,\n    input_type: \"AmpText\",\n    type: \"number\",\n    min: 0,\n    max: 4,\n    onChange: props.onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: styles.signal_props,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Phase: \", props.signal.phase)), React.createElement(\"div\", {\n    className: styles.signal_props,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: \"signal\" + props.signal.id + \"_PhaseDial\",\n    signal_id: props.signal.id,\n    input_type: \"PhaseDial\",\n    type: \"range\",\n    min: -180,\n    max: 180,\n    value: props.signal.phase,\n    step: 1,\n    onChange: props.onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    id: \"signal\" + props.signal.id + \"_PhaseText\",\n    signal_id: props.signal.id,\n    input_type: \"PhaseText\",\n    type: \"number\",\n    min: -180,\n    max: 180,\n    onChange: props.onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }))));\n}\n\nclass Controls extends React.Component {\n  renderDial(signal) {\n    return React.createElement(Dials, {\n      signal: signal,\n      onChange: event => this.props.onChange(event),\n      onRemove: i => this.props.onRemove(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    const signalList = [];\n\n    for (let i = 0; i < this.props.signals.length; i++) {\n      signalList.push(React.createElement(\"div\", {\n        key: \"signal\" + this.props.signals[i].id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, this.renderDial(this.props.signals[i])));\n    }\n\n    return React.createElement(\"div\", {\n      className: styles.dials,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.global_controls,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.tooltip,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"| Help |\", React.createElement(\"span\", {\n      className: styles.tooltiptext,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Try adding a signal!\"))), React.createElement(\"button\", {\n      id: \"add-signal\",\n      \"align-content\": \"center\",\n      onClick: () => this.props.onAdd(0, 0),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \" Add New Signal \"), React.createElement(\"div\", {\n      style: {\n        gridRow: \"2\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \" Try a demo signal \"), React.createElement(\"select\", {\n      name: \"demoSignal\",\n      id: \"demoSignal\",\n      value: this.props.demoSignal,\n      onChange: event => this.props.onDemoSignal(event),\n      style: {\n        gridRow: \"2\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"- Select -\"), React.createElement(\"option\", {\n      value: \"empty\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Empty\"), React.createElement(\"option\", {\n      value: \"sine\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Sine Wave\"), React.createElement(\"option\", {\n      value: \"even\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Even Wave\"), React.createElement(\"option\", {\n      value: \"odd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Odd Wave\"), React.createElement(\"option\", {\n      value: \"triangle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Triangle Wave\"), React.createElement(\"option\", {\n      value: \"square\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Square Wave Approx\"), React.createElement(\"option\", {\n      value: \"sawtooth\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Sawtooth Wave Approx\"))), signalList);\n  }\n\n}\n\nfunction FourierCirclesMagPos(props) {\n  let divHeight = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\n  let divWidth = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\n  let plotHeight = 0.8 * divHeight;\n  let plotWidth = 0.8 * divWidth;\n  return React.createElement(\"circle\", {\n    id: \"circle_mag_\" + props.signal.id,\n    signal_id: props.signal.id,\n    cx: props.signal.id * (plotWidth / 8),\n    cy: props.signal.amplitude * (plotHeight / 8),\n    transform: \"translate(\" + divWidth / 2 + \",\" + divHeight / 2 + \") scale(1,-1)\",\n    r: 10,\n    fill: props.signal.colour,\n    stroke: \"black\",\n    strokeWidth: \"1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  });\n}\n\nfunction FourierCirclesMagNeg(props) {\n  let divHeight = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\n  let divWidth = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\n  let plotHeight = 0.8 * divHeight;\n  let plotWidth = 0.8 * divWidth;\n  return React.createElement(\"circle\", {\n    id: \"circle_mag_-\" + props.signal.id,\n    signal_id: props.signal.id,\n    cx: props.signal.id * -(plotWidth / 8) // 8 is because our x-axis is divided into 8 sections \n    ,\n    cy: props.signal.amplitude * (plotHeight / 8),\n    transform: \"translate(\" + divWidth / 2 + \",\" + divHeight / 2 + \") scale(1,-1)\",\n    r: 10,\n    fill: props.signal.colour,\n    stroke: \"black\",\n    strokeWidth: \"1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  });\n}\n\nfunction FourierCirclesPhasePos(props) {\n  let divHeight = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\n  let divWidth = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\n  let plotHeight = 0.8 * divHeight;\n  let plotWidth = 0.8 * divWidth;\n  return React.createElement(\"circle\", {\n    id: \"circle_phase_+\" + props.signal.id,\n    signal_id: props.signal.id,\n    cx: props.signal.id * (plotWidth / 8) // 8 is because our x-axis is divided into 8 sections \n    ,\n    cy: props.signal.phase * (plotHeight / 360),\n    transform: \"translate(\" + divWidth / 2 + \",\" + divHeight / 2 + \") scale(1,-1)\",\n    r: 10,\n    fill: props.signal.colour,\n    stroke: \"black\",\n    strokeWidth: \"1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  });\n}\n\nfunction FourierCirclesPhaseNeg(props) {\n  let divHeight = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\n  let divWidth = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\n  let plotHeight = 0.8 * divHeight;\n  let plotWidth = 0.8 * divWidth;\n  return React.createElement(\"circle\", {\n    id: \"circle_phase_-\" + props.signal.id,\n    signal_id: props.signal.id,\n    cx: props.signal.id * -(plotWidth / 8) // 8 is because our x-axis is divided into 8 sections \n    ,\n    cy: -props.signal.phase * (plotHeight / 360),\n    transform: \"translate(\" + divWidth / 2 + \",\" + divHeight / 2 + \") scale(1,-1)\",\n    r: 10,\n    fill: props.signal.colour,\n    stroke: \"black\",\n    strokeWidth: \"1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  });\n}\n\nclass FourierMagPlot extends React.Component {\n  constructor(props) {\n    super(props);\n    this.height = 0;\n    this.width = 0;\n  }\n\n  componentDidMount() {\n    // Only get dimensions when DOM is loaded\n    this.height = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\n    this.width = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\n    let FourierMagSvg = d3.select(\"#svgFourierMagPlot\"); // Should probably check both axis if they exist before appending\n\n    if (!document.getElementById(\"x_axis_fourierMagPlot\")) {\n      // Create Axis for Frequency Plot\n      let xscale_freq = d3.scaleLinear().domain([-4, 4]) // This needs to be dynamic\n      .range([1 / 10 * this.width, 9 / 10 * this.width]);\n      let yscale_freq = d3.scaleLinear().domain([4, 0]) // This needs to be dynamic\n      .range([1 / 10 * this.height, 5 / 10 * this.height]); // Add scales to axis\n\n      const xAxisTicks = xscale_freq.ticks().filter(tick => Number.isInteger(tick));\n      const yAxisTicks = yscale_freq.ticks().filter(tick => Number.isInteger(tick));\n      let x_axis_freq = d3.axisBottom(xscale_freq).tickValues(xAxisTicks).tickFormat(d3.format(\"d\"));\n      let y_axis_freq = d3.axisLeft(yscale_freq).tickValues(yAxisTicks).tickFormat(d3.format(\"d\"));\n      FourierMagSvg.append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"x\", this.width / 2).attr(\"y\", this.height / 20).style(\"font-size\", \"16px\").style(\"text-decoration\", \"underline\").text(\"Fourier Magnitude Plot\");\n      FourierMagSvg.append('g').attr(\"id\", \"x_axis_fourierMagPlot\").attr(\"transform\", \"translate(0,\" + this.height / 2 + \")\").attr(\"pointer-events\", \"none\").call(x_axis_freq);\n      FourierMagSvg.append('g').attr(\"id\", \"y_axis_fourierMagPlot\").attr(\"transform\", \"translate(\" + this.width / 2 + \",0)\").attr(\"pointer-events\", \"none\").call(y_axis_freq);\n    }\n  }\n\n  renderCirclePos(signal) {\n    return React.createElement(FourierCirclesMagPos, {\n      signal: signal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    });\n  }\n\n  renderCircleNeg(signal) {\n    return React.createElement(FourierCirclesMagNeg, {\n      signal: signal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    const signals = this.props.signals;\n    const circleList = [];\n\n    for (let i = 0; i < signals.length; i++) {\n      if (signals[i].id === 0) {\n        circleList.push(this.renderCirclePos(signals[i]));\n      } else {\n        circleList.push(this.renderCirclePos(signals[i]), this.renderCircleNeg(signals[i]));\n      }\n    }\n\n    return React.createElement(\"svg\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, circleList);\n  }\n\n}\n\nclass FourierPhasePlot extends React.Component {\n  constructor(props) {\n    super(props);\n    this.height = 0;\n    this.width = 0;\n  }\n\n  componentDidMount() {\n    // Only get dimensions when DOM is loaded\n    this.height = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\n    this.width = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\n    let FourierPhaseSvg = d3.select(\"#svgFourierPhasePlot\"); // Should probably check both axis if they exist before appending\n\n    if (!document.getElementById(\"x_axis_fourierPhasePlot\")) {\n      // Create Axis for Frequency Plot\n      let xscale_freq = d3.scaleLinear().domain([-4, 4]) // This needs to be dynamic\n      .range([1 / 10 * this.width, 9 / 10 * this.width]);\n      let yscale_freq = d3.scaleLinear().domain([180, -180]) // This needs to be dynamic\n      .range([1 / 10 * this.height, 9 / 10 * this.height]); // Add scales to axis\n\n      const xAxisTicks = xscale_freq.ticks().filter(tick => Number.isInteger(tick));\n      let x_axis_freq = d3.axisBottom(xscale_freq).tickValues(xAxisTicks).tickFormat(d3.format(\"d\"));\n      let y_axis_freq = d3.axisLeft(yscale_freq);\n      FourierPhaseSvg.append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"x\", this.width / 2).attr(\"y\", this.height / 20).style(\"font-size\", \"16px\").style(\"text-decoration\", \"underline\").text(\"Fourier Phase Plot\");\n      FourierPhaseSvg.append('g').attr(\"id\", \"x_axis_fourierPhasePlot\").attr(\"transform\", \"translate(0,\" + this.height / 2 + \")\").attr(\"pointer-events\", \"none\").call(x_axis_freq);\n      FourierPhaseSvg.append('g').attr(\"id\", \"y_axis_fourierPhasePlot\").attr(\"transform\", \"translate(\" + this.width / 2 + \",0)\").attr(\"pointer-events\", \"none\").call(y_axis_freq);\n    }\n  }\n\n  renderCirclePos(signal) {\n    return React.createElement(FourierCirclesPhasePos, {\n      signal: signal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    });\n  }\n\n  renderCircleNeg(signal) {\n    return React.createElement(FourierCirclesPhaseNeg, {\n      signal: signal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    const signals = this.props.signals;\n    const circleList = [];\n\n    for (let i = 0; i < this.props.signals.length; i++) {\n      if (i === 0) {\n        circleList.push(this.renderCirclePos(this.props.signals[i]));\n      } else {\n        circleList.push(this.renderCirclePos(this.props.signals[i]), this.renderCircleNeg(this.props.signals[i]));\n      }\n    }\n\n    return React.createElement(\"svg\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, circleList);\n  }\n\n}\n\nclass SinePlot extends React.Component {\n  constructor(props) {\n    super(props);\n    this.height = 0;\n    this.width = 0;\n  }\n\n  componentDidMount() {\n    // Only get dimensions when DOM is loaded\n    this.height = document.getElementById(\"sinePlotsID\").getBoundingClientRect().height;\n    this.width = document.getElementById(\"sinePlotsID\").getBoundingClientRect().width;\n    const svgSinePlot = d3.select(\"#svgSinePlot\"); // Create scale\n\n    let xscale = d3.scaleLinear().domain([0, 2]) // This needs to be dynamic\n    .range([1 / 10 * this.width, 9 / 10 * this.width]);\n    let yscale = d3.scaleLinear().domain([4, -4]) // This needs to be dynamic\n    .range([1 / 10 * this.height, 9 / 10 * this.height]); // Add scales to axis\n\n    let x_axis = d3.axisBottom().scale(xscale);\n    let y_axis = d3.axisLeft().scale(yscale);\n    svgSinePlot.append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"x\", this.width / 2).attr(\"y\", this.height / 20).style(\"font-size\", \"16px\").style(\"text-decoration\", \"underline\").text(\"Sine Plots\");\n    svgSinePlot.append('g').attr(\"transform\", \"translate(0,\" + this.height / 2 + \")\").attr(\"pointer-events\", \"none\").call(x_axis);\n    svgSinePlot.append('g').attr(\"transform\", \"translate(\" + 1 / 10 * this.width + \",0)\").attr(\"pointer-events\", \"none\").call(y_axis);\n  }\n\n  render() {\n    const signals = this.props.signals; // \"Overlay all sine plots into one graph\" version\n\n    for (let i = 0; i < signals.length; i++) {\n      let lineGenerator = d3.line().curve(d3.curveNatural);\n      let pathData = lineGenerator(signals[i].values); //The svg line Path we draw\n      // If exists, update\n\n      if (document.getElementById(signals[i].pathID)) {\n        d3.select(\"#\" + signals[i].pathID).attr(\"d\", pathData).attr(\"stroke\", signals[i].colour);\n      } // Draws path if it doesn't exist\n\n\n      if (!document.getElementById(signals[i].pathID)) {\n        d3.select(\"#svgSinePlot\").append(\"path\").attr(\"id\", signals[i].pathID).attr(\"d\", pathData).attr(\"transform\", \"translate(\" + 1 / 10 * this.width + \")\").attr(\"stroke\", signals[i].colour).attr(\"stroke-width\", 2).attr(\"fill\", \"none\");\n      }\n    } // Appending svg\n    // Check if the element 'svg_id' exists. If not, create new svg, append and draw it\n    // Not sure if this scales well\n\n    /* Code for seperate Plots\r\n    for(let i = 0; i < current.length; i++){\r\n          let svgID  = 'svg_'\r\n        let pathID = 'path_'\r\n        svgID = svgID.concat(i.toString(10))\r\n        pathID = pathID.concat(i.toString(10))\r\n          let lineGenerator = d3.line()\r\n                              .curve(d3.curveNatural);\r\n          let pathData = lineGenerator(current[i].values);\r\n           // Create scale\r\n        let xscale = d3.scaleLinear()\r\n                    .domain([0, 2]) // This needs to be dynamic\r\n                    .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n          let yscale = d3.scaleLinear()\r\n                    .domain([4,-4]) // This needs to be dynamic\r\n                    .range([ (1/10)*this.height, (9/10)*this.height ]);\r\n          // Add scales to axis\r\n        let x_axis = d3.axisBottom()\r\n            .scale(xscale);\r\n          let y_axis = d3.axisLeft()\r\n            .scale(yscale);\r\n          // For now, if svgID exists, then just redraw\r\n        if(document.getElementById(svgID)){\r\n            d3.select(\"#\"+pathID).attr(\"d\", pathData)  \r\n        }\r\n        \r\n        // If svgID doesn't exist, then add it to the DOM\r\n          if(!document.getElementById(svgID)){\r\n            //The SVG Container\r\n            const svgSinePlot = d3.select(\"#sinePlotsID\").append(\"svg\")\r\n            .attr(\"id\",svgID)\r\n            .attr(\"width\", \"40vw\")\r\n            .attr(\"height\", \"45vh\")\r\n            .attr(\"style\",\"position: absolute\")\r\n            .attr(\"style\", \"border: 1px solid black\")\r\n              svgSinePlot.append(\"text\")\r\n            .attr(\"text-anchor\", \"middle\")  \r\n            .attr(\"x\",this.width/2)\r\n            .attr(\"y\",this.height/20)\r\n            .style(\"font-size\", \"16px\") \r\n            .style(\"text-decoration\", \"underline\")  \r\n            .text(\"Sine Plot \" + i);\r\n              //The line SVG Path we draw\r\n            svgSinePlot.append(\"path\")\r\n            .attr(\"id\",pathID)\r\n            .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n            .attr(\"d\", pathData)\r\n            .attr(\"stroke\", current[i].colour)\r\n            .attr(\"stroke-width\", 2)\r\n            .attr(\"fill\", \"none\")\r\n              svgSinePlot.append('g')\r\n            .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n            .call(x_axis);\r\n            \r\n            svgSinePlot.append('g')\r\n            .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n            .call(y_axis);\r\n        }          \r\n    }\r\n    */\n\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    });\n  }\n\n}\n\nclass SumPlot extends React.Component {\n  constructor(props) {\n    super(props);\n    this.height = 0;\n    this.width = 0;\n  }\n\n  componentDidMount() {\n    // Only get dimensions when DOM is loaded\n    this.height = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\n    this.width = document.getElementById(\"svgSumPlot\").getBoundingClientRect().width; // Create scale\n\n    let xscale = d3.scaleLinear().domain([0, 2]) // This needs to be dynamic\n    .range([1 / 10 * this.width, 9 / 10 * this.width]);\n    let yscale = d3.scaleLinear().domain([4, -4]) // This needs to be dynamic\n    .range([1 / 10 * this.height, 9 / 10 * this.height]); // Add scales to axis\n\n    let x_axis = d3.axisBottom().scale(xscale);\n    let y_axis = d3.axisLeft().scale(yscale);\n    const svgSumPlot = d3.select(\"#svgSumPlot\");\n    svgSumPlot.append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"x\", this.width / 2).attr(\"y\", this.height / 20).style(\"font-size\", \"16px\").style(\"text-decoration\", \"underline\").text(\"Sum of Signals Plot\");\n    svgSumPlot.append('g').attr(\"transform\", \"translate(0,\" + this.height / 2 + \")\").attr(\"pointer-events\", \"none\").call(x_axis);\n    svgSumPlot.append('g').attr(\"transform\", \"translate(\" + 1 / 10 * this.width + \",0)\").attr(\"pointer-events\", \"none\").call(y_axis);\n  }\n\n  render() {\n    let sumSignals = [];\n    let plotWidth = 0.8 * this.width; // console.log(this.height);\n    // console.log(this.width);\n    // This will break if we change plotWidth elsewhere \n\n    for (let k = 0; k < plotWidth; k++) {\n      sumSignals.push([0, 0]);\n    } // Looping through all the signals\n\n\n    for (let i = 0; i < this.props.signals.length; i++) {\n      // Looping through the signal values\n      for (let j = 0; j < this.props.signals[i].values.length; j++) {\n        //sumSignals[j] = this.props.signals[i].values[j];\n        sumSignals[j][0] = this.props.signals[i].values[j][0];\n        sumSignals[j][1] += this.props.signals[i].values[j][1];\n      }\n    } // Should scale this to the svg dimenesions rather than hardcoding it with svgContainerHeight\n\n\n    for (let n = 0; n < sumSignals.length; n++) {\n      sumSignals[n][1] = sumSignals[n][1] - (this.props.signals.length - 1) * (this.height / 2);\n    }\n\n    let lineGenerator = d3.line().curve(d3.curveNatural);\n    let pathData = lineGenerator(sumSignals); //The svg line Path we draw\n    // If exists, update\n\n    if (document.getElementById(\"path_Sum\")) {\n      d3.select(\"#\".concat(\"path_Sum\")).attr(\"d\", pathData);\n    } // Draws path if it doesn't exist\n\n\n    if (!document.getElementById(\"path_Sum\")) {\n      d3.select(\"#svgSumPlot\").append(\"path\").attr(\"id\", \"path_Sum\").attr(\"d\", pathData).attr(\"transform\", \"translate(\" + 1 / 10 * this.width + \")\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"fill\", \"none\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport class FourierCoefficients extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      signals: [\n        /* Example signal object \r\n        {\r\n            id: 0,\r\n            amplitude: 1,\r\n            frequency: 1,\r\n            values: this.generateSignal(1,1),\r\n            dragging: false,    \r\n        },\r\n        */\n      ],\n      demoSignal: 'select'\n    }; // This binding is necessary to make `this.` work in the callback   \n\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseUp = this.handleMouseUp.bind(this);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleMouseMoveFourierMag = this.handleMouseMoveFourierMag.bind(this);\n    this.handleMouseMoveFourierPhase = this.handleMouseMoveFourierPhase.bind(this);\n    this.handleDemoSignal = this.handleDemoSignal.bind(this);\n  }\n\n  addSignal(amplitude, phase) {\n    let signals = this.state.signals; // Colour intensity goes from least intense: rgb(192,192,192) (Silver) to most intense: rgb(0,0,0) (Black)\n\n    const intensity = 192 - 48 * amplitude; // Loop through the current state's signals array\n\n    for (let i = 0; i < signals.length + 1; i++) {\n      // Add new signal to end of array if we reach end of array\n      if (i === signals.length) {\n        signals = signals.concat([{\n          // Just concatenating array of JSON\n          id: signals.length,\n          amplitude: amplitude,\n          // Should be user input\n          frequency: signals.length,\n          // Should be user input\n          phase: phase,\n          values: this.generateSignal(amplitude, signals.length, phase),\n          pathID: 'path_'.concat(i.toString(10)),\n          draggingMag: false,\n          draggingPhasePos: false,\n          draggingPhaseNeg: false,\n          colour: rgb(intensity, intensity, intensity)\n        }]); // console.log(signals)\n\n        break;\n      } // If there's a missing ID, insert it to appropriate index\n      // e.g. id array: [0, 1, 3]. Therefore missing id 2\n\n\n      if (i !== signals[i].id) {\n        let newSignal = {\n          id: i,\n          amplitude: amplitude,\n          // Should be user input\n          frequency: i,\n          // Should be user input\n          phase: phase,\n          values: this.generateSignal(amplitude, i, phase),\n          pathID: 'path_'.concat(i.toString(10)),\n          draggingMag: false,\n          draggingPhasePos: false,\n          draggingPhaseNeg: false,\n          colour: rgb(intensity, intensity, intensity)\n        };\n        signals.splice(i, 0, newSignal);\n        break;\n      }\n    } // Once this.setState has been called, it'll call render() to render straight away\n\n\n    this.setState({\n      signals: signals\n    });\n  }\n\n  removeSignal(signalID) {\n    // Need to find signal id from the array and delete, then re-update id's\n    const signals = this.state.signals;\n    console.log(\"Hi from removeSignal\");\n    console.log(signalID);\n    console.log(\"Before: \", signals);\n    let index;\n\n    for (index = 0; index < signals.length; index++) {\n      if (signals[index].id === signalID) {\n        break;\n      }\n    }\n\n    console.log(index); // Find the pathID and delete from DOM\n\n    d3.select(\"#\" + signals[index].pathID).remove(); // Find the signal in the signals array and delete\n\n    signals.splice(index, 1);\n    console.log(\"After:\", signals);\n    this.setState({\n      signals: signals\n    });\n    console.log(this.state.signals);\n  }\n\n  generateSignal(amplitude, frequency, phase) {\n    // Generating path data\n    let points = []; // This assumes that sumPlot and sinePlots have the same dimensions, since generateSignal() is called from those plots\n\n    const divHeight = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\n    const plotWidth = 0.8 * document.getElementById(\"svgSumPlot\").getBoundingClientRect().width; // console.log(\"Plot Width\",plotWidth)\n    // console.log(\"Div Height\", divHeight)\n\n    let scale = -divHeight / 10;\n    let x_offset = 0;\n    let y_offset = 0; // let Fs = 80;\n\n    let Ts = Math.PI / (plotWidth / 4);\n    /* Calculation Reference\r\n    // Assuming the plot is 800x800\r\n    // 1 period = 1 second\r\n    // 1 period = 400 pixels => Ts = 400 samples per second\r\n    // 1 Hz = 2pi radians\r\n      // Sampling frequency = samples/second\r\n    // 1 sample per 1/400 second (Ts = 1/400)\r\n    // Fs = 2pi * (1/400)\r\n    // Fs = pi / 200\r\n      // Frequency is in Hz\r\n    // This is bascially an inverse FFT \r\n    // i is basically our t (1 unit of time)\r\n    */\n\n    for (let i = x_offset; i < plotWidth; i++) {\n      points[i] = [i, scale * amplitude * Math.sin(Ts * frequency * i + phase * (Math.PI / 180)) + (divHeight / 2 + y_offset)];\n    } // console.log(\"Plot Length\", points.length)\n\n\n    return points;\n  }\n\n  generateDC(amplitude) {\n    let points = [];\n    const divHeight = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\n    const plotWidth = 0.8 * document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\n    let scale = -divHeight / 10;\n    let x_offset = 0;\n    let y_offset = 0;\n\n    for (let i = x_offset; i < plotWidth; i++) {\n      points[i] = [i, scale * amplitude + (divHeight / 2 + y_offset)];\n    }\n\n    return points;\n  }\n\n  updateDials() {\n    const signals = this.state.signals;\n\n    for (let i = 0; i < signals.length; i++) {\n      document.getElementById(\"signal\" + signals[i].id + \"_AmpText\").value = signals[i].amplitude;\n      document.getElementById(\"signal\" + signals[i].id + \"_FreqText\").value = signals[i].frequency;\n    }\n  }\n\n  handleChange(event) {\n    console.log(event);\n    const signals = this.state.signals;\n    const inputType = event.target.getAttribute('input_type');\n    const signalID = event.target.getAttribute('signal_id'); // Signal ID Number\n\n    let value = parseFloat(event.target.value); // Text Form can currently exceed the maximum limit of 10, should limit?\n\n    if (inputType === \"AmpDial\" || inputType === \"AmpText\") {\n      if (isNaN(value)) {\n        value = 0;\n      } else {\n        // DC Case\n        if (signalID === 0) {\n          signals[signalID].amplitude = value;\n          signals[signalID].values = this.generateDC(signals[signalID].amplitude);\n          document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\n          const intensity = 192 - 48 * value;\n          signals[signalID].colour = rgb(intensity, intensity, intensity);\n        } // All Other cases\n        else {\n            signals[signalID].amplitude = value;\n            signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\n            document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\n            const intensity = 192 - 48 * value;\n            signals[signalID].colour = rgb(intensity, intensity, intensity);\n          }\n      }\n    } else if (inputType === \"PhaseDial\" || inputType === \"PhaseText\") {\n      console.log(\"HELLO\");\n      console.log(signals[signalID].amplitude);\n      console.log(signals[signalID].phase);\n\n      if (isNaN(value)) {\n        value = 0;\n      } else {\n        // DC Case\n        if (signalID === 0) {\n          signals[signalID].phase = value;\n          signals[signalID].values = this.generateDC(signals[signalID].amplitude);\n          document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\n        } // All Other cases\n        else {\n            signals[signalID].phase = value;\n            signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\n            document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\n          }\n      }\n    }\n\n    this.setState({\n      signals: signals\n    });\n  }\n\n  handleMouseDown(e) {\n    console.log(\"clicked\");\n    e.preventDefault();\n    e.stopPropagation();\n    const elementID = e.target.getAttribute('id');\n\n    if (elementID !== null) {\n      const condition = elementID.includes(\"circle_\");\n\n      if (condition) {\n        console.log('circle clicked');\n        const signals = this.state.signals;\n        const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\n\n        const circleID = e.target.getAttribute('id'); // Circle ID \n        // Finding signal array's index from signal id\n\n        let index;\n\n        for (index = 0; index < signals.length; index++) {\n          if (signals[index].id === signalID) {\n            break;\n          }\n        }\n\n        if (circleID.includes(\"circle_mag\")) {\n          signals[index].draggingMag = true;\n        }\n\n        if (circleID.includes(\"circle_phase_+\")) {\n          signals[index].draggingPhasePos = true;\n        }\n\n        if (circleID.includes(\"circle_phase_-\")) {\n          signals[index].draggingPhaseNeg = true;\n        }\n\n        this.setState({\n          signals: signals\n        });\n      }\n    }\n  }\n\n  handleMouseUp(e) {\n    console.log(\"click released\");\n    e.stopPropagation();\n    e.preventDefault();\n    const signals = this.state.signals;\n    const elementID = e.target.getAttribute('id');\n\n    if (elementID !== null) {\n      // set all signals dragging to false\n      for (let n = 0; n < signals.length; n++) {\n        signals[n].draggingMag = false;\n        signals[n].draggingPhasePos = false;\n        signals[n].draggingPhaseNeg = false;\n      }\n\n      this.setState({\n        signals: signals\n      });\n      console.log(\"circle click released\");\n    }\n  } // Base Mouse move function. Used in Frequency Domain. Not currently in use in this .js file\n\n\n  handleMouseMove(e) {\n    const signals = this.state.signals;\n    const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\n\n    let index;\n\n    for (index = 0; index < signals.length; index++) {\n      if (signals[index].id === signalID) {\n        break;\n      }\n    } //If we are dragging\n\n\n    if (signals[index].dragging) {\n      e.preventDefault();\n      console.log(e);\n      console.log(e.target);\n      console.log(\"clientX:\", e.clientX);\n      console.log(\"clientY:\", e.clientY); // console.log(e.target.parentNode.parentNode)\n\n      let rect = e.target.parentNode.parentNode.getBoundingClientRect();\n      console.log(rect.left);\n      console.log(rect.top); // Maybe should seperate coordinates and freq/amp values\n\n      signals[index].frequency = (e.clientX - rect.left - 400) / 100;\n      signals[index].amplitude = -(e.clientY - rect.top - 400) / 100;\n      signals[index].values = this.generateSignal(signals[index].amplitude, signals[index].frequency, signals[index].phase); // We should set position limits\n\n      console.log(signals[index].frequency);\n      console.log(signals[index].amplitude);\n      console.log(this);\n      this.setState({\n        signals: signals\n      });\n    }\n  }\n\n  handleMouseMoveFourierMag(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    const elementID = e.target.getAttribute('id');\n\n    if (elementID !== null) {\n      const signals = this.state.signals; // Grabbing signal id number doesn't work if event is outside of the div element \n      // const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\n      // Find the signal that is dragging \n\n      let index;\n      let dragging = false;\n\n      for (let n = 0; n < signals.length; n++) {\n        if (signals[n].draggingMag === true) {\n          dragging = true;\n          index = n;\n        }\n      }\n\n      console.log(index); //If we are dragging\n\n      if (dragging) {\n        // e.preventDefault();\n        console.log(\"im dragging\");\n        console.log(signals[index].draggingMag); // console.log(e.target)\n\n        let rect = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect();\n        let divHeight = rect.height;\n        let divWidth = rect.width;\n        let plotHeight = 0.8 * divHeight;\n        let plotWidth = 0.8 * divWidth; // Divide by 8: max axis size (-4 to 4)\n\n        let amplitude = -(e.clientY - rect.top - divHeight / 2) / (plotHeight / 8);\n\n        if (amplitude > 4) {\n          amplitude = 4;\n        }\n\n        if (amplitude < 0) {\n          amplitude = 0;\n        } // Maybe should seperate coordinates and freq/amp values\n\n\n        signals[index].frequency = signals[index].id;\n        signals[index].amplitude = amplitude;\n        signals[index].values = this.generateSignal(signals[index].amplitude, signals[index].frequency, signals[index].phase);\n        const intensity = 192 - 48 * amplitude;\n        signals[index].colour = rgb(intensity, intensity, intensity); // Checking if signal is the DC value\n\n        if (index === 0) {\n          signals[index].values = this.generateDC(signals[index].amplitude);\n        }\n\n        this.setState({\n          signals: signals\n        });\n      } //}\n\n    }\n  }\n\n  handleMouseMoveFourierPhase(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    const signals = this.state.signals;\n    const elementID = e.target.getAttribute('id'); // Sanity check\n\n    if (elementID !== null) {\n      // Find the signal that is dragging \n      // Grabbing signal id number doesn't work if event is outside of the div element \n      // const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\n      let index;\n      let draggingPhasePos = false;\n      let draggingPhaseNeg = false;\n\n      for (let n = 0; n < signals.length; n++) {\n        if (signals[n].draggingPhasePos === true) {\n          draggingPhasePos = true;\n          index = n;\n        }\n\n        if (signals[n].draggingPhaseNeg === true) {\n          draggingPhaseNeg = true;\n          index = n;\n        }\n      } //If we are dragging\n\n\n      if (draggingPhasePos || draggingPhaseNeg) {\n        let rect = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect();\n        let divHeight = rect.height;\n        let divWidth = rect.width;\n        let plotHeight = 0.8 * divHeight;\n        let plotWidth = 0.8 * divWidth; // Maybe should seperate coordinates and freq/amp values\n\n        let circleID;\n        console.log(index);\n\n        if (draggingPhasePos) {\n          circleID = \"circle_phase_+\".concat(index.toString(10));\n        }\n\n        if (draggingPhaseNeg) {\n          circleID = \"circle_phase_-\".concat(index.toString(10));\n        }\n\n        console.log(circleID);\n        const circleCX = parseInt(document.getElementById(circleID).getAttribute(\"cx\"));\n        console.log(circleCX); // Positive Circle\n\n        if (circleCX >= 0) {\n          let phase = parseInt(-(e.clientY - rect.top - divHeight / 2) / (plotHeight / 360));\n\n          if (phase > 180) {\n            phase = 180;\n          }\n\n          if (phase < -180) {\n            phase = -180;\n          }\n\n          signals[index].phase = phase;\n        } // Negative Circle\n        else if (circleCX < 0) {\n            let phase = parseInt((e.clientY - rect.top - divHeight / 2) / (plotHeight / 360));\n\n            if (phase > 180) {\n              phase = 180;\n            }\n\n            if (phase < -180) {\n              phase = -180;\n            }\n\n            signals[index].phase = phase;\n          }\n\n        console.log(signals[index].phase);\n        signals[index].frequency = signals[index].id;\n        signals[index].values = this.generateSignal(signals[index].amplitude, signals[index].frequency, signals[index].phase); // Checking if signal is the DC value\n\n        if (index === 0) {\n          signals[index].values = this.generateDC(signals[index].amplitude);\n        }\n\n        this.setState({\n          signals: signals\n        });\n      }\n    }\n  }\n\n  emptyPlots() {\n    let signals = this.state.signals;\n\n    for (let i = 0; i < signals.length; i++) {\n      d3.select(\"#\" + signals[i].pathID).remove();\n    }\n\n    return signals = [];\n  }\n\n  handleDemoSignal(e) {\n    let signals = this.state.signals;\n    const demoSignal = e.target.value;\n\n    if (demoSignal === 'empty') {\n      signals = this.emptyPlots();\n    } // Note: If you make multiple setState() calls, only the last call will run (the prior ones won't run)\n    // Hence why here, we instead of repeatedly calling addSignal(), we explicitly generate the signals array\n    // setState() is asynchronous and are batched for performance gains. \n\n\n    if (demoSignal === 'sine') {\n      signals = this.emptyPlots(); // Generating DC signal\n\n      let amplitude = 0;\n      signals = signals.concat([{\n        id: signals.length,\n        amplitude: amplitude,\n        frequency: signals.length,\n        phase: 0,\n        values: this.generateDC(amplitude, signals.length, 0),\n        pathID: 'path_0',\n        draggingMag: false,\n        draggingPhasePos: false,\n        draggingPhaseNeg: false,\n        colour: rgb(192 - 48 * amplitude, 192 - 48 * amplitude, 192 - 48 * amplitude)\n      }]); // Generating other sine waves\n\n      amplitude = 1;\n      signals = signals.concat([{\n        id: signals.length,\n        amplitude: amplitude,\n        frequency: signals.length,\n        phase: 0,\n        values: this.generateSignal(amplitude, signals.length, 0),\n        pathID: 'path_1',\n        draggingMag: false,\n        draggingPhasePos: false,\n        draggingPhaseNeg: false,\n        colour: rgb(192 - 48 * amplitude, 192 - 48 * amplitude, 192 - 48 * amplitude)\n      }]);\n    }\n\n    if (demoSignal === 'even') {\n      signals = this.emptyPlots(); // Generating DC signal\n\n      let amplitude = 0;\n      signals = signals.concat([{\n        id: signals.length,\n        amplitude: amplitude,\n        frequency: signals.length,\n        phase: 0,\n        values: this.generateDC(amplitude, signals.length, 0),\n        pathID: 'path_0',\n        draggingMag: false,\n        draggingPhasePos: false,\n        draggingPhaseNeg: false,\n        colour: rgb(192 - 48 * amplitude, 192 - 48 * amplitude, 192 - 48 * amplitude)\n      }]); // Generating other sine waves\n\n      for (let i = 0; i < 4; i++) {\n        // Odd\n        if (i % 2 !== 0) {\n          amplitude = 1;\n          signals = signals.concat([{\n            id: signals.length,\n            amplitude: amplitude,\n            frequency: signals.length,\n            phase: 0,\n            values: this.generateSignal(amplitude, signals.length, 0),\n            pathID: 'path_'.concat(i.toString(10)),\n            draggingMag: false,\n            draggingPhasePos: false,\n            draggingPhaseNeg: false,\n            colour: rgb(192 - 48 * amplitude, 192 - 48 * amplitude, 192 - 48 * amplitude)\n          }]);\n        } // Even\n\n\n        if (i % 2 === 0) {\n          amplitude = 0;\n          signals = signals.concat([{\n            id: signals.length,\n            amplitude: amplitude,\n            frequency: signals.length,\n            phase: 0,\n            values: this.generateSignal(amplitude, signals.length, 0),\n            pathID: 'path_'.concat(i.toString(10)),\n            draggingMag: false,\n            draggingPhasePos: false,\n            draggingPhaseNeg: false,\n            colour: rgb(192 - 48 * amplitude, 192 - 48 * amplitude, 192 - 48 * amplitude)\n          }]);\n        }\n      }\n    }\n\n    if (demoSignal === 'odd') {\n      signals = this.emptyPlots(); // Generating DC signal\n\n      let amplitude = 0;\n      signals = signals.concat([{\n        id: signals.length,\n        amplitude: amplitude,\n        frequency: signals.length,\n        phase: 0,\n        values: this.generateDC(amplitude, signals.length, 0),\n        pathID: 'path_0',\n        draggingMag: false,\n        draggingPhasePos: false,\n        draggingPhaseNeg: false,\n        colour: rgb(192 - 48 * amplitude, 192 - 48 * amplitude, 192 - 48 * amplitude)\n      }]); // Generating other sine waves\n\n      for (let i = 0; i < 4; i++) {\n        // Odd\n        if (i % 2 !== 0) {\n          amplitude = 0;\n          signals = signals.concat([{\n            id: signals.length,\n            amplitude: amplitude,\n            frequency: signals.length,\n            phase: 0,\n            values: this.generateSignal(amplitude, signals.length, 0),\n            pathID: 'path_'.concat(i.toString(10)),\n            draggingMag: false,\n            draggingPhasePos: false,\n            draggingPhaseNeg: false,\n            colour: rgb(192 - 48 * amplitude, 192 - 48 * amplitude, 192 - 48 * amplitude)\n          }]);\n        } // Even\n\n\n        if (i % 2 === 0) {\n          signals = signals.concat([{\n            id: signals.length,\n            amplitude: 1,\n            frequency: signals.length,\n            phase: 0,\n            values: this.generateSignal(1, signals.length, 0),\n            pathID: 'path_'.concat(i.toString(10)),\n            draggingMag: false,\n            draggingPhasePos: false,\n            draggingPhaseNeg: false,\n            colour: hsl(signals.length * 60, 100, 50)\n          }]);\n        }\n      }\n    }\n\n    if (demoSignal === 'triangle') {\n      signals = this.emptyPlots();\n      let amplitude = 0; // Generating DC signal\n\n      signals = signals.concat([{\n        id: signals.length,\n        amplitude: amplitude,\n        frequency: signals.length,\n        phase: 0,\n        values: this.generateDC(amplitude, signals.length, 0),\n        pathID: 'path_0',\n        draggingMag: false,\n        draggingPhasePos: false,\n        draggingPhaseNeg: false,\n        colour: rgb(192 - 48 * amplitude, 192 - 48 * amplitude, 192 - 48 * amplitude)\n      }]); // Generating other sine waves\n\n      let alternate = true;\n\n      for (let i = 1; i < 20; i++) {\n        // Odd\n        if (i % 2 !== 0) {\n          amplitude = 8 / Math.pow(Math.PI, 2) * (1 / Math.pow(i, 2)); // Non-phase shifted harmonic\n\n          if (alternate) {\n            signals = signals.concat([{\n              id: signals.length,\n              amplitude: amplitude,\n              frequency: signals.length,\n              phase: 0,\n              values: this.generateSignal(amplitude, signals.length, 0),\n              pathID: 'path_'.concat(i.toString(10)),\n              draggingMag: false,\n              draggingPhasePos: false,\n              draggingPhaseNeg: false,\n              colour: rgb(192 - 48 * amplitude, 192 - 48 * amplitude, 192 - 48 * amplitude)\n            }]);\n            alternate = !alternate;\n          } // Phase shifted harmonic\n          else if (!alternate) {\n              signals = signals.concat([{\n                id: signals.length,\n                amplitude: amplitude,\n                frequency: signals.length,\n                phase: 180,\n                values: this.generateSignal(amplitude, signals.length, 180),\n                pathID: 'path_'.concat(i.toString(10)),\n                draggingMag: false,\n                draggingPhasePos: false,\n                draggingPhaseNeg: false,\n                colour: rgb(192 - 48 * amplitude, 192 - 48 * amplitude, 192 - 48 * amplitude)\n              }]);\n              alternate = !alternate;\n            }\n        } // Even\n\n\n        if (i % 2 === 0) {\n          amplitude = 0;\n          signals = signals.concat([{\n            id: signals.length,\n            amplitude: 0,\n            frequency: signals.length,\n            phase: 0,\n            values: this.generateSignal(0, signals.length, 0),\n            pathID: 'path_'.concat(i.toString(10)),\n            draggingMag: false,\n            draggingPhasePos: false,\n            draggingPhaseNeg: false,\n            colour: rgb(192 - 48 * amplitude, 192 - 48 * amplitude, 192 - 48 * amplitude)\n          }]);\n        }\n      }\n    }\n\n    if (demoSignal === 'square') {\n      signals = this.emptyPlots(); // Generating DC signal\n\n      signals = signals.concat([{\n        id: signals.length,\n        amplitude: 0,\n        frequency: signals.length,\n        phase: 0,\n        values: this.generateDC(0, signals.length, 0),\n        pathID: 'path_0',\n        draggingMag: false,\n        draggingPhasePos: false,\n        draggingPhaseNeg: false,\n        colour: hsl(signals.length * 60, 100, 50)\n      }]); // Generating other sine waves\n\n      for (let i = 1; i < 25; i++) {\n        // Odd\n        if (i % 2 !== 0) {\n          let amp = 4 / Math.PI * (1 / i);\n          signals = signals.concat([{\n            id: signals.length,\n            amplitude: amp,\n            frequency: signals.length,\n            phase: 0,\n            values: this.generateSignal(amp, signals.length, 0),\n            pathID: 'path_'.concat(i.toString(10)),\n            draggingMag: false,\n            draggingPhasePos: false,\n            draggingPhaseNeg: false,\n            colour: hsl(signals.length * 60, 100, 50)\n          }]);\n        } // Even\n\n\n        if (i % 2 === 0) {\n          signals = signals.concat([{\n            id: signals.length,\n            amplitude: 0,\n            frequency: signals.length,\n            phase: 0,\n            values: this.generateSignal(0, signals.length, 0),\n            pathID: 'path_'.concat(i.toString(10)),\n            draggingMag: false,\n            draggingPhasePos: false,\n            draggingPhaseNeg: false,\n            colour: hsl(signals.length * 60, 100, 50)\n          }]);\n        }\n      }\n    }\n\n    if (demoSignal === 'sawtooth') {\n      signals = this.emptyPlots(); // Generating DC signal\n\n      signals = signals.concat([{\n        id: signals.length,\n        amplitude: 0,\n        frequency: signals.length,\n        phase: 0,\n        values: this.generateDC(0, signals.length, 0),\n        pathID: 'path_0',\n        draggingMag: false,\n        draggingPhasePos: false,\n        draggingPhaseNeg: false,\n        colour: hsl(signals.length * 60, 100, 50)\n      }]); // Generating other sine waves\n\n      for (let i = 1; i < 25; i++) {\n        let amp = 4 / Math.PI * (1 / i); // Odd\n\n        if (i % 2 !== 0) {\n          signals = signals.concat([{\n            id: signals.length,\n            amplitude: amp,\n            frequency: signals.length,\n            phase: 180,\n            values: this.generateSignal(amp, signals.length, 180),\n            pathID: 'path_'.concat(i.toString(10)),\n            draggingMag: false,\n            draggingPhasePos: false,\n            draggingPhaseNeg: false,\n            colour: hsl(signals.length * 60, 100, 50)\n          }]);\n        } // Even\n\n\n        if (i % 2 === 0) {\n          signals = signals.concat([{\n            id: signals.length,\n            amplitude: amp,\n            frequency: signals.length,\n            phase: 0,\n            values: this.generateSignal(amp, signals.length, 0),\n            pathID: 'path_'.concat(i.toString(10)),\n            draggingMag: false,\n            draggingPhasePos: false,\n            draggingPhaseNeg: false,\n            colour: hsl(signals.length * 60, 100, 50)\n          }]);\n        }\n      }\n    }\n\n    this.setState({\n      signals: signals,\n      demoSignal: demoSignal\n    });\n  }\n\n  render() {\n    const current = this.state.signals;\n    return React.createElement(\"div\", {\n      className: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1639\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.timePlots,\n      id: \"timePlotsID\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1641\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.sinePlots,\n      id: \"sinePlotsID\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1642\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      id: \"svgSinePlot\",\n      width: \"40vw\",\n      height: \"45vh\",\n      style: {\n        position: \"relative\",\n        top: \"0%\",\n        left: \"0%\",\n        transform: \"translate(0%, 0%)\",\n        border: '1px solid black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1643\n      },\n      __self: this\n    }, React.createElement(SinePlot, {\n      signals: current,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1651\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: styles.sumPlots,\n      id: \"sumPlotsID\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1656\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      id: \"svgSumPlot\",\n      width: \"40vw\",\n      height: \"45vh\",\n      style: {\n        position: \"relative\",\n        top: \"0%\",\n        left: \"0%\",\n        transform: \"translate(0%, 0%)\",\n        border: '1px solid black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1657\n      },\n      __self: this\n    }, React.createElement(SumPlot, {\n      signals: current,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1665\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: styles.otherPlots,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1672\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.fourierMagPlots,\n      id: \"fourierMagPlotsID\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1674\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      id: \"svgFourierMagPlot\",\n      width: \"40vw\",\n      height: \"45vh\",\n      onMouseDown: event => this.handleMouseDown(event),\n      onMouseUp: event => this.handleMouseUp(event),\n      onMouseMove: event => this.handleMouseMoveFourierMag(event),\n      style: {\n        position: \"relative\",\n        top: \"0%\",\n        left: \"0%\",\n        transform: \"translate(0%, 0%)\",\n        border: '1px solid black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1675\n      },\n      __self: this\n    }, React.createElement(FourierMagPlot, {\n      signals: current,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1691\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: styles.fourierPhasePlots,\n      id: \"fourierPhasePlotsID\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1697\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      id: \"svgFourierPhasePlot\",\n      width: \"40vw\",\n      height: \"45vh\",\n      onMouseDown: event => this.handleMouseDown(event),\n      onMouseUp: event => this.handleMouseUp(event),\n      onMouseMove: event => this.handleMouseMoveFourierPhase(event),\n      style: {\n        position: \"relative\",\n        top: \"0%\",\n        left: \"0%\",\n        transform: \"translate(0%, 0%)\",\n        border: '1px solid black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1698\n      },\n      __self: this\n    }, React.createElement(FourierPhasePlot, {\n      signals: current,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1711\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: styles.controls,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1718\n      },\n      __self: this\n    }, React.createElement(Controls, {\n      signals: current,\n      demoSignal: this.state.demoSignal,\n      onChange: event => this.handleChange(event),\n      onAdd: (amplitude, phase) => this.addSignal(amplitude, phase),\n      onRemove: signalID => this.removeSignal(signalID),\n      onDemoSignal: event => this.handleDemoSignal(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1720\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/bunny/Documents/GitHub/signals-web-app/src/FourierCoefficients.js"],"names":["React","Component","ReactDOM","styles","d3","hsl","rgb","Dials","props","signal_container","signal_info","tooltip","tooltiptext","signal","id","signalID","onRemove","colour","signal_props","amplitude","toFixed","onChange","phase","Controls","renderDial","event","i","render","signalList","signals","length","push","dials","global_controls","onAdd","gridRow","demoSignal","onDemoSignal","FourierCirclesMagPos","divHeight","document","getElementById","getBoundingClientRect","height","divWidth","width","plotHeight","plotWidth","FourierCirclesMagNeg","FourierCirclesPhasePos","FourierCirclesPhaseNeg","FourierMagPlot","constructor","componentDidMount","FourierMagSvg","select","xscale_freq","scaleLinear","domain","range","yscale_freq","xAxisTicks","ticks","filter","tick","Number","isInteger","yAxisTicks","x_axis_freq","axisBottom","tickValues","tickFormat","format","y_axis_freq","axisLeft","append","attr","style","text","call","renderCirclePos","renderCircleNeg","circleList","FourierPhasePlot","FourierPhaseSvg","SinePlot","svgSinePlot","xscale","yscale","x_axis","scale","y_axis","lineGenerator","line","curve","curveNatural","pathData","values","pathID","SumPlot","svgSumPlot","sumSignals","k","j","n","concat","FourierCoefficients","state","handleMouseDown","bind","handleMouseUp","handleMouseMove","handleMouseMoveFourierMag","handleMouseMoveFourierPhase","handleDemoSignal","addSignal","intensity","frequency","generateSignal","toString","draggingMag","draggingPhasePos","draggingPhaseNeg","newSignal","splice","setState","removeSignal","console","log","index","remove","points","x_offset","y_offset","Ts","Math","PI","sin","generateDC","updateDials","value","handleChange","inputType","target","getAttribute","parseFloat","isNaN","e","preventDefault","stopPropagation","elementID","condition","includes","parseInt","circleID","dragging","clientX","clientY","rect","parentNode","left","top","circleCX","emptyPlots","alternate","pow","amp","current","container","timePlots","sinePlots","position","transform","border","sumPlots","otherPlots","fourierMagPlots","fourierPhasePlots","controls"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styles from './FourierCoefficients.module.css'; \r\nimport * as d3 from \"d3\";\r\nimport { hsl } from 'd3';\r\nimport { rgb } from 'd3';\r\n\r\nfunction Dials(props) {\r\n    return(\r\n        <div className={styles.signal_container}>\r\n            <div className={styles.signal_info}>\r\n\r\n                <div className={styles.tooltip}>\r\n                    | Help |\r\n                        <span className={styles.tooltiptext}>\r\n                            <p>This is the control panel to adjust signal properties.</p>\r\n                            <p>Try adjusting the Amplitude and Phase!</p>\r\n                        </span>\r\n                    \r\n                </div>\r\n                \r\n                <div>ID: {props.signal.id}</div>\r\n                <button id = \"remove-signal\" onClick={(signalID) => props.onRemove(props.signal.id)}> Remove Signal </button>\r\n                <div> Colour </div>\r\n                <svg height = \"40\" width = \"20\">\r\n                    <circle\r\n                        r = {10}\r\n                        cx = {10}\r\n                        cy = {20}\r\n                        fill = {props.signal.colour}\r\n                        stroke = \"black\"\r\n                        strokeWidth=\"1\"\r\n                    />\r\n                </svg>\r\n            </div>\r\n            <div className={styles.signal_props}>\r\n                <div>Amplitude: {props.signal.amplitude.toFixed(2)}</div>\r\n            </div>\r\n            <div className = {styles.signal_props}>\r\n                <div>\r\n                    <input \r\n                    id = {\"signal\" + props.signal.id + \"_AmpDial\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpDial\"}\r\n                    type =\"range\" \r\n                    min={0} \r\n                    max ={4} \r\n                    value = {props.signal.amplitude} \r\n                    step={0.1}\r\n                    onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                    id = {\"signal\" + props.signal.id + \"_AmpText\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpText\"}\r\n                    type = \"number\"  \r\n                    min = {0}\r\n                    max = {4}\r\n                    onChange={props.onChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div className={styles.signal_props}>\r\n                <div>Phase: {props.signal.phase}</div>\r\n            </div>\r\n            <div className={styles.signal_props}>\r\n                <div>\r\n                    <input \r\n                        id = {\"signal\" + props.signal.id + \"_PhaseDial\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseDial\"}\r\n                        type =\"range\" \r\n                        min={-180} \r\n                        max ={180} \r\n                        value = {props.signal.phase} \r\n                        step={1}\r\n                        onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                        id = {\"signal\" + props.signal.id + \"_PhaseText\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseText\"}\r\n                        type = \"number\"  \r\n                        min = {-180}\r\n                        max = {180}\r\n                        onChange={props.onChange}\r\n                    />\r\n                </div>        \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Controls extends React.Component {\r\n\r\n    renderDial(signal){\r\n        return(\r\n            <Dials\r\n                signal = {signal}\r\n                onChange = {(event) => this.props.onChange(event)}\r\n                onRemove = {(i) => this.props.onRemove(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n        const signalList = []; \r\n        for (let i=0; i < this.props.signals.length; i++){\r\n            signalList.push(\r\n                <div key={\"signal\" + this.props.signals[i].id}> \r\n                    {this.renderDial(this.props.signals[i])} \r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            <div className = {styles.dials} >\r\n                <div className = {styles.global_controls}>\r\n\r\n                    <div className={styles.tooltip}>\r\n                        | Help |\r\n                            <span className={styles.tooltiptext}>\r\n                                <p>Try adding a signal!</p>\r\n                            </span>\r\n                    </div>\r\n                    <button id = \"add-signal\" align-content = \"center\" onClick={() => this.props.onAdd(0, 0)}> Add New Signal </button>\r\n                    <div style={{gridRow: \"2\"}}> Try a demo signal </div>\r\n                    <select name=\"demoSignal\" id=\"demoSignal\" \r\n                        value = {this.props.demoSignal}\r\n                        onChange = {(event) => this.props.onDemoSignal(event)}\r\n                        style={{gridRow: \"2\"}}>\r\n                        <option value =\"select\">- Select -</option>\r\n                        <option value =\"empty\">Empty</option>\r\n                        <option value=\"sine\">Sine Wave</option>\r\n                        <option value=\"even\">Even Wave</option>\r\n                        <option value=\"odd\">Odd Wave</option>\r\n                        <option value=\"triangle\">Triangle Wave</option>\r\n                        <option value=\"square\">Square Wave Approx</option>\r\n                        <option value=\"sawtooth\">Sawtooth Wave Approx</option>\r\n                    </select>\r\n                </div>\r\n                {signalList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction FourierCirclesMagPos(props) {\r\n    let divHeight = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_mag_\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*(plotWidth/8)}\r\n            cy = {(props.signal.amplitude)*(plotHeight/8)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesMagNeg(props) {\r\n    let divHeight = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_mag_-\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*-(plotWidth/8)} // 8 is because our x-axis is divided into 8 sections \r\n            cy = {(props.signal.amplitude)*(plotHeight/8)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesPhasePos(props) {\r\n    let divHeight = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_phase_+\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*(plotWidth/8)} // 8 is because our x-axis is divided into 8 sections \r\n            cy = {(props.signal.phase)*(plotHeight/360)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesPhaseNeg(props) {\r\n    let divHeight = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_phase_-\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*-(plotWidth/8)} // 8 is because our x-axis is divided into 8 sections \r\n            cy = {-(props.signal.phase)*(plotHeight/360)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth=\"1\"\r\n        />\r\n    );\r\n}\r\n\r\nclass FourierMagPlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n\r\n        let FourierMagSvg = d3.select(\"#svgFourierMagPlot\")\r\n\r\n        // Should probably check both axis if they exist before appending\r\n        if(!document.getElementById(\"x_axis_fourierMagPlot\")){\r\n   \r\n            // Create Axis for Frequency Plot\r\n            let xscale_freq = d3.scaleLinear()\r\n                    .domain([-4, 4]) // This needs to be dynamic\r\n                    .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n            let yscale_freq = d3.scaleLinear()\r\n                    .domain([4,0]) // This needs to be dynamic\r\n                    .range([ (1/10)*this.height, (5/10)*this.height ]);\r\n\r\n            // Add scales to axis\r\n            const xAxisTicks = xscale_freq.ticks()\r\n                                     .filter(tick => Number.isInteger(tick));\r\n\r\n            const yAxisTicks = yscale_freq.ticks()\r\n                                     .filter(tick => Number.isInteger(tick))                         \r\n \r\n            let x_axis_freq = d3.axisBottom(xscale_freq)\r\n             .tickValues(xAxisTicks)\r\n             .tickFormat(d3.format(\"d\"));\r\n\r\n            let y_axis_freq = d3.axisLeft(yscale_freq)\r\n             .tickValues(yAxisTicks)\r\n             .tickFormat(d3.format(\"d\"));\r\n\r\n            FourierMagSvg.append(\"text\")\r\n                         .attr(\"text-anchor\", \"middle\")  \r\n                         .attr(\"x\",this.width/2)\r\n                         .attr(\"y\",this.height/20)\r\n                         .style(\"font-size\", \"16px\") \r\n                         .style(\"text-decoration\", \"underline\")  \r\n                         .text(\"Fourier Magnitude Plot\");\r\n\r\n            FourierMagSvg.append('g')\r\n                         .attr(\"id\",\"x_axis_fourierMagPlot\")\r\n                         .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n                         .attr(\"pointer-events\", \"none\")\r\n                         .call(x_axis_freq)\r\n\r\n            FourierMagSvg.append('g')\r\n                         .attr(\"id\",\"y_axis_fourierMagPlot\")\r\n                         .attr(\"transform\",\"translate(\" + this.width/2 + \",0)\")\r\n                         .attr(\"pointer-events\", \"none\")\r\n                         .call(y_axis_freq); \r\n        }\r\n    }\r\n\r\n    renderCirclePos(signal){\r\n        return(\r\n            <FourierCirclesMagPos\r\n                signal = {signal}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderCircleNeg(signal){\r\n        return(\r\n            <FourierCirclesMagNeg\r\n                signal = {signal}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n        const signals = this.props.signals;\r\n   \r\n           const circleList = [];\r\n          \r\n           for (let i=0; i < signals.length; i++){\r\n                if(signals[i].id === 0){\r\n                    circleList.push(\r\n                        this.renderCirclePos(signals[i]) \r\n                    )\r\n                }\r\n                else{\r\n                    circleList.push(\r\n                        this.renderCirclePos(signals[i]),\r\n                        this.renderCircleNeg(signals[i])\r\n                    )\r\n                }\r\n           }                    \r\n   \r\n           return( \r\n               <svg>\r\n                  {circleList}\r\n               </svg>\r\n           );\r\n       }\r\n}\r\n\r\nclass FourierPhasePlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n\r\n        let FourierPhaseSvg = d3.select(\"#svgFourierPhasePlot\")\r\n\r\n        // Should probably check both axis if they exist before appending\r\n        if(!document.getElementById(\"x_axis_fourierPhasePlot\")){\r\n   \r\n            // Create Axis for Frequency Plot\r\n            let xscale_freq = d3.scaleLinear()\r\n                    .domain([-4, 4]) // This needs to be dynamic\r\n                    .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n            let yscale_freq = d3.scaleLinear()\r\n                    .domain([180,-180]) // This needs to be dynamic\r\n                    .range([ (1/10)*this.height, (9/10)*this.height ]);\r\n\r\n            // Add scales to axis\r\n            const xAxisTicks = xscale_freq.ticks()\r\n                                     .filter(tick => Number.isInteger(tick));\r\n \r\n            let x_axis_freq = d3.axisBottom(xscale_freq)\r\n             .tickValues(xAxisTicks)\r\n             .tickFormat(d3.format(\"d\"));\r\n\r\n            let y_axis_freq = d3.axisLeft(yscale_freq);\r\n            \r\n            FourierPhaseSvg.append(\"text\")\r\n                         .attr(\"text-anchor\", \"middle\")  \r\n                         .attr(\"x\",this.width/2)\r\n                         .attr(\"y\",this.height/20)\r\n                         .style(\"font-size\", \"16px\") \r\n                         .style(\"text-decoration\", \"underline\")  \r\n                         .text(\"Fourier Phase Plot\"); \r\n\r\n            FourierPhaseSvg.append('g')\r\n                         .attr(\"id\",\"x_axis_fourierPhasePlot\")\r\n                         .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n                         .attr(\"pointer-events\", \"none\")\r\n                         .call(x_axis_freq)\r\n\r\n            FourierPhaseSvg.append('g')\r\n                         .attr(\"id\",\"y_axis_fourierPhasePlot\")\r\n                         .attr(\"transform\",\"translate(\" + this.width/2 + \",0)\")\r\n                         .attr(\"pointer-events\", \"none\")\r\n                         .call(y_axis_freq); \r\n        }\r\n    }\r\n\r\n    renderCirclePos(signal){\r\n        return(\r\n            <FourierCirclesPhasePos\r\n                signal = {signal}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderCircleNeg(signal){\r\n        return(\r\n            <FourierCirclesPhaseNeg\r\n                signal = {signal}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n        const signals = this.props.signals;\r\n    \r\n           const circleList = []; \r\n           \r\n           for (let i=0; i < this.props.signals.length; i++){\r\n\r\n                if(i ===0){\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i]) \r\n                    )\r\n                }\r\n                else{\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i]),\r\n                        this.renderCircleNeg(this.props.signals[i])\r\n                    )\r\n                }\r\n               \r\n           }\r\n   \r\n           return( \r\n               <svg>\r\n                  {circleList}\r\n               </svg>\r\n           );\r\n       }\r\n}\r\n\r\n\r\nclass SinePlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"sinePlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"sinePlotsID\").getBoundingClientRect().width;\r\n\r\n        const svgSinePlot = d3.select(\"#svgSinePlot\")\r\n\r\n         // Create scale\r\n        let xscale = d3.scaleLinear()\r\n                        .domain([0, 2]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n                        .domain([4,-4]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.height, (9/10)*this.height ]);\r\n\r\n        // Add scales to axis\r\n        let x_axis = d3.axisBottom()\r\n                        .scale(xscale);\r\n\r\n        let y_axis = d3.axisLeft()\r\n                        .scale(yscale);\r\n\r\n        svgSinePlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",this.width/2)\r\n                .attr(\"y\",this.height/20)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sine Plots\");\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\", \"translate(0,\" + this.height/2 + \")\")\r\n                .attr(\"pointer-events\", \"none\")\r\n                .call(x_axis);\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .attr(\"pointer-events\", \"none\")\r\n                .call(y_axis)\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n        const signals = this.props.signals;\r\n    \r\n        // \"Overlay all sine plots into one graph\" version\r\n        for(let i = 0; i < signals.length; i++){\r\n\r\n            let lineGenerator = d3.line().curve(d3.curveNatural);\r\n  \r\n            let pathData = lineGenerator(signals[i].values);\r\n    \r\n            //The svg line Path we draw\r\n    \r\n            // If exists, update\r\n            if(document.getElementById(signals[i].pathID)){\r\n                d3.select(\"#\"+signals[i].pathID)\r\n                    .attr(\"d\", pathData)\r\n                    .attr(\"stroke\", signals[i].colour)                      \r\n            }\r\n            \r\n            // Draws path if it doesn't exist\r\n            if(!document.getElementById(signals[i].pathID)){\r\n                d3.select(\"#svgSinePlot\").append(\"path\")\r\n                    .attr(\"id\",signals[i].pathID)\r\n                    .attr(\"d\", pathData)\r\n                    .attr(\"transform\",\"translate(\" + (1/10)*this.width + \")\")\r\n                    .attr(\"stroke\", signals[i].colour)\r\n                    .attr(\"stroke-width\", 2)\r\n                    .attr(\"fill\", \"none\")\r\n          }\r\n        }\r\n\r\n\r\n        // Appending svg\r\n        // Check if the element 'svg_id' exists. If not, create new svg, append and draw it\r\n        // Not sure if this scales well\r\n\r\n        /* Code for seperate Plots\r\n        for(let i = 0; i < current.length; i++){\r\n\r\n            let svgID  = 'svg_'\r\n            let pathID = 'path_'\r\n            svgID = svgID.concat(i.toString(10))\r\n            pathID = pathID.concat(i.toString(10))\r\n\r\n            let lineGenerator = d3.line()\r\n                                  .curve(d3.curveNatural);\r\n\r\n            let pathData = lineGenerator(current[i].values);\r\n\r\n             // Create scale\r\n            let xscale = d3.scaleLinear()\r\n                        .domain([0, 2]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n            let yscale = d3.scaleLinear()\r\n                        .domain([4,-4]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.height, (9/10)*this.height ]);\r\n\r\n            // Add scales to axis\r\n            let x_axis = d3.axisBottom()\r\n                .scale(xscale);\r\n\r\n            let y_axis = d3.axisLeft()\r\n                .scale(yscale);\r\n\r\n            // For now, if svgID exists, then just redraw\r\n            if(document.getElementById(svgID)){\r\n                d3.select(\"#\"+pathID).attr(\"d\", pathData)  \r\n            }\r\n            \r\n            // If svgID doesn't exist, then add it to the DOM\r\n\r\n            if(!document.getElementById(svgID)){\r\n                //The SVG Container\r\n                const svgSinePlot = d3.select(\"#sinePlotsID\").append(\"svg\")\r\n                .attr(\"id\",svgID)\r\n                .attr(\"width\", \"40vw\")\r\n                .attr(\"height\", \"45vh\")\r\n                .attr(\"style\",\"position: absolute\")\r\n                .attr(\"style\", \"border: 1px solid black\")\r\n\r\n                svgSinePlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",this.width/2)\r\n                .attr(\"y\",this.height/20)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sine Plot \" + i);\r\n\r\n                //The line SVG Path we draw\r\n                svgSinePlot.append(\"path\")\r\n                .attr(\"id\",pathID)\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"stroke\", current[i].colour)\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n                .call(x_axis);\r\n                \r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .call(y_axis);\r\n            }          \r\n        }\r\n        */\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass SumPlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n\r\n        // Create scale\r\n        let xscale = d3.scaleLinear()\r\n        .domain([0, 2]) // This needs to be dynamic\r\n        .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n        .domain([4,-4]) // This needs to be dynamic\r\n        .range([(1/10)*this.height, (9/10)*this.height ]);\r\n\r\n        // Add scales to axis\r\n        let x_axis = d3.axisBottom()\r\n        .scale(xscale);\r\n\r\n        let y_axis = d3.axisLeft()\r\n        .scale(yscale);\r\n\r\n        const svgSumPlot = d3.select(\"#svgSumPlot\")\r\n\r\n                svgSumPlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",this.width/2)\r\n                .attr(\"y\",this.height/20)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sum of Signals Plot\");\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\", \"translate(0,\" + this.height/2 + \")\")\r\n                .attr(\"pointer-events\", \"none\")\r\n                .call(x_axis);\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .attr(\"pointer-events\", \"none\")\r\n                .call(y_axis)\r\n    }\r\n\r\n    render(){\r\n\r\n        let sumSignals = []; \r\n        let plotWidth = 0.8 * this.width;\r\n        // console.log(this.height);\r\n        // console.log(this.width);\r\n\r\n        // This will break if we change plotWidth elsewhere \r\n        for(let k = 0; k < plotWidth; k++){\r\n            sumSignals.push([0,0]);\r\n        }\r\n\r\n        // Looping through all the signals\r\n        for (let i=0; i < this.props.signals.length; i++){\r\n\r\n            // Looping through the signal values\r\n            for(let j=0; j < this.props.signals[i].values.length; j++){\r\n\r\n                //sumSignals[j] = this.props.signals[i].values[j];\r\n                sumSignals[j][0] = this.props.signals[i].values[j][0];\r\n                sumSignals[j][1] += this.props.signals[i].values[j][1];\r\n            }\r\n            \r\n        }\r\n\r\n        // Should scale this to the svg dimenesions rather than hardcoding it with svgContainerHeight\r\n        for (let n =0; n < sumSignals.length; n++){\r\n            sumSignals[n][1] = sumSignals[n][1] - (this.props.signals.length-1)*(this.height/2)\r\n        }\r\n\r\n        let lineGenerator = d3.line()\r\n          .curve(d3.curveNatural);\r\n\r\n        let pathData = lineGenerator(sumSignals);\r\n\r\n        //The svg line Path we draw\r\n\r\n        // If exists, update\r\n        if(document.getElementById(\"path_Sum\")){\r\n            d3.select(\"#\".concat(\"path_Sum\")).attr(\"d\", pathData)  \r\n               \r\n        }\r\n        \r\n        // Draws path if it doesn't exist\r\n        if(!document.getElementById(\"path_Sum\")){\r\n             d3.select(\"#svgSumPlot\").append(\"path\")\r\n                .attr(\"id\",\"path_Sum\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \")\")\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class FourierCoefficients extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            signals: [\r\n                /* Example signal object \r\n                {\r\n                    id: 0,\r\n                    amplitude: 1,\r\n                    frequency: 1,\r\n                    values: this.generateSignal(1,1),\r\n                    dragging: false,    \r\n                },\r\n                */\r\n            ],\r\n            demoSignal: 'select',\r\n        };\r\n        // This binding is necessary to make `this.` work in the callback   \r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseUp = this.handleMouseUp.bind(this);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n        this.handleMouseMoveFourierMag = this.handleMouseMoveFourierMag.bind(this);\r\n        this.handleMouseMoveFourierPhase = this.handleMouseMoveFourierPhase.bind(this);\r\n        this.handleDemoSignal = this.handleDemoSignal.bind(this);\r\n    }\r\n    \r\n    addSignal(amplitude, phase){\r\n        let signals = this.state.signals;\r\n\r\n        // Colour intensity goes from least intense: rgb(192,192,192) (Silver) to most intense: rgb(0,0,0) (Black)\r\n        const intensity =  (192 - 48*amplitude);\r\n\r\n        // Loop through the current state's signals array\r\n        for(let i = 0; i < signals.length + 1; i++){\r\n\r\n            // Add new signal to end of array if we reach end of array\r\n            if(i === signals.length){\r\n                signals = signals.concat([{       // Just concatenating array of JSON\r\n                    id: signals.length,\r\n                    amplitude: amplitude,                // Should be user input\r\n                    frequency: signals.length,   // Should be user input\r\n                    phase: phase,\r\n                    values: this.generateSignal(amplitude,signals.length,phase),\r\n                    pathID: 'path_'.concat(i.toString(10)), \r\n                    draggingMag: false,    \r\n                    draggingPhasePos: false,    \r\n                    draggingPhaseNeg: false,  \r\n                    colour: rgb(intensity,intensity,intensity),\r\n                },]);\r\n                // console.log(signals)\r\n                break;\r\n            }\r\n\r\n            // If there's a missing ID, insert it to appropriate index\r\n            // e.g. id array: [0, 1, 3]. Therefore missing id 2\r\n            if(i !== signals[i].id){\r\n                let newSignal = {       \r\n                    id: i,\r\n                    amplitude: amplitude,                // Should be user input\r\n                    frequency: i,   // Should be user input\r\n                    phase: phase,\r\n                    values: this.generateSignal(amplitude,i,phase),\r\n                    pathID: 'path_'.concat(i.toString(10)), \r\n                    draggingMag: false,    \r\n                    draggingPhasePos: false,    \r\n                    draggingPhaseNeg: false,  \r\n                    colour: rgb(intensity,intensity,intensity),\r\n                }\r\n\r\n                signals.splice(i, 0, newSignal);\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Once this.setState has been called, it'll call render() to render straight away\r\n        this.setState({\r\n            signals: signals,\r\n        });        \r\n    }\r\n\r\n    removeSignal(signalID){\r\n        // Need to find signal id from the array and delete, then re-update id's\r\n        const signals = this.state.signals;\r\n\r\n        console.log(\"Hi from removeSignal\");    \r\n        console.log(signalID)\r\n        console.log(\"Before: \", signals);\r\n\r\n        let index;\r\n        for(index = 0; index < signals.length; index++){\r\n            if(signals[index].id === signalID){\r\n                break\r\n            }\r\n        }\r\n        console.log(index)\r\n        \r\n        // Find the pathID and delete from DOM\r\n        d3.select(\"#\"+signals[index].pathID).remove();\r\n        \r\n        // Find the signal in the signals array and delete\r\n        signals.splice(index,1)\r\n        \r\n        console.log(\"After:\", signals);\r\n\r\n        this.setState({\r\n            signals: signals,\r\n        });\r\n        console.log(this.state.signals);\r\n\r\n    \r\n    }\r\n\r\n    generateSignal(amplitude, frequency, phase){\r\n        // Generating path data\r\n        let points = [];\r\n        // This assumes that sumPlot and sinePlots have the same dimensions, since generateSignal() is called from those plots\r\n        const divHeight = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        const plotWidth = 0.8 * document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n        // console.log(\"Plot Width\",plotWidth)\r\n        // console.log(\"Div Height\", divHeight)\r\n        let scale = -divHeight/10;\r\n        let x_offset = 0;\r\n        let y_offset = 0;\r\n\r\n        // let Fs = 80;\r\n        let Ts = Math.PI / (plotWidth/4);\r\n\r\n        /* Calculation Reference\r\n        // Assuming the plot is 800x800\r\n        // 1 period = 1 second\r\n        // 1 period = 400 pixels => Ts = 400 samples per second\r\n        // 1 Hz = 2pi radians\r\n\r\n        // Sampling frequency = samples/second\r\n        // 1 sample per 1/400 second (Ts = 1/400)\r\n        // Fs = 2pi * (1/400)\r\n        // Fs = pi / 200\r\n\r\n        // Frequency is in Hz\r\n        // This is bascially an inverse FFT \r\n        // i is basically our t (1 unit of time)\r\n        */\r\n        for(let i = x_offset; i< plotWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude*Math.sin(Ts*frequency*i + (phase * (Math.PI / 180) )) + (divHeight/2 + y_offset)];\r\n        }\r\n        // console.log(\"Plot Length\", points.length)\r\n\r\n        return points;\r\n    }\r\n\r\n    generateDC(amplitude){\r\n        let points = [];\r\n        const divHeight = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        const plotWidth = 0.8 * document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n        let scale = - divHeight/10;\r\n\r\n        let x_offset = 0;\r\n        let y_offset = 0;\r\n\r\n        for(let i = x_offset; i< plotWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude + (divHeight/2 + y_offset)];\r\n        }\r\n \r\n        return points\r\n    }\r\n\r\n    updateDials(){\r\n        const signals = this.state.signals;\r\n\r\n        for(let i = 0; i< signals.length; i++){\r\n            document.getElementById(\"signal\" + signals[i].id + \"_AmpText\").value = signals[i].amplitude;\r\n            document.getElementById(\"signal\" + signals[i].id + \"_FreqText\").value = signals[i].frequency;\r\n        }\r\n    }\r\n\r\n    handleChange(event){\r\n\r\n        console.log(event)\r\n\r\n        const signals = this.state.signals;\r\n        const inputType = event.target.getAttribute('input_type');\r\n        const signalID = event.target.getAttribute('signal_id'); // Signal ID Number\r\n        let value = parseFloat(event.target.value);   \r\n\r\n        // Text Form can currently exceed the maximum limit of 10, should limit?\r\n\r\n        if((inputType === \"AmpDial\") || (inputType === \"AmpText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                // DC Case\r\n                if(signalID === 0){\r\n                    signals[signalID].amplitude = value; \r\n                    signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n                    document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n\r\n                    const intensity =  (192 - 48*value);\r\n                    signals[signalID].colour = rgb(intensity,intensity,intensity);\r\n                }\r\n                // All Other cases\r\n                else{\r\n                    signals[signalID].amplitude = value;                 \r\n                    signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                    document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n\r\n                    const intensity =  (192 - 48*value);\r\n                    signals[signalID].colour = rgb(intensity,intensity,intensity);\r\n                }     \r\n            }\r\n        }\r\n        else if ((inputType === \"PhaseDial\") || (inputType === \"PhaseText\")){\r\n            console.log(\"HELLO\")\r\n            console.log(signals[signalID].amplitude)\r\n            console.log(signals[signalID].phase)\r\n\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                // DC Case\r\n                if(signalID === 0){\r\n                    signals[signalID].phase = value; \r\n                    signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n                    document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n                }\r\n                 // All Other cases\r\n                else{\r\n                    signals[signalID].phase = value; \r\n                    signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                    document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n                }\r\n            }\r\n        }     \r\n\r\n        this.setState({\r\n                signals: signals,   \r\n            }   \r\n        );\r\n\r\n    }\r\n\r\n    \r\n    handleMouseDown(e){\r\n        console.log(\"clicked\")\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation()\r\n\r\n        const elementID = e.target.getAttribute('id');\r\n\r\n        if(elementID !== null){\r\n\r\n            const condition = elementID.includes(\"circle_\");\r\n\r\n            if(condition){\r\n\r\n                console.log('circle clicked')\r\n\r\n                const signals = this.state.signals;\r\n                const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n                const circleID = e.target.getAttribute('id'); // Circle ID \r\n                \r\n                // Finding signal array's index from signal id\r\n                let index;\r\n                for(index = 0; index < signals.length; index++){\r\n                    if(signals[index].id === signalID){\r\n                        \r\n                        break\r\n                    }\r\n                }\r\n                \r\n                if(circleID.includes(\"circle_mag\")){\r\n                    signals[index].draggingMag = true;\r\n                } \r\n                if(circleID.includes(\"circle_phase_+\")){\r\n                    signals[index].draggingPhasePos = true;\r\n                } \r\n                if(circleID.includes(\"circle_phase_-\")){\r\n                    signals[index].draggingPhaseNeg = true;\r\n                } \r\n\r\n                this.setState({\r\n                    signals: signals,   \r\n                    }\r\n                );   \r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseUp(e){\r\n        console.log(\"click released\")\r\n\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n\r\n        const signals = this.state.signals;\r\n\r\n        const elementID = e.target.getAttribute('id');\r\n\r\n        if(elementID !== null){\r\n\r\n            // set all signals dragging to false\r\n            for(let n = 0; n < signals.length; n++){\r\n                signals[n].draggingMag = false;\r\n                signals[n].draggingPhasePos = false;\r\n                signals[n].draggingPhaseNeg = false;\r\n            }\r\n                \r\n                this.setState({\r\n                    signals: signals,   \r\n                    }\r\n                );\r\n\r\n                console.log(\"circle click released\")\r\n            }\r\n    }\r\n\r\n    // Base Mouse move function. Used in Frequency Domain. Not currently in use in this .js file\r\n    handleMouseMove(e) {\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n        \r\n        let index;\r\n        for(index = 0; index < signals.length; index++){\r\n            if(signals[index].id === signalID){\r\n                break\r\n            }\r\n        }\r\n\r\n        //If we are dragging\r\n          if (signals[index].dragging) {\r\n              e.preventDefault();\r\n\r\n              console.log(e)\r\n              console.log(e.target)\r\n              console.log(\"clientX:\",e.clientX)\r\n              console.log(\"clientY:\",e.clientY)\r\n              // console.log(e.target.parentNode.parentNode)\r\n            let  rect = e.target.parentNode.parentNode.getBoundingClientRect();  \r\n\r\n            console.log(rect.left);\r\n            console.log(rect.top);\r\n\r\n\r\n            // Maybe should seperate coordinates and freq/amp values\r\n             signals[index].frequency = (e.clientX - rect.left - 400) / 100;\r\n             signals[index].amplitude = - (e.clientY - rect.top - 400) / 100;\r\n             signals[index].values = this.generateSignal(signals[index].amplitude, signals[index].frequency, signals[index].phase);\r\n\r\n            // We should set position limits\r\n\r\n            console.log(signals[index].frequency)\r\n            console.log(signals[index].amplitude)\r\n\r\n            console.log(this)\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n                }\r\n            );  \r\n        }\r\n    }\r\n\r\n    handleMouseMoveFourierMag(e) {\r\n\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n        \r\n        const elementID = e.target.getAttribute('id');\r\n\r\n        if(elementID !== null){\r\n\r\n                const signals = this.state.signals;\r\n                \r\n                // Grabbing signal id number doesn't work if event is outside of the div element \r\n                // const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n\r\n                // Find the signal that is dragging \r\n                let index;\r\n                let dragging = false;\r\n                for(let n = 0; n < signals.length; n++){\r\n                    if(signals[n].draggingMag === true){\r\n                        \r\n                        dragging = true;\r\n                        index = n;\r\n                    }\r\n                }\r\n\r\n                console.log(index);\r\n                \r\n                //If we are dragging\r\n                if (dragging) {\r\n                    // e.preventDefault();\r\n\r\n                    console.log(\"im dragging\")\r\n                    console.log(signals[index].draggingMag);\r\n                    // console.log(e.target)\r\n                    let  rect = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect();  \r\n\r\n                    let divHeight = rect.height;\r\n                    let divWidth = rect.width;\r\n                    let plotHeight = 0.8*divHeight;\r\n                    let plotWidth = 0.8*divWidth;\r\n\r\n                    // Divide by 8: max axis size (-4 to 4)\r\n                    let amplitude = - (e.clientY - rect.top - divHeight/2) / (plotHeight/8);\r\n                    if(amplitude > 4){\r\n                        amplitude = 4;\r\n                    }\r\n                    if(amplitude < 0){\r\n                        amplitude = 0;\r\n                    }\r\n\r\n                    // Maybe should seperate coordinates and freq/amp values\r\n                    signals[index].frequency = signals[index].id;\r\n                    signals[index].amplitude = amplitude;    \r\n                    signals[index].values = this.generateSignal(signals[index].amplitude, signals[index].frequency, signals[index].phase);\r\n                    \r\n                    const intensity =  (192 - 48*amplitude)\r\n                    signals[index].colour = rgb(intensity,intensity,intensity);\r\n\r\n                    // Checking if signal is the DC value\r\n                    if(index === 0){\r\n                        signals[index].values = this.generateDC(signals[index].amplitude);\r\n                    }\r\n\r\n                    this.setState({\r\n                        signals: signals,   \r\n                        }\r\n                    );  \r\n                }\r\n\r\n            //}\r\n        }\r\n\r\n        \r\n    }\r\n    \r\n    handleMouseMoveFourierPhase(e) {\r\n\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n\r\n        const signals = this.state.signals;\r\n\r\n        const elementID = e.target.getAttribute('id');\r\n\r\n        // Sanity check\r\n        if(elementID !== null){\r\n\r\n            // Find the signal that is dragging \r\n\r\n            // Grabbing signal id number doesn't work if event is outside of the div element \r\n            // const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n\r\n            let index;\r\n            let draggingPhasePos = false;\r\n            let draggingPhaseNeg = false;\r\n            for(let n = 0; n < signals.length; n++){\r\n                if(signals[n].draggingPhasePos === true ){                        \r\n                    draggingPhasePos = true;\r\n                    index = n;\r\n                }\r\n                if(signals[n].draggingPhaseNeg === true){                      \r\n                    draggingPhaseNeg = true;\r\n                    index = n;\r\n                }\r\n            }\r\n\r\n            //If we are dragging\r\n            if(draggingPhasePos || draggingPhaseNeg){\r\n\r\n                let rect = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect();  \r\n\r\n                let divHeight = rect.height;\r\n                let divWidth = rect.width;\r\n                let plotHeight = 0.8*divHeight;\r\n                let plotWidth = 0.8*divWidth;\r\n\r\n                // Maybe should seperate coordinates and freq/amp values\r\n\r\n                let circleID;\r\n                console.log(index)\r\n                if(draggingPhasePos){\r\n                    circleID = \"circle_phase_+\".concat(index.toString(10)); \r\n                }\r\n                if(draggingPhaseNeg){\r\n                    circleID = \"circle_phase_-\".concat(index.toString(10)); \r\n                }\r\n                \r\n                console.log(circleID)\r\n                const circleCX = parseInt(document.getElementById(circleID).getAttribute(\"cx\"))\r\n                console.log(circleCX) \r\n\r\n                // Positive Circle\r\n                if(circleCX >= 0){\r\n                    let phase = parseInt( - (e.clientY - rect.top - divHeight/2) / (plotHeight/360));\r\n                    if(phase > 180){\r\n                        phase = 180;\r\n                    }\r\n                    if(phase < -180){\r\n                        phase = -180;\r\n                    }\r\n                    signals[index].phase = phase;\r\n                } \r\n\r\n                // Negative Circle\r\n                else if(circleCX < 0){\r\n                    let phase = parseInt( (e.clientY - rect.top - divHeight/2) / (plotHeight/360));\r\n                    if(phase > 180){\r\n                        phase = 180;\r\n                    }\r\n                    if(phase < -180){\r\n                        phase = -180;\r\n                    }\r\n                    signals[index].phase = phase;\r\n                } \r\n\r\n                console.log(signals[index].phase)\r\n                signals[index].frequency = signals[index].id; \r\n                signals[index].values = this.generateSignal(signals[index].amplitude, signals[index].frequency, signals[index].phase);\r\n\r\n                // Checking if signal is the DC value\r\n                if(index === 0){\r\n                    signals[index].values = this.generateDC(signals[index].amplitude);\r\n                }\r\n\r\n                this.setState({\r\n                    signals: signals,   \r\n                    }\r\n                );  \r\n            }\r\n        }\r\n    }\r\n\r\n    emptyPlots(){\r\n        let signals = this.state.signals;\r\n\r\n        for(let i = 0; i< signals.length; i++){                 \r\n\r\n            d3.select(\"#\"+signals[i].pathID).remove();\r\n        }  \r\n\r\n        return signals = [];\r\n    }\r\n\r\n    handleDemoSignal(e){\r\n\r\n        let signals = this.state.signals;\r\n        const demoSignal = e.target.value;\r\n\r\n\r\n        if(demoSignal === 'empty'){\r\n            signals = this.emptyPlots();\r\n        }\r\n\r\n        // Note: If you make multiple setState() calls, only the last call will run (the prior ones won't run)\r\n        // Hence why here, we instead of repeatedly calling addSignal(), we explicitly generate the signals array\r\n        // setState() is asynchronous and are batched for performance gains. \r\n        \r\n        if(demoSignal === 'sine'){\r\n \r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            let amplitude = 0;\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,\r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n            },])\r\n\r\n            // Generating other sine waves\r\n            amplitude = 1;\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,                \r\n                frequency: signals.length,   \r\n                phase: 0,\r\n                values: this.generateSignal(amplitude,signals.length,0),\r\n                pathID: 'path_1', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false, \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n            },])\r\n        }\r\n\r\n\r\n        if(demoSignal === 'even'){\r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            let amplitude = 0\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,    \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n            },])\r\n\r\n            // Generating other sine waves\r\n            for(let i = 0; i < 4; i++){\r\n                // Odd\r\n                if((i % 2) !== 0 ){\r\n                    amplitude = 1\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(amplitude,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,     \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                    },])\r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    amplitude = 0\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(amplitude,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,  \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if(demoSignal === 'odd'){\r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            let amplitude = 0\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,    \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n            },])\r\n\r\n            // Generating other sine waves\r\n            for(let i = 0; i < 4; i++){\r\n                // Odd\r\n                if((i % 2) !== 0 ){\r\n                    amplitude = 0\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(amplitude,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,   \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                    },])\r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: 1,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(1,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,   \r\n                        colour: hsl(signals.length*60, 100, 50)\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if(demoSignal === 'triangle'){\r\n            signals = this.emptyPlots();\r\n\r\n            let amplitude = 0\r\n            // Generating DC signal\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0',  \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,     \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n            },])\r\n\r\n            // Generating other sine waves\r\n            let alternate = true;\r\n            for(let i = 1; i < 20; i++){\r\n                // Odd\r\n                if((i % 2) !== 0 ){\r\n                    amplitude = (8/Math.pow(Math.PI,2))*(1/Math.pow(i,2));\r\n\r\n                    // Non-phase shifted harmonic\r\n                    if(alternate){\r\n                        signals = signals.concat([{       \r\n                            id: signals.length,\r\n                            amplitude: amplitude,                \r\n                            frequency: signals.length,   \r\n                            phase: 0,\r\n                            values: this.generateSignal(amplitude,signals.length,0),\r\n                            pathID: 'path_'.concat(i.toString(10)), \r\n                            draggingMag: false,    \r\n                            draggingPhasePos: false, \r\n                            draggingPhaseNeg: false,   \r\n                            colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        },])\r\n                        alternate = !alternate; \r\n                    }\r\n                    // Phase shifted harmonic\r\n                    else if(!alternate){\r\n                        signals = signals.concat([{       \r\n                            id: signals.length,\r\n                            amplitude: amplitude,                \r\n                            frequency: signals.length,   \r\n                            phase: 180,\r\n                            values: this.generateSignal(amplitude,signals.length, 180),\r\n                            pathID: 'path_'.concat(i.toString(10)), \r\n                            draggingMag: false,    \r\n                            draggingPhasePos: false, \r\n                            draggingPhaseNeg: false,    \r\n                            colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        },])\r\n                        alternate = !alternate; \r\n                    }    \r\n                    \r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    amplitude = 0;\r\n                    \r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: 0,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(0,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if(demoSignal === 'square'){\r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: 0,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(0,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,  \r\n                colour: hsl(signals.length*60, 100, 50)\r\n            },])\r\n\r\n            // Generating other sine waves\r\n\r\n            for(let i = 1; i < 25; i++){\r\n                // Odd\r\n                if((i % 2) !== 0 ){\r\n                    \r\n                    let amp = (4/Math.PI)*(1/i);\r\n\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amp,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(amp,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,     \r\n                        colour: hsl(signals.length*60, 100, 50)\r\n                    },])    \r\n\r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: 0,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(0,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: hsl(signals.length*60, 100, 50)\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if(demoSignal === 'sawtooth'){\r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: 0,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(0,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,     \r\n                colour: hsl(signals.length*60, 100, 50)\r\n            },])\r\n\r\n            // Generating other sine waves\r\n\r\n            for(let i = 1; i < 25; i++){\r\n\r\n                let amp = (4/Math.PI)*(1/i);\r\n\r\n                // Odd\r\n                if((i % 2) !== 0 ){    \r\n\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amp,                \r\n                        frequency: signals.length,   \r\n                        phase: 180,\r\n                        values: this.generateSignal(amp,signals.length,180),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: hsl(signals.length*60, 100, 50)\r\n                    },])    \r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amp,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(amp,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: hsl(signals.length*60, 100, 50)\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            signals: signals,\r\n            demoSignal: demoSignal,\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n    const current = this.state.signals;\r\n\r\n    return (\r\n            <div className = {styles.container}>\r\n\r\n                <div className = {styles.timePlots} id = \"timePlotsID\">\r\n                    <div className = {styles.sinePlots} id =\"sinePlotsID\">\r\n                        <svg id=\"svgSinePlot\" width=\"40vw\" height=\"45vh\" \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black'\r\n                                }}> \r\n                            <SinePlot\r\n                                signals = {current}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                    <div className = {styles.sumPlots} id =\"sumPlotsID\">\r\n                        <svg id=\"svgSumPlot\" width=\"40vw\" height=\"45vh\" \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black'\r\n                                }}> \r\n                            <SumPlot\r\n                                signals = {current}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className = {styles.otherPlots}>\r\n\r\n                    <div className = {styles.fourierMagPlots} id =\"fourierMagPlotsID\">\r\n                        <svg id=\"svgFourierMagPlot\" width=\"40vw\" height=\"45vh\"  \r\n                        onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                        onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                        onMouseMove = {(event) => this.handleMouseMoveFourierMag(event)}\r\n\r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black',\r\n                                \r\n                                }}> \r\n                                \r\n                                \r\n                        \r\n                            <FourierMagPlot\r\n                                signals = {current}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className = {styles.fourierPhasePlots} id =\"fourierPhasePlotsID\">\r\n                        <svg id=\"svgFourierPhasePlot\" width=\"40vw\" height=\"45vh\"\r\n                            onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                            onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                            onMouseMove = {(event) => this.handleMouseMoveFourierPhase(event)}  \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black',\r\n                                \r\n                                }}> \r\n                        \r\n                            <FourierPhasePlot\r\n                                signals = {current}\r\n                            />\r\n                        </svg>\r\n                    </div>         \r\n                    \r\n                </div>\r\n                <div className = {styles.controls}>\r\n                    \r\n                        <Controls\r\n                            signals = {current}\r\n                            demoSignal = {this.state.demoSignal}\r\n                            onChange = {(event) => this.handleChange(event)}\r\n                            onAdd = {(amplitude, phase) => this.addSignal(amplitude, phase)}\r\n                            onRemove = {(signalID) => this.removeSignal(signalID)}\r\n                            onDemoSignal = {(event) => this.handleDemoSignal(event)}\r\n                        />\r\n                    \r\n                </div>\r\n            </div>\r\n      );\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}