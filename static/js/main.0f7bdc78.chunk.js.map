{"version":3,"sources":["FrequencyDomain.module.css","App.module.css","FourierCoefficients.module.css","FourierCoefficients.js","FrequencyDomain.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dials","props","signal","highlight","className","styles","signal_container","signal_info","tooltip","tooltiptext","id","onClick","signalID","onRemove","height","width","r","cx","cy","fill","colour","stroke","strokeWidth","signal_props","amplitude","toFixed","signal_id","input_type","type","min","max","value","step","onChange","phase","signal_animate","align-content","onAnimate","Controls","event","i","signalList","this","signals","length","push","key","renderDial","dials","global_controls","onAdd","style","gridRow","name","demoSignal","onDemoSignal","onToggleView","React","Component","FourierCirclesMagPos","divHeight","document","getElementById","getBoundingClientRect","divWidth","plotHeight","plotWidth","fourierCircles","fourierMultiples","transform","FourierCirclesMagNeg","FourierCirclesPhasePos","FourierCirclesPhaseNeg","FourierMagPlot","FourierMagSvg","d3","remove","xscale_freq","domain","range","yscale_freq","xAxisTicks","ticks","filter","tick","Number","isInteger","yAxisTicks","x_axis_freq","tickValues","tickFormat","y_axis_freq","append","attr","call","text","drawAxis","circleList","renderCirclePos","renderCircleNeg","FourierPhasePlot","SinePlot","svgSinePlot","xscale","yscale","x_axis","scale","y_axis","pathData","curve","lineGenerator","values","pathID","SumPlot","svgSumPlot","sumSignals","k","j","n","concat","FourierCoefficients","state","handleMouseDown","bind","handleMouseUp","handleMouseMove","handleMouseOverFourier","handleMouseMoveFourierMag","handleMouseMoveFourierPhase","handleDemoSignal","redrawSignal","intensity","frequency","generateSignal","toString","draggingMag","draggingPhasePos","draggingPhaseNeg","rgb","newSignal","splice","setState","index","console","log","window","requestAnimationFrame","points","Ts","Math","PI","sin","inputType","target","getAttribute","parseFloat","isNaN","generateDC","e","preventDefault","stopPropagation","elementID","includes","parseInt","circleID","dragging","clientX","clientY","rect","parentNode","left","top","circleCX","condition","checkBoxID","checked","emptyPlots","alternate","pow","current","container","timePlots","sinePlots","position","border","sumPlots","otherPlots","fourierMagPlots","onMouseDown","onMouseUp","onMouseMove","onMouseOver","fourierPhasePlots","controls","handleChange","addSignal","removeSignal","animateSignal","toggleView","signal_dials","Circles","onMouseOut","svgID","FrequencyPlot","freqSvg","renderCircle","FrequencyDomain","circles","freqPlots","App","navbar","tab","to","exact","path","About","centertext","Home","ReactDOM","render","Boolean","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f7bdc78.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"FrequencyDomain_home__30fuX\",\"container\":\"FrequencyDomain_container__DTkEc\",\"navbar\":\"FrequencyDomain_navbar__2nfHk\",\"tab\":\"FrequencyDomain_tab__2HYGI\",\"controls\":\"FrequencyDomain_controls__3_b1P\",\"dials\":\"FrequencyDomain_dials__1_C6C\",\"signal_container\":\"FrequencyDomain_signal_container__2wtJT\",\"signal_info\":\"FrequencyDomain_signal_info__2oOve\",\"signal_props\":\"FrequencyDomain_signal_props__3Psyr\",\"signal_dials\":\"FrequencyDomain_signal_dials__36fR_\",\"sinePlots\":\"FrequencyDomain_sinePlots__1Lmk_\",\"otherPlots\":\"FrequencyDomain_otherPlots__2dZs_\",\"freqPlots\":\"FrequencyDomain_freqPlots__2WRIF\",\"sumPlots\":\"FrequencyDomain_sumPlots__9CQRp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"App_home__gVUmA\",\"container\":\"App_container__2fAhY\",\"navbar\":\"App_navbar__3YSH8\",\"tab\":\"App_tab__2izV7\",\"centertext\":\"App_centertext__1tHIr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"FourierCoefficients_home__10kQG\",\"container\":\"FourierCoefficients_container__kd25g\",\"navbar\":\"FourierCoefficients_navbar__2pTv4\",\"tab\":\"FourierCoefficients_tab__8pHCY\",\"tooltip\":\"FourierCoefficients_tooltip__1v6vc\",\"tooltiptext\":\"FourierCoefficients_tooltiptext__P9iLV\",\"controls\":\"FourierCoefficients_controls___EOHp\",\"dials\":\"FourierCoefficients_dials__1zijK\",\"global_controls\":\"FourierCoefficients_global_controls__1LP2r\",\"signal_container\":\"FourierCoefficients_signal_container__1Of7C\",\"signal_info\":\"FourierCoefficients_signal_info__2oYZ9\",\"signal_props\":\"FourierCoefficients_signal_props__1Kcya\",\"signal_dials\":\"FourierCoefficients_signal_dials__kLbm8\",\"signal_animate\":\"FourierCoefficients_signal_animate__2qmfm\",\"timePlots\":\"FourierCoefficients_timePlots__vs39U\",\"sinePlots\":\"FourierCoefficients_sinePlots__NqB9U\",\"otherPlots\":\"FourierCoefficients_otherPlots__AqeTC\",\"fourierMagPlots\":\"FourierCoefficients_fourierMagPlots__1Fesw\",\"fourierPhasePlots\":\"FourierCoefficients_fourierPhasePlots__3rZM3\",\"sumPlots\":\"FourierCoefficients_sumPlots__DMOR_\",\"fourierCircles\":\"FourierCoefficients_fourierCircles__2jYlh\"};","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styles from './FourierCoefficients.module.css'; \r\nimport * as d3 from \"d3\";\r\nimport { hsl } from 'd3';\r\nimport { rgb } from 'd3';\r\n\r\nfunction Dials(props) {\r\n\r\n    let opacity\r\n    if(props.signal.highlight){\r\n        opacity = \"1\" \r\n    }\r\n    else{\r\n        opacity = \"0.6\" \r\n    }\r\n\r\n    return(\r\n        <div className={styles.signal_container}>\r\n            <div className={styles.signal_info}>\r\n\r\n                <div className={styles.tooltip}>\r\n                    | Help |\r\n                        <span className={styles.tooltiptext}>\r\n                            <p>This is the control panel to adjust signal properties.</p>\r\n                            <p>Try adjusting the Amplitude and Phase!</p>\r\n                        </span>\r\n                </div>\r\n                \r\n                <div>Fundamental Frequency Multiple: {props.signal.id}</div>\r\n                <button id = \"remove-signal\" onClick={(signalID) => props.onRemove(props.signal.id)}> Remove Signal </button>\r\n                <div> Colour </div>\r\n                <svg height = \"40\" width = \"20\">\r\n                    <circle\r\n                        r = {10}\r\n                        cx = {10}\r\n                        cy = {20}\r\n                        fill = {props.signal.colour}\r\n                        stroke = \"black\"\r\n                        strokeWidth=\"1\"\r\n                    />\r\n                </svg>\r\n\r\n            </div>\r\n            <div className={styles.signal_props}>\r\n                <div>Amplitude: {props.signal.amplitude.toFixed(2)}</div>\r\n            </div>\r\n            <div className = {styles.signal_props}>\r\n                <div>\r\n                    <input \r\n                    id = {\"signal\" + props.signal.id + \"_AmpDial\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpDial\"}\r\n                    type =\"range\" \r\n                    min={0} \r\n                    max ={4} \r\n                    value = {props.signal.amplitude} \r\n                    step={0.1}\r\n                    onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                    id = {\"signal\" + props.signal.id + \"_AmpText\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpText\"}\r\n                    type = \"number\"  \r\n                    min = {0}\r\n                    max = {4}\r\n                    onChange={props.onChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div className={styles.signal_props}>\r\n                <div>Phase: {props.signal.phase}</div>\r\n            </div>\r\n            <div className={styles.signal_props}>\r\n                <div>\r\n                    <input \r\n                        id = {\"signal\" + props.signal.id + \"_PhaseDial\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseDial\"}\r\n                        type =\"range\" \r\n                        min={-180} \r\n                        max ={180} \r\n                        value = {props.signal.phase} \r\n                        step={1}\r\n                        onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                        id = {\"signal\" + props.signal.id + \"_PhaseText\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseText\"}\r\n                        type = \"number\"  \r\n                        min = {-180}\r\n                        max = {180}\r\n                        onChange={props.onChange}\r\n                    />\r\n                </div>        \r\n            </div>\r\n\r\n            <div className={styles.signal_animate}>\r\n                <button id = \"animate-signal\" align-content = \"center\" onClick={(signalID) => props.onAnimate(props.signal.id)}> Animate Signal </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Controls extends React.Component {\r\n\r\n    renderDial(signal){\r\n        return(\r\n            <Dials\r\n                signal = {signal}\r\n                onChange = {(event) => this.props.onChange(event)}\r\n                onRemove = {(i) => this.props.onRemove(i)}\r\n                onAnimate = {(i) => this.props.onAnimate(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n        const signalList = []; \r\n        for (let i=0; i < this.props.signals.length; i++){\r\n            signalList.push(\r\n                <div key={\"signal\" + this.props.signals[i].id}> \r\n                    {this.renderDial(this.props.signals[i])} \r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            <div className = {styles.dials} >\r\n                <div className = {styles.global_controls}>\r\n\r\n                    <div className={styles.tooltip}>\r\n                        | Help |\r\n                            <span className={styles.tooltiptext}>\r\n                                <p>Try adding a signal!</p>\r\n                            </span>\r\n                    </div>\r\n                    <button id = \"add-signal\" align-content = \"center\" onClick={() => this.props.onAdd(0, 0)}> Add New Signal </button>\r\n                    <div style={{gridRow: \"2\"}}> Try a demo signal </div>\r\n                    <select name=\"demoSignal\" id=\"demoSignal\" \r\n                        value = {this.props.demoSignal}\r\n                        onChange = {(event) => this.props.onDemoSignal(event)}\r\n                        style={{gridRow: \"2\"}}>\r\n                        <option value =\"select\">- Select -</option>\r\n                        <option value =\"empty\">Empty</option>\r\n                        <option value=\"sine\">Sine Wave</option>\r\n                        <option value=\"even\">Even Wave</option>\r\n                        <option value=\"odd\">Odd Wave</option>\r\n                        <option value=\"triangle\">Triangle Wave</option>\r\n                        <option value=\"square\">Square Wave Approx</option>\r\n                        <option value=\"sawtooth\">Sawtooth Wave Approx</option>\r\n                    </select>\r\n\r\n                    <div style = {{gridRow:\"3\"}}>\r\n                        <label>Default View:</label> \r\n                        <input type=\"checkbox\" id=\"defaultViewCheckBox\" onClick={(event) => this.props.onToggleView(event)} />\r\n                    </div>\r\n                    <div style = {{gridRow:\"3\"}}>\r\n                        <label>Full View:</label> \r\n                        <input type=\"checkbox\" id=\"fullViewCheckBox\" onClick={(event) => this.props.onToggleView(event)} />\r\n                    </div>\r\n                </div>\r\n                {signalList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction FourierCirclesMagPos(props) {\r\n    let divHeight = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    let strokeWidth\r\n    if(props.signal.highlight){\r\n        strokeWidth = \"2\" \r\n    }\r\n    else{\r\n        strokeWidth = \"1\" \r\n    }\r\n\r\n    return(\r\n        <circle\r\n            className ={styles.fourierCircles}\r\n            id = {\"circle_mag_\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*(plotWidth/ (props.fourierMultiples * 2))}\r\n            cy = {(props.signal.amplitude)*(plotHeight/8)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth= {strokeWidth}\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesMagNeg(props) {\r\n    let divHeight = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    let strokeWidth\r\n    if(props.signal.highlight){\r\n        strokeWidth = \"2\" \r\n    }\r\n    else{\r\n        strokeWidth = \"1\" \r\n    }\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_mag_-\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*-(plotWidth/(props.fourierMultiples * 2))} // 8 is because our x-axis is divided into 8 sections \r\n            cy = {(props.signal.amplitude)*(plotHeight/8)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth={strokeWidth}\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesPhasePos(props) {\r\n    let divHeight = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    let strokeWidth\r\n    if(props.signal.highlight){\r\n        strokeWidth = \"2\" \r\n    }\r\n    else{\r\n        strokeWidth = \"1\" \r\n    }\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_phase_+\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*(plotWidth/ (props.fourierMultiples * 2))} \r\n            cy = {(props.signal.phase)*(plotHeight/360)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth={strokeWidth}\r\n        />\r\n    );\r\n}\r\n\r\nfunction FourierCirclesPhaseNeg(props) {\r\n    let divHeight = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n    let divWidth = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n    let plotHeight = 0.8*divHeight;\r\n    let plotWidth = 0.8*divWidth;\r\n\r\n    let strokeWidth\r\n    if(props.signal.highlight){\r\n        strokeWidth = \"2\" \r\n    }\r\n    else{\r\n        strokeWidth = \"1\" \r\n    }\r\n\r\n    return(\r\n        <circle\r\n            id = {\"circle_phase_-\"+props.signal.id}\r\n            signal_id = {props.signal.id}\r\n            cx = {(props.signal.id)*-(plotWidth/ (props.fourierMultiples * 2))} \r\n            cy = {-(props.signal.phase)*(plotHeight/360)}\r\n            transform={\"translate(\" + divWidth/2 +\",\" + divHeight/2 +\") scale(1,-1)\"}\r\n            r = {10}\r\n            fill = {props.signal.colour}\r\n            stroke = \"black\"\r\n            strokeWidth={strokeWidth}\r\n        />\r\n    );\r\n}\r\n\r\nclass FourierMagPlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    drawAxis(height, width, fourierMultiples){\r\n\r\n        let FourierMagSvg = d3.select(\"#svgFourierMagPlot\")\r\n\r\n        // if axis exists but we are redrawing\r\n        if(document.getElementById(\"x_axis_fourierMagPlot\") || document.getElementById(\"y_axis_fourierMagPlot\")){\r\n\r\n            // remove current axis\r\n            d3.select(\"#x_axis_fourierMagPlot\").remove();\r\n            d3.select(\"#y_axis_fourierMagPlot\").remove();\r\n        }\r\n\r\n            // Drawing new axis\r\n\r\n            // Create Axis for Frequency Plot\r\n            let xscale_freq = d3.scaleLinear()\r\n                    .domain([-fourierMultiples, fourierMultiples]) // This needs to be dynamic\r\n                    .range([ (1/10)*width, (9/10)*width ]);\r\n\r\n            let yscale_freq = d3.scaleLinear()\r\n                    .domain([4,0]) // This needs to be dynamic\r\n                    .range([ (1/10)*height, (5/10)*height ]);\r\n\r\n            // Add scales to axis\r\n            const xAxisTicks = xscale_freq.ticks()\r\n                                     .filter(tick => Number.isInteger(tick));\r\n\r\n            const yAxisTicks = yscale_freq.ticks()\r\n                                     .filter(tick => Number.isInteger(tick))                         \r\n \r\n            let x_axis_freq = d3.axisBottom(xscale_freq)\r\n             .tickValues(xAxisTicks)\r\n             .tickFormat(d3.format(\"d\"));\r\n\r\n            let y_axis_freq = d3.axisLeft(yscale_freq)\r\n             .tickValues(yAxisTicks)\r\n             .tickFormat(d3.format(\"d\"));\r\n            \r\n\r\n            FourierMagSvg.append('g')\r\n                         .attr(\"id\",\"x_axis_fourierMagPlot\")\r\n                         .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n                         .attr(\"pointer-events\", \"none\")\r\n                         .call(x_axis_freq)\r\n\r\n            FourierMagSvg.append('g')\r\n                         .attr(\"id\",\"y_axis_fourierMagPlot\")\r\n                         .attr(\"transform\",\"translate(\" + this.width/2 + \",0)\")\r\n                         .attr(\"pointer-events\", \"none\")\r\n                         .call(y_axis_freq); \r\n        \r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n\r\n        let FourierMagSvg = d3.select(\"#svgFourierMagPlot\")\r\n\r\n        FourierMagSvg.append(\"text\")\r\n                         .attr(\"text-anchor\", \"middle\")  \r\n                         .attr(\"x\",this.width/2)\r\n                         .attr(\"y\",this.height/20)\r\n                         .style(\"font-size\", \"16px\") \r\n                         .style(\"text-decoration\", \"underline\")  \r\n                         .text(\"Fourier Magnitude Plot\");\r\n\r\n        // First drawing of the axis (default view of 4 terms)\r\n        this.drawAxis(this.height, this.width, this.props.fourierMultiples);\r\n        \r\n    }\r\n\r\n    /*\r\n    componentDidUpdate(){\r\n        // Update dimensions when DOM is changed\r\n        this.height = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect().width;\r\n    }\r\n    */\r\n\r\n    renderCirclePos(signal, fourierMultiples){\r\n        return(\r\n            <FourierCirclesMagPos\r\n                signal = {signal}\r\n                fourierMultiples = {fourierMultiples}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderCircleNeg(signal, fourierMultiples){\r\n        return(\r\n            <FourierCirclesMagNeg\r\n                signal = {signal}\r\n                fourierMultiples = {fourierMultiples}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n        const signals = this.props.signals;\r\n        const fourierMultiples = this.props.fourierMultiples;\r\n\r\n        this.drawAxis(this.height, this.width, fourierMultiples)\r\n\r\n           const circleList = [];\r\n          \r\n           for (let i=0; i < signals.length; i++){\r\n                // Render DC term\r\n                if(signals[i].id === 0){\r\n                    circleList.push(\r\n                        this.renderCirclePos(signals[i], fourierMultiples) \r\n                    )\r\n                }\r\n                // Render all other Fourier Terms\r\n                else{\r\n                    circleList.push(\r\n                        this.renderCirclePos(signals[i], fourierMultiples),\r\n                        this.renderCircleNeg(signals[i], fourierMultiples)\r\n                    )\r\n                }\r\n           }                    \r\n   \r\n           return( \r\n               <svg>\r\n                  {circleList}\r\n               </svg>\r\n           );\r\n       }\r\n}\r\n\r\nclass FourierPhasePlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    drawAxis(height, width, fourierMultiples){\r\n\r\n        let FourierMagSvg = d3.select(\"#svgFourierPhasePlot\")\r\n\r\n        // if axis exists but we are redrawing\r\n        if(document.getElementById(\"x_axis_fourierPhasePlot\") || document.getElementById(\"y_axis_fourierPhasePlot\")){\r\n\r\n            // remove current axis\r\n            d3.select(\"#x_axis_fourierPhasePlot\").remove();\r\n            d3.select(\"#y_axis_fourierPhasePlot\").remove();\r\n        }\r\n\r\n            // Drawing new axis\r\n\r\n            // Create Axis for Frequency Plot\r\n            let xscale_freq = d3.scaleLinear()\r\n                    .domain([-fourierMultiples, fourierMultiples]) // This needs to be dynamic\r\n                    .range([ (1/10)*width, (9/10)*width ]);\r\n\r\n            let yscale_freq = d3.scaleLinear()\r\n                    .domain([180,-180]) // This needs to be dynamic\r\n                    .range([ (1/10)*height, (9/10)*height ]);\r\n\r\n            // Add scales to axis\r\n            const xAxisTicks = xscale_freq.ticks()\r\n                                     .filter(tick => Number.isInteger(tick));\r\n\r\n            const yAxisTicks = yscale_freq.ticks()\r\n                                     .filter(tick => Number.isInteger(tick))                         \r\n \r\n            let x_axis_freq = d3.axisBottom(xscale_freq)\r\n             .tickValues(xAxisTicks)\r\n             .tickFormat(d3.format(\"d\"));\r\n\r\n            let y_axis_freq = d3.axisLeft(yscale_freq)\r\n             .tickValues(yAxisTicks)\r\n             .tickFormat(d3.format(\"d\"));\r\n            \r\n\r\n            FourierMagSvg.append('g')\r\n                         .attr(\"id\",\"x_axis_fourierPhasePlot\")\r\n                         .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n                         .attr(\"pointer-events\", \"none\")\r\n                         .call(x_axis_freq)\r\n\r\n            FourierMagSvg.append('g')\r\n                         .attr(\"id\",\"y_axis_fourierPhasePlot\")\r\n                         .attr(\"transform\",\"translate(\" + this.width/2 + \",0)\")\r\n                         .attr(\"pointer-events\", \"none\")\r\n                         .call(y_axis_freq); \r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        // Get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect().width;\r\n\r\n        let FourierMagSvg = d3.select(\"#svgFourierPhasePlot\")\r\n\r\n        FourierMagSvg.append(\"text\")\r\n                         .attr(\"text-anchor\", \"middle\")  \r\n                         .attr(\"x\",this.width/2)\r\n                         .attr(\"y\",this.height/20)\r\n                         .style(\"font-size\", \"16px\") \r\n                         .style(\"text-decoration\", \"underline\")  \r\n                         .text(\"Fourier Phase Plot\");\r\n\r\n        // First drawing of the axis (default view of 4 terms)\r\n        this.drawAxis(this.height, this.width, this.props.fourierMultiples);\r\n        \r\n    }\r\n\r\n    renderCirclePos(signal, fourierMultiples){\r\n        return(\r\n            <FourierCirclesPhasePos\r\n                signal = {signal}\r\n                fourierMultiples = {fourierMultiples}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderCircleNeg(signal, fourierMultiples){\r\n        return(\r\n            <FourierCirclesPhaseNeg\r\n                signal = {signal}\r\n                fourierMultiples = {fourierMultiples}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n        const signals = this.props.signals;\r\n        const fourierMultiples = this.props.fourierMultiples;\r\n\r\n        this.drawAxis(this.height, this.width, fourierMultiples)\r\n    \r\n           const circleList = []; \r\n           \r\n           for (let i=0; i < this.props.signals.length; i++){\r\n\r\n                if(i ===0){\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i], fourierMultiples) \r\n                    )\r\n                }\r\n                else{\r\n                    circleList.push(\r\n                        this.renderCirclePos(this.props.signals[i], fourierMultiples),\r\n                        this.renderCircleNeg(this.props.signals[i], fourierMultiples)\r\n                    )\r\n                }\r\n               \r\n           }\r\n   \r\n           return( \r\n               <svg>\r\n                  {circleList}\r\n               </svg>\r\n           );\r\n       }\r\n}\r\n\r\n\r\nclass SinePlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"sinePlotsID\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"sinePlotsID\").getBoundingClientRect().width;\r\n\r\n        const svgSinePlot = d3.select(\"#svgSinePlot\")\r\n\r\n         // Create scale\r\n        let xscale = d3.scaleLinear()\r\n                        .domain([0, 2]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n                        .domain([4,-4]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.height, (9/10)*this.height ]);\r\n\r\n        // Add scales to axis\r\n        let x_axis = d3.axisBottom()\r\n                        .scale(xscale);\r\n\r\n        let y_axis = d3.axisLeft()\r\n                        .scale(yscale);\r\n\r\n        svgSinePlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",this.width/2)\r\n                .attr(\"y\",this.height/20)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sine Plots\");\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\", \"translate(0,\" + this.height/2 + \")\")\r\n                .attr(\"pointer-events\", \"none\")\r\n                .call(x_axis);\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .attr(\"pointer-events\", \"none\")\r\n                .call(y_axis)\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n        const signals = this.props.signals;\r\n    \r\n        // \"Overlay all sine plots into one graph\" version\r\n        for(let i = 0; i < signals.length; i++){\r\n\r\n            let lineGenerator = d3.line().curve(d3.curveNatural);\r\n  \r\n            let pathData = lineGenerator(signals[i].values);\r\n    \r\n            //The svg line Path we draw\r\n    \r\n            // If exists, update\r\n            if(document.getElementById(signals[i].pathID)){\r\n\r\n                let strokeWidth\r\n                if(signals[i].highlight){\r\n                    strokeWidth = 4;\r\n                }\r\n                else{\r\n                    strokeWidth = 2;\r\n                }\r\n\r\n                d3.select(\"#\"+signals[i].pathID)\r\n                    .attr(\"d\", pathData)\r\n                    .attr(\"stroke\", signals[i].colour)\r\n                    .attr(\"stroke-width\", strokeWidth)                      \r\n            }\r\n            \r\n            // Draws path if it doesn't exist\r\n            if(!document.getElementById(signals[i].pathID)){\r\n                \r\n                let strokeWidth\r\n                if(signals[i].highlight){\r\n                    strokeWidth = 4;\r\n                }\r\n                else{\r\n                    strokeWidth = 2;\r\n                }\r\n\r\n                d3.select(\"#svgSinePlot\").append(\"path\")\r\n                    .attr(\"id\",signals[i].pathID)\r\n                    .attr(\"d\", pathData)\r\n                    .attr(\"transform\",\"translate(\" + (1/10)*this.width + \")\")\r\n                    .attr(\"stroke\", signals[i].colour)\r\n                    .attr(\"stroke-width\", strokeWidth)\r\n                    .attr(\"fill\", \"none\")\r\n          }\r\n        }\r\n\r\n\r\n        // Appending svg\r\n        // Check if the element 'svg_id' exists. If not, create new svg, append and draw it\r\n        // Not sure if this scales well\r\n\r\n        /* Code for seperate Plots\r\n        for(let i = 0; i < current.length; i++){\r\n\r\n            let svgID  = 'svg_'\r\n            let pathID = 'path_'\r\n            svgID = svgID.concat(i.toString(10))\r\n            pathID = pathID.concat(i.toString(10))\r\n\r\n            let lineGenerator = d3.line()\r\n                                  .curve(d3.curveNatural);\r\n\r\n            let pathData = lineGenerator(current[i].values);\r\n\r\n             // Create scale\r\n            let xscale = d3.scaleLinear()\r\n                        .domain([0, 2]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n            let yscale = d3.scaleLinear()\r\n                        .domain([4,-4]) // This needs to be dynamic\r\n                        .range([ (1/10)*this.height, (9/10)*this.height ]);\r\n\r\n            // Add scales to axis\r\n            let x_axis = d3.axisBottom()\r\n                .scale(xscale);\r\n\r\n            let y_axis = d3.axisLeft()\r\n                .scale(yscale);\r\n\r\n            // For now, if svgID exists, then just redraw\r\n            if(document.getElementById(svgID)){\r\n                d3.select(\"#\"+pathID).attr(\"d\", pathData)  \r\n            }\r\n            \r\n            // If svgID doesn't exist, then add it to the DOM\r\n\r\n            if(!document.getElementById(svgID)){\r\n                //The SVG Container\r\n                const svgSinePlot = d3.select(\"#sinePlotsID\").append(\"svg\")\r\n                .attr(\"id\",svgID)\r\n                .attr(\"width\", \"40vw\")\r\n                .attr(\"height\", \"45vh\")\r\n                .attr(\"style\",\"position: absolute\")\r\n                .attr(\"style\", \"border: 1px solid black\")\r\n\r\n                svgSinePlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",this.width/2)\r\n                .attr(\"y\",this.height/20)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sine Plot \" + i);\r\n\r\n                //The line SVG Path we draw\r\n                svgSinePlot.append(\"path\")\r\n                .attr(\"id\",pathID)\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"stroke\", current[i].colour)\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(0,\" + this.height/2 + \")\")\r\n                .call(x_axis);\r\n                \r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .call(y_axis);\r\n            }          \r\n        }\r\n        */\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass SumPlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.height = 0;\r\n        this.width = 0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Only get dimensions when DOM is loaded\r\n        this.height = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        this.width = document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n\r\n        // Create scale\r\n        let xscale = d3.scaleLinear()\r\n        .domain([0, 2]) // This needs to be dynamic\r\n        .range([ (1/10)*this.width, (9/10)*this.width ]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n        .domain([4,-4]) // This needs to be dynamic\r\n        .range([(1/10)*this.height, (9/10)*this.height ]);\r\n\r\n        // Add scales to axis\r\n        let x_axis = d3.axisBottom()\r\n        .scale(xscale);\r\n\r\n        let y_axis = d3.axisLeft()\r\n        .scale(yscale);\r\n\r\n        const svgSumPlot = d3.select(\"#svgSumPlot\")\r\n\r\n                svgSumPlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",this.width/2)\r\n                .attr(\"y\",this.height/20)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sum of Signals Plot\");\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\", \"translate(0,\" + this.height/2 + \")\")\r\n                .attr(\"pointer-events\", \"none\")\r\n                .call(x_axis);\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \",0)\")\r\n                .attr(\"pointer-events\", \"none\")\r\n                .call(y_axis)\r\n    }\r\n\r\n    render(){\r\n\r\n        let sumSignals = []; \r\n        let plotWidth = 0.8 * this.width;\r\n        // console.log(this.height);\r\n        // console.log(this.width);\r\n\r\n        // This will break if we change plotWidth elsewhere \r\n        for(let k = 0; k < plotWidth; k++){\r\n            sumSignals.push([0,0]);\r\n        }\r\n\r\n        // Looping through all the signals\r\n        for (let i=0; i < this.props.signals.length; i++){\r\n\r\n            // Looping through the signal values\r\n            for(let j=0; j < this.props.signals[i].values.length; j++){\r\n\r\n                //sumSignals[j] = this.props.signals[i].values[j];\r\n                sumSignals[j][0] = this.props.signals[i].values[j][0];\r\n                sumSignals[j][1] += this.props.signals[i].values[j][1];\r\n            }\r\n            \r\n        }\r\n\r\n        // Should scale this to the svg dimenesions rather than hardcoding it with svgContainerHeight\r\n        for (let n =0; n < sumSignals.length; n++){\r\n            sumSignals[n][1] = sumSignals[n][1] - (this.props.signals.length-1)*(this.height/2)\r\n        }\r\n\r\n        let lineGenerator = d3.line()\r\n          .curve(d3.curveNatural);\r\n\r\n        let pathData = lineGenerator(sumSignals);\r\n\r\n        //The svg line Path we draw\r\n\r\n        // If exists, update\r\n        if(document.getElementById(\"path_Sum\")){\r\n            d3.select(\"#\".concat(\"path_Sum\")).attr(\"d\", pathData)  \r\n               \r\n        }\r\n        \r\n        // Draws path if it doesn't exist\r\n        if(!document.getElementById(\"path_Sum\")){\r\n             d3.select(\"#svgSumPlot\").append(\"path\")\r\n                .attr(\"id\",\"path_Sum\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"transform\",\"translate(\" + (1/10)*this.width + \")\")\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class FourierCoefficients extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            signals: [\r\n                /* Example signal object \r\n                {\r\n                    id: 0,\r\n                    amplitude: 1,\r\n                    frequency: 1,\r\n                    values: this.generateSignal(1,1),\r\n                    dragging: false,    \r\n                },\r\n                */\r\n            ],\r\n            demoSignal: 'select',\r\n            fourierMultiples: 4, // 4 is the default view, -4 to 4 multiples of fundamental frequency \r\n        };\r\n        // This binding is necessary to make `this.` work in the callback   \r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseUp = this.handleMouseUp.bind(this);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n        this.handleMouseOverFourier = this.handleMouseOverFourier.bind(this);\r\n        this.handleMouseMoveFourierMag = this.handleMouseMoveFourierMag.bind(this);\r\n        this.handleMouseMoveFourierPhase = this.handleMouseMoveFourierPhase.bind(this);\r\n        this.handleDemoSignal = this.handleDemoSignal.bind(this);\r\n        this.redrawSignal = this.redrawSignal.bind(this);\r\n    }\r\n    \r\n    addSignal(amplitude, phase){\r\n        let signals = this.state.signals;\r\n\r\n        // Colour intensity goes from least intense: rgb(192,192,192) (Silver) to most intense: rgb(0,0,0) (Black)\r\n        const intensity =  (192 - 48*amplitude);\r\n\r\n        // Loop through the current state's signals array\r\n        for(let i = 0; i < signals.length + 1; i++){\r\n\r\n            // Add new signal to end of array if we reach end of array\r\n            if(i === signals.length){\r\n                signals = signals.concat([{       // Just concatenating array of JSON\r\n                    id: signals.length,\r\n                    amplitude: amplitude,                // Should be user input\r\n                    frequency: signals.length,   // Should be user input\r\n                    phase: phase,\r\n                    values: this.generateSignal(amplitude,signals.length,phase),\r\n                    pathID: 'path_'.concat(i.toString(10)), \r\n                    draggingMag: false,    \r\n                    draggingPhasePos: false,    \r\n                    draggingPhaseNeg: false,  \r\n                    colour: rgb(intensity,intensity,intensity),\r\n                    highlight: false,\r\n                },]);\r\n                // console.log(signals)\r\n                break;\r\n            }\r\n\r\n            // If there's a missing ID, insert it to appropriate index\r\n            // e.g. id array: [0, 1, 3]. Therefore missing id 2\r\n            if(i !== signals[i].id){\r\n                let newSignal = {       \r\n                    id: i,\r\n                    amplitude: amplitude,                // Should be user input\r\n                    frequency: i,   // Should be user input\r\n                    phase: phase,\r\n                    values: this.generateSignal(amplitude,i,phase),\r\n                    pathID: 'path_'.concat(i.toString(10)), \r\n                    draggingMag: false,    \r\n                    draggingPhasePos: false,    \r\n                    draggingPhaseNeg: false,  \r\n                    colour: rgb(intensity,intensity,intensity),\r\n                    highlight: false,\r\n                }\r\n\r\n                signals.splice(i, 0, newSignal);\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Once this.setState has been called, it'll call render() to render straight away\r\n        this.setState({\r\n            signals: signals,\r\n        });        \r\n    }\r\n\r\n    removeSignal(signalID){\r\n        // Need to find signal id from the array and delete, then re-update id's\r\n        const signals = this.state.signals;\r\n\r\n        console.log(\"Hi from removeSignal\");    \r\n        console.log(signalID)\r\n        console.log(\"Before: \", signals);\r\n\r\n        let index;\r\n        for(index = 0; index < signals.length; index++){\r\n            if(signals[index].id === signalID){\r\n                break\r\n            }\r\n        }\r\n        console.log(index)\r\n        \r\n        // Find the pathID and delete from DOM\r\n        d3.select(\"#\"+signals[index].pathID).remove();\r\n        \r\n        // Find the signal in the signals array and delete\r\n        signals.splice(index,1)\r\n        \r\n        console.log(\"After:\", signals);\r\n\r\n        this.setState({\r\n            signals: signals,\r\n        });\r\n        console.log(this.state.signals);\r\n\r\n    \r\n    }\r\n    \r\n    animateSignal(signalID){\r\n\r\n        const signals = this.state.signals;\r\n        console.log(signalID)    \r\n\r\n        // finding the signal\r\n        let index;\r\n        for(index = 0; index < signals.length; index++){\r\n            if(signals[index].id === signalID){\r\n                break\r\n            }\r\n        }\r\n\r\n        window.requestAnimationFrame(this.redrawSignal.bind(this, signals, index));\r\n        \r\n    }\r\n\r\n    redrawSignal(signals, index){\r\n        /* Remove the signal image */\r\n\r\n        // Find the pathID and delete from DOM\r\n        d3.select(\"#\"+signals[index].pathID).remove();\r\n        \r\n        signals[index].phase += 1; \r\n\r\n        this.setState({\r\n            signals: signals,\r\n        });\r\n    }\r\n\r\n\r\n    generateSignal(amplitude, frequency, phase){\r\n        // Generating path data\r\n        let points = [];\r\n        // This assumes that sumPlot and sinePlots have the same dimensions, since generateSignal() is called from those plots\r\n        const divHeight = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        const plotWidth = 0.8 * document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n        // console.log(\"Plot Width\",plotWidth)\r\n        // console.log(\"Div Height\", divHeight)\r\n        let scale = -divHeight/10;\r\n        let x_offset = 0;\r\n        let y_offset = 0;\r\n\r\n        // let Fs = 80;\r\n        let Ts = Math.PI / (plotWidth/4);\r\n\r\n        /* Calculation Reference\r\n        // Assuming the plot is 800x800\r\n        // 1 period = 1 second\r\n        // 1 period = 400 pixels => Ts = 400 samples per second\r\n        // 1 Hz = 2pi radians\r\n\r\n        // Sampling frequency = samples/second\r\n        // 1 sample per 1/400 second (Ts = 1/400)\r\n        // Fs = 2pi * (1/400)\r\n        // Fs = pi / 200\r\n\r\n        // Frequency is in Hz\r\n        // This is bascially an inverse FFT \r\n        // i is basically our t (1 unit of time)\r\n        */\r\n        for(let i = x_offset; i< plotWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude*Math.sin(Ts*frequency*i + (phase * (Math.PI / 180) )) + (divHeight/2 + y_offset)];\r\n        }\r\n        // console.log(\"Plot Length\", points.length)\r\n\r\n        return points;\r\n    }\r\n\r\n    generateDC(amplitude){\r\n        let points = [];\r\n        const divHeight = document.getElementById(\"svgSumPlot\").getBoundingClientRect().height;\r\n        const plotWidth = 0.8 * document.getElementById(\"svgSumPlot\").getBoundingClientRect().width;\r\n        let scale = - divHeight/10;\r\n\r\n        let x_offset = 0;\r\n        let y_offset = 0;\r\n\r\n        for(let i = x_offset; i< plotWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude + (divHeight/2 + y_offset)];\r\n        }\r\n \r\n        return points\r\n    }\r\n\r\n    updateDials(){\r\n        const signals = this.state.signals;\r\n\r\n        for(let i = 0; i< signals.length; i++){\r\n            document.getElementById(\"signal\" + signals[i].id + \"_AmpText\").value = signals[i].amplitude;\r\n            document.getElementById(\"signal\" + signals[i].id + \"_FreqText\").value = signals[i].frequency;\r\n        }\r\n    }\r\n\r\n    handleChange(event){\r\n\r\n        console.log(event)\r\n\r\n        const signals = this.state.signals;\r\n        const inputType = event.target.getAttribute('input_type');\r\n        const signalID = event.target.getAttribute('signal_id'); // Signal ID Number\r\n        let value = parseFloat(event.target.value);   \r\n\r\n        // Text Form can currently exceed the maximum limit of 10, should limit?\r\n\r\n        if((inputType === \"AmpDial\") || (inputType === \"AmpText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                // DC Case\r\n                if(signalID === 0){\r\n                    signals[signalID].amplitude = value; \r\n                    signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n                    document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n\r\n                    const intensity =  (192 - 48*value);\r\n                    signals[signalID].colour = rgb(intensity,intensity,intensity);\r\n                }\r\n                // All Other cases\r\n                else{\r\n                    signals[signalID].amplitude = value;                 \r\n                    signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                    document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n\r\n                    const intensity =  (192 - 48*value);\r\n                    signals[signalID].colour = rgb(intensity,intensity,intensity);\r\n                }     \r\n            }\r\n        }\r\n        else if ((inputType === \"PhaseDial\") || (inputType === \"PhaseText\")){\r\n            console.log(\"HELLO\")\r\n            console.log(signals[signalID].amplitude)\r\n            console.log(signals[signalID].phase)\r\n\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                // DC Case\r\n                if(signalID === 0){\r\n                    signals[signalID].phase = value; \r\n                    signals[signalID].values = this.generateDC(signals[signalID].amplitude);\r\n                    document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n                }\r\n                 // All Other cases\r\n                else{\r\n                    signals[signalID].phase = value; \r\n                    signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                    document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n                }\r\n            }\r\n        }     \r\n\r\n        this.setState({\r\n                signals: signals,   \r\n            }   \r\n        );\r\n\r\n    }\r\n    \r\n    handleMouseDown(e){\r\n        console.log(\"clicked\")\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation()\r\n\r\n        const elementID = e.target.getAttribute('id');\r\n        \r\n        // sanity check\r\n        if(elementID !== null){\r\n\r\n            const condition = elementID.includes(\"circle_\");\r\n\r\n            if(condition){\r\n\r\n                console.log('circle clicked')\r\n\r\n                const signals = this.state.signals;\r\n                const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n                const circleID = e.target.getAttribute('id'); // Circle ID \r\n                \r\n                // Finding signal array's index from signal id\r\n                let index;\r\n                for(index = 0; index < signals.length; index++){\r\n                    if(signals[index].id === signalID){\r\n                        \r\n                        break\r\n                    }\r\n                }\r\n                \r\n                if(circleID.includes(\"circle_mag\")){\r\n                    signals[index].draggingMag = true;\r\n                } \r\n                if(circleID.includes(\"circle_phase_+\")){\r\n                    signals[index].draggingPhasePos = true;\r\n                } \r\n                if(circleID.includes(\"circle_phase_-\")){\r\n                    signals[index].draggingPhaseNeg = true;\r\n                } \r\n\r\n                this.setState({\r\n                    signals: signals,   \r\n                    }\r\n                );   \r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseUp(e){\r\n        console.log(\"click released\")\r\n\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n\r\n        const signals = this.state.signals;\r\n\r\n        const elementID = e.target.getAttribute('id');\r\n\r\n        // sanity check\r\n        if(elementID !== null){\r\n\r\n            // set all signals dragging to false\r\n            for(let n = 0; n < signals.length; n++){\r\n                signals[n].draggingMag = false;\r\n                signals[n].draggingPhasePos = false;\r\n                signals[n].draggingPhaseNeg = false;\r\n            }\r\n                \r\n                this.setState({\r\n                    signals: signals,   \r\n                    }\r\n                );\r\n\r\n                console.log(\"circle click released\")\r\n            }\r\n    }\r\n\r\n    // Base Mouse move function. Used in Frequency Domain. Not currently in use in this .js file\r\n    handleMouseMove(e) {\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n        \r\n        let index;\r\n        for(index = 0; index < signals.length; index++){\r\n            if(signals[index].id === signalID){\r\n                break\r\n            }\r\n        }\r\n\r\n        //If we are dragging\r\n          if (signals[index].dragging) {\r\n              e.preventDefault();\r\n\r\n              console.log(e)\r\n              console.log(e.target)\r\n              console.log(\"clientX:\",e.clientX)\r\n              console.log(\"clientY:\",e.clientY)\r\n              // console.log(e.target.parentNode.parentNode)\r\n            let  rect = e.target.parentNode.parentNode.getBoundingClientRect();  \r\n\r\n            console.log(rect.left);\r\n            console.log(rect.top);\r\n\r\n\r\n            // Maybe should seperate coordinates and freq/amp values\r\n             signals[index].frequency = (e.clientX - rect.left - 400) / 100;\r\n             signals[index].amplitude = - (e.clientY - rect.top - 400) / 100;\r\n             signals[index].values = this.generateSignal(signals[index].amplitude, signals[index].frequency, signals[index].phase);\r\n\r\n            // We should set position limits\r\n\r\n            console.log(signals[index].frequency)\r\n            console.log(signals[index].amplitude)\r\n\r\n            console.log(this)\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n                }\r\n            );  \r\n        }\r\n    }\r\n\r\n    handleMouseMoveFourierMag(e) {\r\n\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n        \r\n        const elementID = e.target.getAttribute('id');\r\n\r\n        // sanity check\r\n        if(elementID !== null){\r\n\r\n                const signals = this.state.signals;\r\n                \r\n                // Grabbing signal id number doesn't work if event is outside of the div element \r\n                // const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n\r\n                // Find the signal that is dragging \r\n                let index;\r\n                let dragging = false;\r\n                for(let n = 0; n < signals.length; n++){\r\n                    if(signals[n].draggingMag === true){\r\n                        \r\n                        dragging = true;\r\n                        index = n;\r\n                    }\r\n                }\r\n\r\n                console.log(index);\r\n                \r\n                //If we are dragging\r\n                if (dragging) {\r\n                    // e.preventDefault();\r\n\r\n                    console.log(\"im dragging\")\r\n                    console.log(signals[index].draggingMag);\r\n                    // console.log(e.target)\r\n                    let  rect = document.getElementById(\"fourierMagPlotsID\").getBoundingClientRect();  \r\n\r\n                    let divHeight = rect.height;\r\n                    let divWidth = rect.width;\r\n                    let plotHeight = 0.8*divHeight;\r\n                    let plotWidth = 0.8*divWidth;\r\n\r\n                    // Divide by 8: max axis size (-4 to 4)\r\n                    let amplitude = - (e.clientY - rect.top - divHeight/2) / (plotHeight/8);\r\n                    if(amplitude > 4){\r\n                        amplitude = 4;\r\n                    }\r\n                    if(amplitude < 0){\r\n                        amplitude = 0;\r\n                    }\r\n\r\n                    // Maybe should seperate coordinates and freq/amp values\r\n                    signals[index].frequency = signals[index].id;\r\n                    signals[index].amplitude = amplitude;    \r\n                    signals[index].values = this.generateSignal(signals[index].amplitude, signals[index].frequency, signals[index].phase);\r\n                    \r\n                    const intensity =  (192 - 48*amplitude)\r\n                    signals[index].colour = rgb(intensity,intensity,intensity);\r\n\r\n                    // Checking if signal is the DC value\r\n                    if(index === 0){\r\n                        signals[index].values = this.generateDC(signals[index].amplitude);\r\n                    }\r\n\r\n                    this.setState({\r\n                        signals: signals,   \r\n                        }\r\n                    );  \r\n                }\r\n\r\n            //}\r\n        }\r\n\r\n        \r\n    }\r\n    \r\n    handleMouseMoveFourierPhase(e) {\r\n\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n\r\n        const signals = this.state.signals;\r\n\r\n        const elementID = e.target.getAttribute('id');\r\n\r\n        // Sanity check\r\n        if(elementID !== null){\r\n\r\n            // Find the signal that is dragging \r\n\r\n            // Grabbing signal id number doesn't work if event is outside of the div element \r\n            // const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n\r\n            let index;\r\n            let draggingPhasePos = false;\r\n            let draggingPhaseNeg = false;\r\n            for(let n = 0; n < signals.length; n++){\r\n                if(signals[n].draggingPhasePos === true ){                        \r\n                    draggingPhasePos = true;\r\n                    index = n;\r\n                }\r\n                if(signals[n].draggingPhaseNeg === true){                      \r\n                    draggingPhaseNeg = true;\r\n                    index = n;\r\n                }\r\n            }\r\n\r\n            //If we are dragging\r\n            if(draggingPhasePos || draggingPhaseNeg){\r\n\r\n                let rect = document.getElementById(\"fourierPhasePlotsID\").getBoundingClientRect();  \r\n\r\n                let divHeight = rect.height;\r\n                let divWidth = rect.width;\r\n                let plotHeight = 0.8*divHeight;\r\n                let plotWidth = 0.8*divWidth;\r\n\r\n                // Maybe should seperate coordinates and freq/amp values\r\n\r\n                let circleID;\r\n                console.log(index)\r\n                if(draggingPhasePos){\r\n                    circleID = \"circle_phase_+\".concat(index.toString(10)); \r\n                }\r\n                if(draggingPhaseNeg){\r\n                    circleID = \"circle_phase_-\".concat(index.toString(10)); \r\n                }\r\n                \r\n                console.log(circleID)\r\n                const circleCX = parseInt(document.getElementById(circleID).getAttribute(\"cx\"))\r\n                console.log(circleCX) \r\n\r\n                // Positive Circle\r\n                if(circleCX >= 0){\r\n                    let phase = parseInt( - (e.clientY - rect.top - divHeight/2) / (plotHeight/360));\r\n                    if(phase > 180){\r\n                        phase = 180;\r\n                    }\r\n                    if(phase < -180){\r\n                        phase = -180;\r\n                    }\r\n                    signals[index].phase = phase;\r\n                } \r\n\r\n                // Negative Circle\r\n                else if(circleCX < 0){\r\n                    let phase = parseInt( (e.clientY - rect.top - divHeight/2) / (plotHeight/360));\r\n                    if(phase > 180){\r\n                        phase = 180;\r\n                    }\r\n                    if(phase < -180){\r\n                        phase = -180;\r\n                    }\r\n                    signals[index].phase = phase;\r\n                } \r\n\r\n                console.log(signals[index].phase)\r\n                signals[index].frequency = signals[index].id; \r\n                signals[index].values = this.generateSignal(signals[index].amplitude, signals[index].frequency, signals[index].phase);\r\n\r\n                // Checking if signal is the DC value\r\n                if(index === 0){\r\n                    signals[index].values = this.generateDC(signals[index].amplitude);\r\n                }\r\n\r\n                this.setState({\r\n                    signals: signals,   \r\n                    }\r\n                );  \r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseOverFourier(e){\r\n        // console.log(e);\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n        \r\n        const elementID = e.target.getAttribute('id');\r\n        console.log(elementID);\r\n        \r\n        // sanity check\r\n        if(elementID !== null){\r\n\r\n            const condition = elementID.includes(\"circle_\");\r\n            const signals = this.state.signals;\r\n\r\n            // if a mouseover was over a circle \r\n            if(condition){\r\n\r\n                console.log('circle mouse over!')\r\n                \r\n                const signalID = parseInt(e.target.getAttribute('signal_id')); // Signal ID Number\r\n                const circleID = e.target.getAttribute('id'); // Circle ID \r\n\r\n                // Finding signal array's index from signal id\r\n                let index;\r\n                for(index = 0; index < signals.length; index++){\r\n                    if(signals[index].id === signalID){\r\n                         \r\n                        break\r\n                    }\r\n                }\r\n                signals[index].highlight = true;\r\n            }\r\n\r\n            // if the mouseover is not over a circle\r\n            else {\r\n                // Set all highlight to false\r\n                for(let n = 0; n < signals.length; n++){\r\n                    signals[n].highlight = false;\r\n                }  \r\n            }\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n            });\r\n        }\r\n    }\r\n\r\n    toggleView(e){\r\n        console.log(e.target.getAttribute('id'))\r\n\r\n        const checkBoxID = e.target.getAttribute('id');\r\n        \r\n        // Set Fourier Plots to Default View\r\n        if(checkBoxID === \"defaultViewCheckBox\"){\r\n            document.getElementById('fullViewCheckBox').checked = false;\r\n            \r\n            this.setState({\r\n                fourierMultiples: 4,\r\n            });\r\n        }\r\n\r\n        // Set Fourier Plots to Full View\r\n        if(checkBoxID === \"fullViewCheckBox\"){\r\n            document.getElementById('defaultViewCheckBox').checked = false;\r\n        \r\n            const fourierMultiples = this.state.signals.length - 1; // -1 because of DC term\r\n\r\n            // Only change to full view if there are more than 4 Fourier Terms\r\n            if(fourierMultiples > 4){\r\n                this.setState({\r\n                    fourierMultiples: fourierMultiples,\r\n                });\r\n            }\r\n            else{\r\n                this.setState({\r\n                    fourierMultiples: 4,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    emptyPlots(){\r\n        let signals = this.state.signals;\r\n\r\n        for(let i = 0; i< signals.length; i++){                 \r\n\r\n            d3.select(\"#\"+signals[i].pathID).remove();\r\n        }  \r\n\r\n        return signals = [];\r\n    }\r\n\r\n    handleDemoSignal(e){\r\n\r\n        let signals = this.state.signals;\r\n        const demoSignal = e.target.value;\r\n\r\n\r\n        if(demoSignal === 'empty'){\r\n            signals = this.emptyPlots();\r\n        }\r\n\r\n        // Note: If you make multiple setState() calls, only the last call will run (the prior ones won't run)\r\n        // Hence why here, we instead of repeatedly calling addSignal(), we explicitly generate the signals array\r\n        // setState() is asynchronous and are batched for performance gains. \r\n        \r\n        if(demoSignal === 'sine'){\r\n \r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            let amplitude = 0;\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,\r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                highlight: false,\r\n            },])\r\n\r\n            // Generating other sine waves\r\n            amplitude = 1;\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,                \r\n                frequency: signals.length,   \r\n                phase: 0,\r\n                values: this.generateSignal(amplitude,signals.length,0),\r\n                pathID: 'path_1', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false, \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                highlight: false,\r\n            },])\r\n        }\r\n\r\n\r\n        if(demoSignal === 'even'){\r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            let amplitude = 0\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,    \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                highlight: false,\r\n            },])\r\n\r\n            // Generating other sine waves\r\n            for(let i = 0; i < 4; i++){\r\n                // Odd\r\n                if((i % 2) !== 0 ){\r\n                    amplitude = 1\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(amplitude,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,     \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                    },])\r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    amplitude = 0\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(amplitude,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,  \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if(demoSignal === 'odd'){\r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            let amplitude = 0\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,    \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                highlight: false,\r\n            },])\r\n\r\n            // Generating other sine waves\r\n            for(let i = 0; i < 4; i++){\r\n                // Odd\r\n                if((i % 2) !== 0 ){\r\n                    amplitude = 0\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(amplitude,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,   \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                    },])\r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    amplitude = 1\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(amplitude,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,   \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if(demoSignal === 'triangle'){\r\n            signals = this.emptyPlots();\r\n\r\n            let amplitude = 0\r\n            // Generating DC signal\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0',  \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,     \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                highlight: false,\r\n            },])\r\n\r\n            // Generating other sine waves\r\n            let alternate = true;\r\n            for(let i = 1; i < 20; i++){\r\n                // Odd\r\n                if((i % 2) !== 0 ){\r\n                    amplitude = (8/Math.pow(Math.PI,2))*(1/Math.pow(i,2));\r\n\r\n                    // Non-phase shifted harmonic\r\n                    if(alternate){\r\n                        signals = signals.concat([{       \r\n                            id: signals.length,\r\n                            amplitude: amplitude,                \r\n                            frequency: signals.length,   \r\n                            phase: 0,\r\n                            values: this.generateSignal(amplitude,signals.length,0),\r\n                            pathID: 'path_'.concat(i.toString(10)), \r\n                            draggingMag: false,    \r\n                            draggingPhasePos: false, \r\n                            draggingPhaseNeg: false,   \r\n                            colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                            highlight: false,\r\n                        },])\r\n                        alternate = !alternate; \r\n                    }\r\n                    // Phase shifted harmonic\r\n                    else if(!alternate){\r\n                        signals = signals.concat([{       \r\n                            id: signals.length,\r\n                            amplitude: amplitude,                \r\n                            frequency: signals.length,   \r\n                            phase: 180,\r\n                            values: this.generateSignal(amplitude,signals.length, 180),\r\n                            pathID: 'path_'.concat(i.toString(10)), \r\n                            draggingMag: false,    \r\n                            draggingPhasePos: false, \r\n                            draggingPhaseNeg: false,    \r\n                            colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                            highlight: false,\r\n                        },])\r\n                        alternate = !alternate; \r\n                    }    \r\n                    \r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    amplitude = 0;\r\n                    \r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: 0,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(0,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if(demoSignal === 'square'){\r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            let amplitude = 0\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,  \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                highlight: false,\r\n            },])\r\n\r\n            // Generating other sine waves\r\n\r\n            for(let i = 1; i < 25; i++){\r\n                // Odd\r\n                if((i % 2) !== 0 ){\r\n                    \r\n                    amplitude = (4/Math.PI)*(1/i);\r\n\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(amplitude,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,     \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                    },])    \r\n\r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n\r\n                    amplitude = 0\r\n\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(amplitude,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if(demoSignal === 'sawtooth'){\r\n            signals = this.emptyPlots();\r\n\r\n            // Generating DC signal\r\n            let amplitude = 0\r\n            signals = signals.concat([{       \r\n                id: signals.length,\r\n                amplitude: amplitude,               \r\n                frequency: signals.length,  \r\n                phase: 0,\r\n                values: this.generateDC(amplitude,signals.length,0),\r\n                pathID: 'path_0', \r\n                draggingMag: false,    \r\n                draggingPhasePos: false, \r\n                draggingPhaseNeg: false,     \r\n                colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                highlight: false,\r\n            },])\r\n\r\n            // Generating other sine waves\r\n\r\n            for(let i = 1; i < 25; i++){\r\n\r\n                amplitude = (4/Math.PI)*(1/i);\r\n\r\n                // Odd\r\n                if((i % 2) !== 0 ){    \r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 180,\r\n                        values: this.generateSignal(amplitude,signals.length,180),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                    },])    \r\n                }\r\n                // Even\r\n                if((i % 2) === 0 ){\r\n                    signals = signals.concat([{       \r\n                        id: signals.length,\r\n                        amplitude: amplitude,                \r\n                        frequency: signals.length,   \r\n                        phase: 0,\r\n                        values: this.generateSignal(amplitude,signals.length,0),\r\n                        pathID: 'path_'.concat(i.toString(10)), \r\n                        draggingMag: false,    \r\n                        draggingPhasePos: false, \r\n                        draggingPhaseNeg: false,    \r\n                        colour: rgb((192 - 48*amplitude), (192 - 48*amplitude),(192 - 48*amplitude)),\r\n                        highlight: false,\r\n                    },])\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            signals: signals,\r\n            demoSignal: demoSignal,\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n    const current = this.state.signals;\r\n    const fourierMultiples = this.state.fourierMultiples;\r\n\r\n    return (\r\n            <div className = {styles.container}>\r\n\r\n                <div className = {styles.timePlots} id = \"timePlotsID\">\r\n                    <div className = {styles.sinePlots} id =\"sinePlotsID\">\r\n                        <svg id=\"svgSinePlot\" width=\"40vw\" height=\"45vh\" \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black'\r\n                                }}> \r\n                            <SinePlot\r\n                                signals = {current}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                    <div className = {styles.sumPlots} id =\"sumPlotsID\">\r\n                        <svg id=\"svgSumPlot\" width=\"40vw\" height=\"45vh\" \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black'\r\n                                }}> \r\n                            <SumPlot\r\n                                signals = {current}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className = {styles.otherPlots}>\r\n\r\n                    <div className = {styles.fourierMagPlots} id =\"fourierMagPlotsID\">\r\n                        <svg id=\"svgFourierMagPlot\" width=\"40vw\" height=\"45vh\"  \r\n                        onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                        onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                        onMouseMove = {(event) => this.handleMouseMoveFourierMag(event)}\r\n                        onMouseOver = {(event) => this.handleMouseOverFourier(event)}\r\n\r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black',\r\n                                \r\n                                }}> \r\n                                \r\n                                \r\n                        \r\n                            <FourierMagPlot\r\n                                signals = {current}\r\n                                fourierMultiples = {fourierMultiples}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className = {styles.fourierPhasePlots} id =\"fourierPhasePlotsID\">\r\n                        <svg id=\"svgFourierPhasePlot\" width=\"40vw\" height=\"45vh\"\r\n                            onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                            onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                            onMouseMove = {(event) => this.handleMouseMoveFourierPhase(event)}  \r\n                            onMouseOver = {(event) => this.handleMouseOverFourier(event)}\r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black',\r\n                                \r\n                                }}> \r\n                        \r\n                            <FourierPhasePlot\r\n                                signals = {current}\r\n                                fourierMultiples = {fourierMultiples}\r\n                            />\r\n                        </svg>\r\n                    </div>         \r\n                    \r\n                </div>\r\n                <div className = {styles.controls}>\r\n                    \r\n                        <Controls\r\n                            signals = {current}\r\n                            demoSignal = {this.state.demoSignal}\r\n                            onChange = {(event) => this.handleChange(event)}\r\n                            onAdd = {(amplitude, phase) => this.addSignal(amplitude, phase)}\r\n                            onRemove = {(signalID) => this.removeSignal(signalID)}\r\n                            onAnimate = {(signalID) => this.animateSignal(signalID)}\r\n                            onDemoSignal = {(event) => this.handleDemoSignal(event)}\r\n                            onToggleView = {(event) => this.toggleView(event)}\r\n\r\n                        />\r\n                    \r\n                </div>\r\n            </div>\r\n      );\r\n    }\r\n  }","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styles from './FrequencyDomain.module.css';\r\nimport * as d3 from \"d3\";\r\n\r\nconst svgContainerWidth = 800;\r\nconst svgContainerHeight = 800;\r\n\r\nfunction Dials(props) {\r\n    return(\r\n        <div className={styles.signal_container}>\r\n            <div className={styles.signal_info}>\r\n                <div>ID: {props.signal.id}</div>\r\n                <button id = \"remove-signal\" onClick={(i) => props.onRemove(props.signal.id)}> Remove Signal </button>\r\n            </div>\r\n            <div className={styles.signal_props}>\r\n                <div>Amplitude: {props.signal.amplitude}</div>\r\n                <div>Frequency: {props.signal.frequency}</div>\r\n                <div>Phase: {props.signal.phase}</div>\r\n            </div>\r\n            <div className = {styles.signal_dials}>\r\n                <div>\r\n                    <input \r\n                    id = {\"signal\" + props.signal.id + \"_AmpDial\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpDial\"}\r\n                    type =\"range\" \r\n                    min={-5} \r\n                    max ={5} \r\n                    value = {props.signal.amplitude} \r\n                    step={0.1}\r\n                    onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                    id = {\"signal\" + props.signal.id + \"_AmpText\" }\r\n                    signal_id = {props.signal.id}\r\n                    input_type = {\"AmpText\"}\r\n                    type = \"number\"  \r\n                    min = {-5}\r\n                    max = {5}\r\n                    onChange={props.onChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        id = {\"signal\" + props.signal.id + \"_FreqDial\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"FreqDial\"}\r\n                        type =\"range\" \r\n                        min={-4} \r\n                        max ={4} \r\n                        value = {props.signal.frequency} \r\n                        step={0.1}\r\n                        onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                        id = {\"signal\" + props.signal.id + \"_FreqText\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"FreqText\"}\r\n                        type = \"number\"  \r\n                        min = {-4}\r\n                        max = {4}\r\n                        onChange={props.onChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        id = {\"signal\" + props.signal.id + \"_PhaseDial\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseDial\"}\r\n                        type =\"range\" \r\n                        min={-180} \r\n                        max ={180} \r\n                        value = {props.signal.phase} \r\n                        step={1}\r\n                        onChange={props.onChange}\r\n                    /> \r\n                    <input\r\n                        id = {\"signal\" + props.signal.id + \"_PhaseText\" }\r\n                        signal_id = {props.signal.id}\r\n                        input_type = {\"PhaseText\"}\r\n                        type = \"number\"  \r\n                        min = {-180}\r\n                        max = {180}\r\n                        onChange={props.onChange}\r\n                    />\r\n                </div>        \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Controls extends React.Component {\r\n\r\n    renderDial(signal){\r\n        return(\r\n            <Dials\r\n                signal = {signal}\r\n                onChange = {(event) => this.props.onChange(event)}\r\n                onRemove = {(i) => this.props.onRemove(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n        const signalList = []; \r\n        for (let i=0; i < this.props.signals.length; i++){\r\n            signalList.push(\r\n                <div key={\"signal\" + this.props.signals[i].id}> \r\n                    {this.renderDial(this.props.signals[i])} \r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            <div className = {styles.dials} >\r\n                {signalList}\r\n                <button id = \"add-signal\" align-content = \"center\" onClick={() => this.props.onAdd()}> Add New Signal </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction Circles(props) {\r\n        return(\r\n            <circle\r\n                id = {\"circle_\"+props.signal.id}\r\n                signal_id = {props.signal.id}\r\n                cx = {(props.signal.frequency)* (800/8)}\r\n                cy = {(props.signal.amplitude)*(800/8)}\r\n                transform=\"translate(400,400) scale(1,-1)\"\r\n                r = {20}\r\n                fill = \"black\"\r\n                stroke = \"black\"\r\n                strokeWidth=\"1\"\r\n                onMouseDown={props.onMouseDown}\r\n                onMouseUp={props.onMouseUp}\r\n                onMouseOut={props.onMouseUp}\r\n                onMouseMove={props.onMouseMove}\r\n            />\r\n        );\r\n    \r\n}\r\n\r\n\r\nclass SinePlot extends React.Component {\r\n    render(){\r\n        const current = this.props.signals;\r\n    \r\n        // Appending svg\r\n        // Check if the element 'svg_id' exists. If not, create new svg, append and draw it\r\n        // Not sure if this scales well \r\n\r\n        for(let i = 0; i < current.length; i++){\r\n\r\n            let svgID  = 'svg_'\r\n            let pathID = 'path_'\r\n            svgID = svgID.concat(i.toString(10))\r\n            pathID = pathID.concat(i.toString(10))\r\n\r\n            let lineGenerator = d3.line()\r\n                                  .curve(d3.curveNatural);\r\n\r\n            let pathData = lineGenerator(current[i].values);\r\n\r\n             // Create scale\r\n            let xscale = d3.scaleLinear()\r\n                        .domain([0, 2]) // This needs to be dynamic\r\n                        .range([50, 750]);\r\n\r\n            let yscale = d3.scaleLinear()\r\n                        .domain([3.5,-3.5]) // This needs to be dynamic\r\n                        .range([50, 750]);\r\n\r\n            // Add scales to axis\r\n            let x_axis = d3.axisBottom()\r\n                .scale(xscale);\r\n\r\n            let y_axis = d3.axisLeft()\r\n                .scale(yscale);\r\n\r\n            // For now, if svgID exists, then just redraw\r\n            if(document.getElementById(svgID)){\r\n                d3.select(\"#\"+pathID).attr(\"d\", pathData)  \r\n            }\r\n            \r\n            // If svgID doesn't exist, then add it to the DOM\r\n\r\n            if(!document.getElementById(svgID)){\r\n                //The SVG Container\r\n                const svgSinePlot = d3.select(\"#sinePlotsID\").append(\"svg\")\r\n                .attr(\"id\",svgID)\r\n                .attr(\"width\", svgContainerWidth)\r\n                .attr(\"height\", svgContainerHeight)\r\n                .attr(\"transform\",\"translate(10)\")\r\n                .attr(\"style\",\"position: absolute\")\r\n                .attr(\"style\", \"border: 1px solid black\")\r\n                .attr(\"top\",\"100px\")\r\n                .attr(\"left\",\"50px\")\r\n\r\n                svgSinePlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",400)\r\n                .attr(\"y\",30)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sine Plot \" + i);\r\n\r\n                //The line SVG Path we draw\r\n                svgSinePlot.append(\"path\")\r\n                .attr(\"id\",pathID)\r\n                .attr(\"transform\",\"translate(50)\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"stroke\", \"blue\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n\r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(0,400)\")\r\n                .call(x_axis);\r\n                \r\n                svgSinePlot.append('g')\r\n                .attr(\"transform\",\"translate(50,0)\")\r\n                .call(y_axis);\r\n            }          \r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport class FrequencyPlot extends React.Component {\r\n\r\n    renderCircle(signal){\r\n        return(\r\n            <Circles\r\n                signal = {signal}\r\n                onMouseDown = {(event) => this.props.onMouseDown(event)}\r\n                onMouseUp = {(event) => this.props.onMouseUp(event)}\r\n                onMouseOut = {(event) => this.props.onMouseUp(event)}\r\n                onMouseMove = {(event) => this.props.onMouseMove(event)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n    const signals = this.props.signals;\r\n     \r\n        let freqSvg = d3.select(\"#svgFreqPlot\")\r\n\r\n        const circleList = []; \r\n       \r\n        for (let i=0; i < this.props.signals.length; i++){\r\n            circleList.push(\r\n                    this.renderCircle(this.props.signals[i])\r\n            )\r\n        }\r\n        \r\n        // Should probably check both axis if they exist before appending\r\n        if(!document.getElementById(\"x_axis_freqPlot\")){\r\n\r\n            // Create Axis for Frequency Plot\r\n            let xscale_freq = d3.scaleLinear()\r\n                                .domain([-3.5, 3.5]) // This needs to be dynamic\r\n                                .range([50, 750]);\r\n\r\n            let yscale_freq = d3.scaleLinear()\r\n                                .domain([3.5,-3.5]) // This needs to be dynamic\r\n                                .range([50, 750]);\r\n\r\n            // Add scales to axis\r\n            let x_axis_freq = d3.axisBottom()\r\n                                .scale(xscale_freq);\r\n\r\n            let y_axis_freq = d3.axisLeft()\r\n                                .scale(yscale_freq);\r\n            \r\n            freqSvg.append(\"text\")\r\n                    .attr(\"text-anchor\", \"middle\")  \r\n                    .attr(\"x\",400)\r\n                    .attr(\"y\",30)\r\n                    .style(\"font-size\", \"16px\") \r\n                    .style(\"text-decoration\", \"underline\")  \r\n                    .text(\"Frequency Domain Plot\");\r\n                    \r\n            freqSvg.append('g')\r\n                    .attr(\"id\",\"x_axis_freqPlot\")\r\n                    .attr(\"transform\",\"translate(0,400)\")\r\n                    .call(x_axis_freq);\r\n\r\n            freqSvg.append('g')\r\n                    .attr(\"id\",\"y_axis_freqPlot\")\r\n                    .attr(\"transform\",\"translate(400,0)\")\r\n                    .call(y_axis_freq); \r\n        }\r\n\r\n        return( \r\n            <svg>\r\n               {circleList}\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n\r\nclass SumPlot extends React.Component {\r\n\r\n    render(){\r\n\r\n        let sumSignals = []; \r\n        let svgContainerHeight = 800;\r\n        let plotWidth = 700;\r\n\r\n        // This will break if we change plotWidth elsewhere \r\n        for(let k = 0; k < plotWidth; k++){\r\n            sumSignals.push([0,0]);\r\n        }\r\n\r\n        // Looping through all the signals\r\n        for (let i=0; i < this.props.signals.length; i++){\r\n\r\n            // Looping through the signal values\r\n            for(let j=0; j < this.props.signals[i].values.length; j++){\r\n\r\n                //sumSignals[j] = this.props.signals[i].values[j];\r\n                sumSignals[j][0] = this.props.signals[i].values[j][0];\r\n                sumSignals[j][1] += this.props.signals[i].values[j][1];\r\n            }\r\n            \r\n        }\r\n\r\n        // There is a way to scale this to the svg dimenesions rather than hardcoding it\r\n        for (let n =0; n < sumSignals.length; n++){\r\n            sumSignals[n][1] = sumSignals[n][1] - (this.props.signals.length-1)*(svgContainerHeight/2)\r\n        }\r\n\r\n        let lineGenerator = d3.line()\r\n          .curve(d3.curveNatural);\r\n\r\n        let pathData = lineGenerator(sumSignals);\r\n\r\n        // Create scale\r\n        let xscale = d3.scaleLinear()\r\n        .domain([0, 2]) // This needs to be dynamic\r\n        .range([50, 750]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n        .domain([3.5,-3.5]) // This needs to be dynamic\r\n        .range([50, 750]);\r\n\r\n        // Add scales to axis\r\n        let x_axis = d3.axisBottom()\r\n        .scale(xscale);\r\n\r\n        let y_axis = d3.axisLeft()\r\n        .scale(yscale);\r\n\r\n        //The line SVG Path we draw\r\n\r\n        // If exists, update\r\n        if(document.getElementById(\"path_Sum\")){\r\n            d3.select(\"#\"+\"path_Sum\").attr(\"d\", pathData)  \r\n               \r\n        }\r\n        \r\n        // Draws path if it doesn't exist\r\n        if(!document.getElementById(\"path_Sum\")){\r\n             d3.select(\"#svgSumPlot\").append(\"path\")\r\n                .attr(\"id\",\"path_Sum\")\r\n                .attr(\"d\", pathData)\r\n                .attr(\"transform\",\"translate(50)\")\r\n                .attr(\"stroke\", \"blue\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n\r\n            const svgSumPlot = d3.select(\"#svgSumPlot\")\r\n\r\n                svgSumPlot.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")  \r\n                .attr(\"x\",400)\r\n                .attr(\"y\",30)\r\n                .style(\"font-size\", \"16px\") \r\n                .style(\"text-decoration\", \"underline\")  \r\n                .text(\"Sum of Signals Plot\");\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\",\"translate(0,400)\")\r\n                .call(x_axis);\r\n\r\n                svgSumPlot.append('g')\r\n                .attr(\"transform\",\"translate(20,0)\")\r\n                .call(y_axis)\r\n                .attr(\"transform\",\"translate(50,0)\");\r\n                \r\n        }\r\n\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class FrequencyDomain extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            signals: [\r\n                /* Example signal object \r\n                    {\r\n                    id: 0,\r\n                    amplitude: 1,\r\n                    frequency: 1,\r\n                    values: this.generateSignal(1,1),\r\n                    dragging: false,    \r\n                    },\r\n                */\r\n            ],\r\n            circles:[\r\n            ],\r\n        };\r\n        // This binding is necessary to make `this.` work in the callback   \r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseUp = this.handleMouseUp.bind(this);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    }\r\n    \r\n    addSignal(){\r\n        const signals = this.state.signals;\r\n\r\n        // Once this.setState has been called, it'll call render() to render straight away\r\n        this.setState({\r\n            signals: signals.concat([{  // Just concatenating array of JSON\r\n                id: signals.length,\r\n                amplitude: 0,           // Should be user input\r\n                frequency: 0,           // Should be user input\r\n                phase: 0,\r\n                values: this.generateSignal(0,0,0),\r\n                dragging: false,    \r\n            },]),\r\n        });        \r\n\r\n\r\n    }\r\n\r\n    removeSignal(i){\r\n        // Need to find signal id from the array and delete, then re-update id's\r\n        const signals = this.state.signals;\r\n\r\n\r\n        console.log(\"Hi from removeSignal\");    \r\n        console.log(i)\r\n        console.log(\"Before: \", signals);\r\n        signals.splice(i,1)\r\n        console.log(\"After:\", signals);\r\n\r\n        for(let n = 0; n< this.state.signals.length; n++){\r\n            signals[n].id = n;\r\n        }        \r\n\r\n        // Find the svgId and pathID and delete from DOM\r\n\r\n        let svgID  = 'svg_'\r\n        let pathID = 'path_'\r\n        svgID = svgID.concat(i.toString(10))\r\n        pathID = pathID.concat(i.toString(10))\r\n\r\n        d3.select(\"#\"+svgID).remove();\r\n\r\n        this.setState({\r\n            signals: signals,\r\n        });\r\n        console.log(this.state.signals);\r\n\r\n    \r\n    }\r\n\r\n    generateSignal(amplitude, frequency, phase){\r\n        // Generating path data\r\n        let points = [];\r\n        const plotHeight = 700;\r\n        const plotWidth = 700;\r\n        let scale = -100;\r\n        let x_offset = 0;\r\n        let y_offset = 50;\r\n\r\n        let Fs = 80;\r\n        let Ts = Math.PI / 200;\r\n\r\n        /* Calculation Reference\r\n        // 1 period = 1 second\r\n        // 1 period = 400 pixels => Ts = 400 samples per second\r\n        // 1 Hz = 2pi radians\r\n\r\n        // Sampling frequency = samples/second\r\n        // 1 sample per 1/400 second (Ts = 1/400)\r\n        // Fs = 2pi * (1/400)\r\n        // Fs = pi / 200\r\n\r\n        // Frequency is in Hz\r\n        // This is bascially an inverse FFT \r\n        // i is basically our t (1 unit of time)\r\n        */\r\n        for(let i = x_offset; i< plotWidth; i++)\r\n        {\r\n            points[i] = [i, scale*amplitude*Math.sin(Ts*frequency*i + (phase * (Math.PI / 180) )) + (plotHeight/2 + y_offset)];\r\n        }\r\n        return points;\r\n    }\r\n\r\n    updateDials(){\r\n        const signals = this.state.signals;\r\n\r\n        for(let i = 0; i< signals.length; i++){\r\n            document.getElementById(\"signal\" + signals[i].id + \"_AmpText\").value = signals[i].amplitude;\r\n            document.getElementById(\"signal\" + signals[i].id + \"_FreqText\").value = signals[i].frequency;\r\n        }\r\n    }\r\n\r\n    handleChange(event){\r\n\r\n\r\n        const signals = this.state.signals;\r\n        const inputType = event.target.getAttribute('input_type');\r\n        const signalID = event.target.getAttribute('signal_id'); // Signal ID Number\r\n        let value = parseFloat(event.target.value);   \r\n\r\n        // Text Form can currently exceed the maximum limit of 10, should limit?\r\n\r\n        if((inputType === \"AmpDial\") || (inputType === \"AmpText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                signals[signalID].amplitude = value;                 \r\n                signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                document.getElementById(\"signal\" + signalID + \"_AmpText\").value = value;\r\n            }\r\n        }\r\n        else if ((inputType === \"FreqDial\") || (inputType === \"FreqText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                signals[signalID].frequency = value; \r\n                signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                document.getElementById(\"signal\" + signalID + \"_FreqText\").value = value;\r\n            }\r\n        } \r\n        else if ((inputType === \"PhaseDial\") || (inputType === \"PhaseText\")){\r\n            if(isNaN(value)){\r\n                value = 0;\r\n            }\r\n            else{\r\n                signals[signalID].phase = value; \r\n                signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n                document.getElementById(\"signal\" + signalID + \"_PhaseText\").value = value;\r\n            }\r\n        }     \r\n\r\n        this.setState({\r\n                signals: signals,   \r\n            }   \r\n        );\r\n\r\n    }\r\n\r\n    \r\n    handleMouseDown(e){\r\n        console.log(\"clicked\")\r\n\r\n        e.preventDefault();\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n\r\n        signals[signalID].dragging = true;\r\n\r\n        this.setState({\r\n            signals: signals,   \r\n            }\r\n        );   \r\n    }\r\n\r\n    handleMouseUp(e){\r\n        console.log(\"click released\")\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n        console.log(e.type)\r\n        if(e.type == 'mouseout' && signals[signalID].dragging) {\r\n            console.log(\"mouse went out\")\r\n            return;\r\n        }\r\n\r\n        signals[signalID].dragging = false;\r\n        \r\n        this.setState({\r\n            signals: signals,   \r\n            }\r\n        );\r\n        \r\n    }\r\n\r\n    handleMouseMove(e) {\r\n\r\n        const signals = this.state.signals;\r\n        const signalID = e.target.getAttribute('signal_id'); // Signal ID Number\r\n\r\n        //If we are dragging\r\n          if (signals[signalID].dragging) {\r\n              e.preventDefault();\r\n\r\n              console.log(e)\r\n              console.log(e.target)\r\n              console.log(\"clientX:\",e.clientX)\r\n              console.log(\"clientY:\",e.clientY)\r\n              // console.log(e.target.parentNode.parentNode)\r\n            let  rect = e.target.parentNode.parentNode.getBoundingClientRect();  \r\n\r\n            console.log(rect.left);\r\n            console.log(rect.top);\r\n\r\n\r\n            // Maybe should seperate coordinates and freq/amp values\r\n             signals[signalID].frequency = (e.clientX - rect.left - 400) / 100;\r\n             signals[signalID].amplitude = - (e.clientY - rect.top - 400) / 100;\r\n             signals[signalID].values = this.generateSignal(signals[signalID].amplitude, signals[signalID].frequency, signals[signalID].phase);\r\n\r\n\r\n            // We should set position limits\r\n\r\n            console.log(signals[signalID].frequency)\r\n            console.log(signals[signalID].amplitude)\r\n\r\n            console.log(this)\r\n\r\n            this.setState({\r\n                signals: signals,   \r\n                }\r\n            );  \r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n    const current = this.state.signals;\r\n\r\n    return (\r\n            <div className = {styles.container}>\r\n\r\n                <div className = {styles.sinePlots} id =\"sinePlotsID\">\r\n                    <SinePlot\r\n                        signals = {current}\r\n                    />\r\n                </div>\r\n\r\n                <div className = {styles.otherPlots}>\r\n                    <div className = {styles.freqPlots} id =\"freqPlotsID\">\r\n                        <svg id=\"svgFreqPlot\" width=\"800\" height=\"800\"  \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black',\r\n                                \r\n                                }}> \r\n                        \r\n                            <FrequencyPlot\r\n                                signals = {current}\r\n                                onMouseDown = {(event) => this.handleMouseDown(event)}\r\n                                onMouseUp = {(event) => this.handleMouseUp(event)}\r\n                                onMouseOut = {(event) => this.handleMouseUp(event)}\r\n                                onMouseMove = {(event) => this.handleMouseMove(event)}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className = {styles.sumPlots} id =\"sumPlotsID\">\r\n                        <svg id=\"svgSumPlot\" width=\"800\" height=\"800\" \r\n                            style = {{\r\n                                position: \"relative\", \r\n                                top: \"0%\",\r\n                                left: \"0%\",\r\n                                transform: \"translate(0%, 0%)\",\r\n                                border: '1px solid black'\r\n                                }}> \r\n                            <SumPlot\r\n                                signals = {current}\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div className = {styles.controls}>\r\n                    \r\n                        <Controls\r\n                            signals = {current}\r\n                            onChange = {(event) => this.handleChange(event)}\r\n                            onAdd = {() => this.addSignal()}\r\n                            onRemove = {(i) => this.removeSignal(i)}\r\n                        />\r\n                    \r\n                </div>\r\n            </div>\r\n      );\r\n    }\r\n  }","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import logo from './logo.svg';\r\nimport styles from './App.module.css';\r\nimport * as d3 from \"d3\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nimport {FourierCoefficients} from './FourierCoefficients.js'\r\nimport {FrequencyDomain} from './FrequencyDomain.js'\r\n\r\n/*\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\n\r\n/* Known Bugs:\r\n- removeSignal() only works if you starting removing from the last signal\r\n- if you move/drag the mouse too fast the circle doesn't catch up\r\n- phase dial for DC signal updates amplitude when it's not meant to\r\n- negative phase circle is meant to move in opposite direction when dragged (cartersian coordinate problem)\r\n\r\n\r\n- Changing frequency does update the signal (when it's not meant to)\r\n^ But this is deliberate because we haven't updated FreqPlot functionality to fit with Fourier Plots\r\n*/\r\n\r\n\r\n\r\nfunction App() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        </header>\r\n        <Router>\r\n          <div className = {styles.navbar}>\r\n                      <div className = {styles.tab} id=\"home\">  \r\n                        <Link to=\"/\">Home</Link>\r\n                      </div>\r\n                      <div className = {styles.tab}> \r\n                        <Link to=\"/about\">About</Link>\r\n                      </div>\r\n                      <div className = {styles.tab}>  \r\n                        <Link to=\"/FourierCoefficients\">Fourier Coefficients</Link>\r\n                      </div>\r\n                      <div className = {styles.tab}>  \r\n                        <Link to=\"/FrequencyDomain\">Frequency Domain</Link>\r\n                      </div>\r\n          </div>\r\n            {/*\r\n              A <Switch> looks through all its children <Route>\r\n              elements and renders the first one whose path\r\n              matches the current URL. Use a <Switch> any time\r\n              you have multiple routes, but you want only one\r\n              of them to render at a time\r\n            */}\r\n\r\n            <Switch>\r\n              <Route exact path=\"/\">\r\n                <Home />\r\n              </Route>\r\n              <Route path=\"/about\">\r\n                <About />\r\n              </Route>\r\n              <Route path=\"/FourierCoefficients\">\r\n                <FourierCoefficients />\r\n              </Route>\r\n              <Route path=\"/FrequencyDomain\">\r\n                <FrequencyDomain />\r\n              </Route>\r\n            </Switch>\r\n  \r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function About() {\r\n    return (\r\n      <div className = {styles.centertext}>  \r\n        <div>\r\n          <h2>About the Project</h2>\r\n            <h4>\r\n              The aim of the project was to help students to have a more intuitive understanding \r\n              of the various topics in ECE2111 - Signals and Systems. The unit ECE2111, Signals and Systems, \r\n              taught by lecturer James Saunderson, involves many visual representations of the properties of \r\n              sinusoidal signals and their frequency response. \r\n            </h4>\r\n            <h4>\r\n              James had an idea of a helpful, interactive web application where students could interact \r\n              with and adjust signal properties and observe the relationships in time domain, frequency \r\n              domain etc. Hence, this final year project was proposed.\r\n            </h4>\r\n          <h2/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  class Home extends React.Component{\r\n    render() {\r\n\r\n      return(\r\n      <div>\r\n        <div className = {styles.centertext}>  \r\n          <h2>Welcome!</h2>\r\n          <h4>\r\n            This website was designed to allow students to learn more about topics in the unit ECE2111\r\n            through visualization and interaction with signal properties.\r\n            \r\n          </h4>\r\n            <h4>\r\n              Feel free to explore the topics, there's (hopefully) more to come!\r\n            </h4>\r\n          </div>\r\n      </div>\r\n      )\r\n\r\n    };\r\n  }\r\n\r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n  );\r\n\r\n  export default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}